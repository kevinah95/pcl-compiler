import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;

import javax.xml.transform.*;
import javax.xml.transform.stream.*;


/*.-------------.
  | PARSER CODE |
  '-------------'*/
parser code {:
	private int line;
	private int column;

    /**
    Refactoring...
    */
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
    }
	public void report_error(String message, Object info) {
        System.err.print(message);
        System.err.flush();
        //System.out.println(message);
        //System.out.println(info instanceof java_cup.runtime.Symbol);
        if(info instanceof java_cup.runtime.Symbol) {
            System.err.println(" "+info);
            Symbol temp = (Symbol)info;
            //System.err.println(" What info:"+getTokenName(temp.sym));
            /*System.err.println(" Has left: "+((Symbol)info).left);
            System.err.println(" Has right: "+((Symbol)info).right);*/
            if(((Symbol)info).left != -1) {
                System.err.println(" at character " + ((Symbol)info).left + " of input");
            } else {
                System.err.println("");
            }
            /*if(((Symbol)info).right != -1) {
                System.err.println(" at character " + ((Symbol)info).right + " of input");
            } else {
                System.err.println("");
            }*/
        } else {
            System.err.println("");
        }

    }

    /**
     * Converts an int token code into the name of the
     * token by reflection on the cup symbol class/interface sym
     *
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    public String getTokenName(int token) {
        try {
            java.lang.reflect.Field [] classFields = sym.class.getFields();
            for (int i = 0; i < classFields.length; i++) {
                if (classFields[i].getInt(null) == token) {
                    return classFields[i].getName();
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }

        return "UNKNOWN TOKEN";
    }
    /*protected int error_sync_size () {
     System.out.println(":error_sync_size was called.");
        return 3;   // not recommended by the CUP manual
          // but we need recovery after the next successful shift
    }*/
    public void syntax_error( Symbol currToken ) {
        report_error( "Syntax Error", currToken );
    }
:}

/*.-----------.
  | TERMINALS |
  '-----------'*/

/* identifier */
terminal IDENTIFIER;

/* keywords */
terminal BEGIN, CONST, DO, DOWNTO, ELSE, END,
        FALSE, FILE, FORWARD, FUNCTION, GOTO, IN, INLINE, LABEL,
        NIL, OF, PACKED, PROCEDURE, PROGRAM, READ, RECORD, //TODO NIL
        SET, THEN, TO, TRUE, TYPE, UNTIL, VAR, WITH, WRITE;

/* control structure */
terminal CASE, IF, FOR, REPEAT, WHILE;

/* operators */
terminal AND, NOT, OR, XOR, DIV, MOD,
        COMMA, SEMICOLON, PLUSPLUS, MINUSMINUS, GTEQ, GT, LTEQ, LT, NEQ, EQ, PLUS,
        MINUS, MULT, DIV_SYM, LPAREN, RPAREN, LBRACK, RBRACK, ASSIGN, DOT, COLON,
        PLUSEQ, MINUSEQ, MULTEQ, DIVEQ, RSHIFT, LSHIFT, LSHIFTEQ, RSHIFTEQ;

/* types */
terminal ARRAY, BOOLEAN, BYTE, CHAR, INT, LONGINT, REAL, SHORTINT, STRING_TYPE;

/* literals */
terminal java.lang.String STRING_LITERAL;
terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.Character CHARACTER_LITERAL; //TODO "#80" is not valid

/* unary operators */
terminal UMINUS,PREINCR;

/*.---------------.
  | NON TERMINALS |
  '---------------'*/
non terminal type,
        program, program_head, program_aux ,
        functions, function, function_head, function_body, procedure, procedure_body,
        procedure_head, block, sentence_block, sentence, value_assignment, read_write, read,
        read_parameters, rw_parameter_list, rw_parameter_list_prime,
        write, write_parameters, control, while,
        repeat, if, else, for, case, cases, cases_prime, case_option, condition, other_comparison,
        boolean_exp, comparison, comparison_op, expression, unary_operation,
        increment_decrease_operator, binary_operation,
        parameters, parameter, parameter_prime, constants,
        globals, var_assignments, cons_assignments, identifiers, identifiers_prime,
        assignment_type, array, array_type,
        array_size_values, array_size,
        one_var_assignment,one_const_assignment,
        var_assignments_prime,cons_assignments_prime,functions_prime,assigned_value,
        func_call,func_call_params,func_call_param,func_call_param_prime,
        for_lit,literals,location,parameters_prime,return_value;

/*.------------.
  | PRECEDENCE |
  '------------'*/
precedence left SEMICOLON;
precedence left IDENTIFIER;
precedence left NIL;
precedence left error;
precedence left BEGIN,END;
//precedence right UMINUS, OP_NOT;
precedence right UMINUS, PREINCR;
precedence left NOT;
precedence left PLUSPLUS,MINUSMINUS;
precedence left PLUS, MINUS;
//precedence right ASSIGN;
precedence left MULT, DIV_SYM, MOD,DIV;
precedence left DOT,LPAREN,RPAREN;
precedence left LBRACK,RBRACK;
precedence left SEMICOLON;
precedence left COMMA;
precedence left READ,WRITE;
precedence right ELSE;
precedence left OR;
precedence left AND;
precedence left EQ, NEQ;
precedence left LT, LTEQ, GT, GTEQ;
precedence left DIVEQ,MULTEQ,MINUSEQ,PLUSEQ;
precedence left FOR,IF,CASE,REPEAT,WHILE;
precedence left STRING_LITERAL,INTEGER_LITERAL,FLOATING_POINT_LITERAL,BOOLEAN_LITERAL,CHARACTER_LITERAL;

/*.---------.
  | GRAMMAR |
  '---------'*/
/*.---------.
  | PROGRAM |
  '---------'*/
program ::= {::}
        | program_head:p_head program_aux:p_aux {: :};

program_head ::= PROGRAM:t_p IDENTIFIER:t_i
                {: :}
                | error:syntax_error IDENTIFIER:t_i
                //{: parser.report_error( "PROGRAM expected", new Symbol(sym.PROGRAM, t_ileft, t_iright, t_i ));:}
                | PROGRAM:t_p error:syntax_error
                {:  parser.report_error("Syntax ERROR: IDENTIFIER expected",null);:};

program_aux ::= constants:nt_const globals:nt_globals functions:nt_funcs BEGIN:t_begin block:nt_b END:t_end
                {::}
                | constants:nt_const globals:nt_globals BEGIN:t_begin block:nt_b END:t_end
                {::};

/*.-----------.
  | CONSTANTS |
  '-----------'*/
constants ::= {::}
            | CONST:t_const cons_assignments:nt_const_assign
            {::};

cons_assignments ::= one_const_assignment:o_c_a cons_assignments_prime:c_a_p {::};

one_const_assignment ::= identifiers:t_ids EQ:t_eq expression:nt_o_c_a_value SEMICOLON:t_sc
                       {:  :}
                       | error:syntax_error SEMICOLON:t_sc
                       {:  parser.report_error("Invalid CONST assignment.",null); :};

cons_assignments_prime ::= {::}
        | cons_assignments:c_p {::};

/*.---------.
  | GLOBALS |
  '---------'*/
globals ::= {::}
    | VAR:t_var var_assignments:v_a {::};

var_assignments ::= one_var_assignment:o_v_a var_assignments_prime:v_a_p {::};

var_assignments_prime ::= {::}
        | var_assignments:v_a {::};

one_var_assignment ::= identifiers:ids COLON:t_colon assignment_type:a_t SEMICOLON:t_sc
        {::}
        | error:syntax_error COLON:t_colon assignment_type:a_t SEMICOLON:t_sc
        {:  parser.report_error("Invalid VAR assignment.",null); :}
        | error:syntax_error SEMICOLON:t_sc
        {:  parser.report_error("Invalid VAR assignment.",null); :};

identifiers ::= IDENTIFIER:t_id identifiers_prime:id_aux {::};

identifiers_prime ::= {::}
    | COMMA:t_comma identifiers:ids {::};

/*.-----------.
  | FUNCTIONS |
  '-----------'*/
functions ::= function:nt_f functions_prime:nt_f_p {::}
        | procedure:nt_p functions_prime:nt_f_p {::};

functions_prime ::= {::}
        | functions:nt_fs{::};

function ::= function_head:f_h BEGIN:t_begin function_body:f_b END:t_end
            {::};

function_head ::= FUNCTION:t_func IDENTIFIER:t_id parameters:params COLON:t_colon type:nt_type
            {:  :}
            | error:syntax_error COLON:t_colon type:nt_type
            {:  parser.report_error("Invalid FUNCTION header.",null); :}
            | FUNCTION:t_func IDENTIFIER:t_id parameters:params COLON:t_colon error:syntax_error
            {:  parser.report_error("Invalid FUNCTION header.",null); :};

function_body ::= globals:nt_g constants:nt_c BEGIN:t_b block:nt_b value_assignment:nt_r END:t_e
                {::}
                | globals:nt_g constants:nt_c BEGIN:t_b block:nt_b END:t_e
                {::}
                /*| globals:nt_g constants:nt_c BEGIN:t_b block:nt_b return_value:nt_r END:t_e
                {::}*/
                | {::};

return_value ::= IDENTIFIER:t_id ASSIGN:t_a expression:nt_exp {::};

/*.-----------.
  | PROCEDURE |
  '-----------'*/
procedure ::= procedure_head:nt_p_h BEGIN:t_begin procedure_body:nt_p_b END:t_end
            {::};

procedure_body ::= {::}
                | globals:nt_g constants:nt_c BEGIN:t_b block:nt_b END:t_e {::};

procedure_head ::= PROCEDURE:t_proc IDENTIFIER:t_id  parameters:nt_p
                 {::}
                 | error:syntax_error {: parser.report_error("Invalid PROCEDURE header.",null); :};

parameters ::= LPAREN:t_lp parameters_prime:p_p RPAREN:t_rp {::};

parameters_prime ::= {::}
        | parameter:p_l {::};

parameter ::= type:nt_t IDENTIFIER:t_id parameter_prime:nt_p_l_a {::};

parameter_prime ::= {::}
    | COMMA:t_comma parameter:nt_pl {::};

/*.-------.
  | BLOCK |
  '-------'*/
block ::= {::} | sentence_block:nt_s_b {::};

sentence_block ::= sentence:nt_s sentence_block:nt_s_b_p {::}
                | sentence:nt_s {::};

sentence ::= expression:nt_o SEMICOLON:sc {::}
    | value_assignment:nt_v_a {::}
    | read_write:nt_r_w {::}
    | control:nt_c {::};

/*.------------------.
  | VALUE ASSIGNMENT |
  '------------------'*/
value_assignment ::= expression:nt_exp1 ASSIGN:t_a expression:nt_exp2 SEMICOLON:t_sc
                     {::}
                    | error:syntax_error SEMICOLON:sc {:  parser.report_error("Invalid Assigment", null ); :};

/*.------------.
  | READ/WRITE |
  '------------'*/
read_write ::= read:nt_r {::} | write:nt_w {::};

read ::= READ:t_r LPAREN:t_lp read_parameters:nt_r_p RPAREN:t_rp SEMICOLON:t_sm
        {::}
        | READ:t_r error:syntax_error SEMICOLON:t_sm
        {: parser.report_error("Invalid READ call.", null ); :};

read_parameters ::= {::}
            | rw_parameter_list:r_p_l {::};

write ::= WRITE:t_w LPAREN:t_lp write_parameters:nt_w_p RPAREN:t_rp SEMICOLON:t_sm
        {::}
        | WRITE:t_r error:syntax_error SEMICOLON:t_sm
        {: parser.report_error("Invalid WRITE call.", null ); :};

write_parameters ::= rw_parameter_list:r_p_l {::};

rw_parameter_list ::= expression:r_p rw_parameter_list_prime:r_p_l_p {::};

rw_parameter_list_prime ::= {::}
        | COMMA:t_comma rw_parameter_list:r_p_l {::};

/*.--------------------.
  | CONTROL STRUCTURES |
  '--------------------'*/
control ::= while:nt_while {::}
        | repeat:nt_repeat {::}
        | if:nt_if {::}
        | for:nt_for {::}
        | case:nt_case {::};

while ::= WHILE:t_while condition:nt_c DO:t_do BEGIN:t_begin block:nt_b END:t_end
        {::}
        | WHILE:t_while error:syntax_error BEGIN:t_begin block:nt_b END:t_end
        {: parser.report_error("Invalid WHILE.", null ); :};

repeat ::= REPEAT:t_repeat block:nt_b UNTIL:t_until condition:nt_c SEMICOLON:t_sc
         {::};

/*.-------.
  | IF    |
  '-------'*/
if ::= IF:t_if condition:nt_con THEN:t_then block:nt_b1 else:nt_else
    {::}
    | IF:t_if error:syntax_error THEN:t_then block:nt_bl else:nt_else
    {: parser.report_error("Invalid IF.", null ); :};
    //| IF:t_if condition:nt_con error:syntax_error block:nt_bl else:nt_else
    //{:  parser.report_error("Invalid IF.",null); :};

/*.-------.
  | ELSE  |
  '-------'*/
else::= {::}
      | ELSE:t_else  block:nt_b2 {::};

/*.-------.
  | FOR   |
  '-------'*/
for ::= FOR:t_for IDENTIFIER:t_id ASSIGN:t_a for_lit:nt_f_lit1 TO:t_to for_lit:nt_f_lit2 DO:t_do BEGIN:t_b block:nt_b END:t_e
        {::}
        | FOR:t_for IDENTIFIER:t_id ASSIGN:t_a for_lit:int_f_lit1 TO:t_to for_lit:nt_f_lit2 error:syntax_error BEGIN:t_b block:nt_b END:t_e
        {:  parser.report_error("Invalid FOR",null); :}
        | FOR:t_for IDENTIFIER:t_id error:syntax_error for_lit:int_f_lit1 TO:t_to for_lit:nt_f_lit2 DO:t_do BEGIN:t_b block:nt_b END:t_e
        {:  parser.report_error("Invalid FOR",null); :}
        | FOR:t_for IDENTIFIER:t_id ASSIGN:t_a for_lit:int_f_lit1 error:syntax_error for_lit:nt_f_lit2 DO:t_do BEGIN:t_b block:nt_b END:t_e
        {:  parser.report_error("Invalid FOR",null); :}
        | FOR:t_for error:syntax_error ASSIGN:t_a for_lit:int_f_litl TO:t_to for_lit:nt_f_lit2 DO:t_do BEGIN:t_b block:nt_b END:t_e
        {:  parser.report_error("Invalid FOR",null); :};


for_lit::= MINUS:t_minus INTEGER_LITERAL:t_int_lit {::}
            | INTEGER_LITERAL:t_int_lit {::};

/*.-----------.
  | CASE      |
  '-----------'*/
case ::= CASE:t_case IDENTIFIER:t_id OF:t_of cases:nt_cases ELSE:t_else block:nt_b
        {::}
        | CASE:t_case error:syntax_error OF:t_of cases:nt_cases ELSE:t_else block:nt_b
        {:  parser.report_error("Invalid CASE.",null); :}
        | CASE:t_case IDENTIFIER:t_id error:syntax_error cases:nt_cases ELSE:t_Else block:nt_b
        {:  parser.report_error("Invalid CASE.",null); :}
        | CASE:t_case IDENTIFIER:t_id OF:t_of error:syntax_error ELSE:t_Else block:nt_b
        {:  parser.report_error("Invalid CASE.",null); :};

cases ::= case_option:nt_c_o cases_prime:nt_c_a {::};

cases_prime ::= {::}
        | cases:nt_c {::};

case_option ::= expression:nt_v COLON:t_colon block:nt_b SEMICOLON:t_sc
            {::};

/*.-----------.
  | CONDITION |
  '-----------'*/
condition ::= LPAREN:t_lp comparison:nt_c other_comparison:nt_o_c RPAREN:t_rp {::}
        | NOT:t_not condition:nt_cond {::};

other_comparison ::= {::}
        | boolean_exp:nt_b_e condition:nt_c {::};

boolean_exp ::= AND:t_and {::}
        | OR:t_or {::}
        | NOT:t_not {::};

comparison ::= LPAREN:t_lp expression:nt_exp1 comparison_op:nt_c_o expression:nt_exp2 RPAREN:t_rp
            {::}
            | expression:nt_exp1 comparison_op:nt_c_o expression:nt_exp2
            {::}
            | NOT:t_not comparison:nt_cond {::};

comparison_op ::= EQ:t_eq {::}
        | GTEQ:t_gteq {::}
        | GT:t_gt {::}
        | LTEQ:t_lteq {::}
        | LT:t_lt {::}
        | NEQ:t_neq {::};

/*.------------.
  | EXPRESSION |
  '------------'*/
expression ::= unary_operation:nt_s_s_o {::}
        | binary_operation:nt_d_s_o {::}
        | literals:nt_v {::}
        | location:t_id {::}
        | MINUS:t_minus expression:nt_op {::}%prec UMINUS
        | LPAREN:t_lp expression:nt_o RPAREN:t_rp {: :}%prec LPAREN
        | func_call:nt_fn_cl {: :}
        | NIL:t_nil {: :}
        | NOT:t_not expression:nt_exp {::};



/*.-----------------.
  | UNARY OPERATION |
  '-----------------'*/
unary_operation ::= expression:t_id increment_decrease_operator:nt_r_o {::}
    | increment_decrease_operator:nt_l_o expression:t_id {::};

increment_decrease_operator ::= PLUSPLUS:t_p_p {::}
        | MINUSMINUS:t_m_m {::};

/*.------------------.
  | BINARY OPERATION |
  '------------------'*/
binary_operation ::= expression:nt_o1 PLUS:t_p expression:nt_o2
                       {::}
                     | expression:nt_o1 MINUS:t_m expression:nt_o2
                       {::} %prec MINUS
                     | expression:nt_o1 MULT:t_m expression:nt_o2
                       {::}
                     | expression:nt_o1 DIV_SYM:t_d expression:nt_o2
                       {::}
                     | expression:nt_o1 MOD:t_m expression:nt_o2
                       {::}
                     | expression:nt_o1 DIV:t_d expression:nt_o2
                       {::}
                     | expression:nt_o1 PLUSEQ:t_p expression:nt_o2
                       {::}
                     | expression:nt_o1 MINUSEQ:t_m expression:nt_o2
                       {::}
                     | expression:nt_o1 MULTEQ:t_m expression:nt_o2
                       {::}
                     | expression:nt_o1 DIVEQ:t_d expression:nt_o2
                       {::};

/*.----------.
  | LITERALS |
  '----------'*/
literals ::= STRING_LITERAL:t_str_lit {:  :}
    | INTEGER_LITERAL:t_int_lit {:  :}
    | FLOATING_POINT_LITERAL:t_float_lit {:  :}
    | CHARACTER_LITERAL:t_char_lit {:  :}
    | BOOLEAN_LITERAL:t_bool_lit {:  :};

/*.----------.
  | LOCATION |
  '----------'*/
location ::= IDENTIFIER:id {: :}
            | expression:e1 LBRACK:t_lb expression:e2 RBRACK:t_rb {:  :} 
            | IDENTIFIER:id LBRACK:t_lb expression:e2 RBRACK:t_rb {:  :};

/*.---------------.
  | FUNCTION CALL |
  '---------------'*/
func_call ::= IDENTIFIER:t_id LPAREN:t_lb func_call_params:nt_fn_cl_pm RPAREN:t_rb
        {::}
        | IDENTIFIER:t_id error:syntax_error func_call_params:nt_fn_cl_pm RPAREN:t_rb
        {:  parser.report_error("Invalid FUNCTION call.",null); :};
        //| IDENTIFIER:t_id LPAREN:t_lb func_call_params:nt_fn_cl_pm error:syntax_error
        //{:  parser.report_error("Invalid FUNCTION call.",null); :};

func_call_params ::= {::}
        | func_call_param:nt_fn_cl_pm_lt {::};

func_call_param ::= expression:nt_exp func_call_param_prime:nt_f_c_p_l_p {::};

func_call_param_prime ::= {::}
                        | COMMA:t_comma func_call_param:nt_f_c_p_l {::};

/*.-------.
  | TYPES |
  '-------'*/
assignment_type ::= type:t {::} | array:a {::};

array ::= ARRAY:t_a LBRACK:t_lb array_size:nt_a_z RBRACK:t_rb OF:t_of array_type:t_atype
        {::};

array_size::= array_size_values:t_fst_i DOT:t_fst_d DOT:t_snd_d array_size_values:t_snd_i {::}
        | array_size_values:t_fst_i {:  :};

array_size_values::= IDENTIFIER:t_id {:  :}
        | INTEGER_LITERAL:t_i_l {:  :}
        | func_call:nt_fn_cl {:  :}
        | MINUS:t_minus array_size_values:nt_a_s_v {::};

type ::= BOOLEAN:p_bool {::}
        | BYTE:pbyte {::}
        | CHAR:pchar {::}
        | INT:pint {::}
        | LONGINT:plongint {::}
        | SHORTINT:pshortint {::}
        | REAL:t_real {::}
        | STRING_TYPE:pstring {::};

array_type ::= CHAR:pchar {::}
        | INT:pint {::}
        | LONGINT:plongint {::}
        | SHORTINT:pshortint {::};

