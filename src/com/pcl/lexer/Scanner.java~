/* The following code was generated by JFlex 1.6.1 */

package com.pcl.lexer;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/kevinah95/IdeaProjects/pcl-compiler/src/com/pcl/lexer/pcl.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\3\1\2\1\74\1\75\1\1\16\13\4\0\1\3\1\51"+
    "\1\23\1\72\1\12\1\61\1\55\1\24\1\4\1\6\1\5\1\57"+
    "\1\45\1\22\1\20\1\11\1\14\1\63\1\62\1\67\1\64\1\15"+
    "\1\70\1\65\1\66\1\15\1\54\1\44\1\50\1\46\1\47\1\53"+
    "\1\0\1\26\2\12\1\30\1\21\1\17\5\12\1\16\1\12\1\27"+
    "\14\12\1\42\1\25\1\43\1\60\1\12\1\0\1\36\1\73\1\12"+
    "\1\71\1\34\1\35\5\12\1\37\1\12\1\41\3\12\1\32\1\40"+
    "\1\31\1\33\5\12\1\7\1\56\1\10\1\52\6\13\1\76\32\13"+
    "\2\0\4\12\4\0\1\12\2\0\1\13\7\0\1\12\4\0\1\12"+
    "\5\0\27\12\1\0\37\12\1\0\u01ca\12\4\0\14\12\16\0\5\12"+
    "\7\0\1\12\1\0\1\12\21\0\160\13\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\1\0\5\13\2\0\236\12\11\0\46\12\2\0"+
    "\1\12\7\0\47\12\7\0\1\12\1\0\55\13\1\0\1\13\1\0"+
    "\2\13\1\0\2\13\1\0\1\13\10\0\33\12\5\0\3\12\15\0"+
    "\5\13\6\0\1\12\4\0\13\13\5\0\53\12\37\13\4\0\2\12"+
    "\1\13\143\12\1\0\1\12\10\13\1\0\6\13\2\12\2\13\1\0"+
    "\4\13\2\12\12\13\3\12\2\0\1\12\17\0\1\13\1\12\1\13"+
    "\36\12\33\13\2\0\131\12\13\13\1\12\16\0\12\13\41\12\11\13"+
    "\2\12\4\0\1\12\5\0\26\12\4\13\1\12\11\13\1\12\3\13"+
    "\1\12\5\13\22\0\31\12\3\13\104\0\1\12\1\0\13\12\67\0"+
    "\33\13\1\0\4\13\66\12\3\13\1\12\22\13\1\12\7\13\12\12"+
    "\2\13\2\0\12\13\1\0\7\12\1\0\7\12\1\0\3\13\1\0"+
    "\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0"+
    "\4\12\2\0\1\13\1\12\7\13\2\0\2\13\2\0\3\13\1\12"+
    "\10\0\1\13\4\0\2\12\1\0\3\12\2\13\2\0\12\13\4\12"+
    "\7\0\1\12\5\0\3\13\1\0\6\12\4\0\2\12\2\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\13"+
    "\1\0\5\13\4\0\2\13\2\0\3\13\3\0\1\13\7\0\4\12"+
    "\1\0\1\12\7\0\14\13\3\12\1\13\13\0\3\13\1\0\11\12"+
    "\1\0\3\12\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12"+
    "\2\0\1\13\1\12\10\13\1\0\3\13\1\0\3\13\2\0\1\12"+
    "\17\0\2\12\2\13\2\0\12\13\1\0\1\12\17\0\3\13\1\0"+
    "\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\5\12\2\0\1\13\1\12\7\13\2\0\2\13\2\0\3\13\10\0"+
    "\2\13\4\0\2\12\1\0\3\12\2\13\2\0\12\13\1\0\1\12"+
    "\20\0\1\13\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0"+
    "\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0"+
    "\14\12\4\0\5\13\3\0\3\13\1\0\4\13\2\0\1\12\6\0"+
    "\1\13\16\0\12\13\11\0\1\12\7\0\3\13\1\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12\7\13"+
    "\1\0\3\13\1\0\4\13\7\0\2\13\1\0\2\12\6\0\2\12"+
    "\2\13\2\0\12\13\22\0\2\13\1\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\2\0\1\13\1\12\7\13\1\0"+
    "\3\13\1\0\4\13\7\0\2\13\7\0\1\12\1\0\2\12\2\13"+
    "\2\0\12\13\1\0\2\12\17\0\2\13\1\0\10\12\1\0\3\12"+
    "\1\0\51\12\2\0\1\12\7\13\1\0\3\13\1\0\4\13\1\12"+
    "\10\0\1\13\10\0\2\12\2\13\2\0\12\13\12\0\6\12\2\0"+
    "\2\13\1\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\3\0\1\13\4\0\6\13\1\0\1\13\1\0\10\13\22\0"+
    "\2\13\15\0\60\12\1\13\2\12\7\13\4\0\10\12\10\13\1\0"+
    "\12\13\47\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0"+
    "\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0"+
    "\1\12\2\0\2\12\1\0\4\12\1\13\2\12\6\13\1\0\2\13"+
    "\1\12\2\0\5\12\1\0\1\12\1\0\6\13\2\0\12\13\2\0"+
    "\4\12\40\0\1\12\27\0\2\13\6\0\12\13\13\0\1\13\1\0"+
    "\1\13\1\0\1\13\4\0\2\13\10\12\1\0\44\12\4\0\24\13"+
    "\1\0\2\13\5\12\13\13\1\0\44\13\11\0\1\13\71\0\53\12"+
    "\24\13\1\12\12\13\6\0\6\12\4\13\4\12\3\13\1\12\3\13"+
    "\2\12\7\13\3\12\4\13\15\12\14\13\1\12\17\13\2\0\46\12"+
    "\1\0\1\12\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12"+
    "\2\0\7\12\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12"+
    "\2\0\41\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12"+
    "\2\0\17\12\1\0\71\12\1\0\4\12\2\0\103\12\2\0\3\13"+
    "\40\0\20\12\20\0\125\12\14\0\u026c\12\2\0\21\12\1\0\32\12"+
    "\5\0\113\12\3\0\3\12\17\0\15\12\1\0\4\12\3\13\13\0"+
    "\22\12\3\13\13\0\22\12\2\13\14\0\15\12\1\0\3\12\1\0"+
    "\2\13\14\0\64\12\40\13\3\0\1\12\3\0\2\12\1\13\2\0"+
    "\12\13\41\0\3\13\2\0\12\13\6\0\130\12\10\0\51\12\1\13"+
    "\1\12\5\0\106\12\12\0\35\12\3\0\14\13\4\0\14\13\12\0"+
    "\12\13\36\12\2\0\5\12\13\0\54\12\4\0\21\13\7\12\2\13"+
    "\6\0\12\13\46\0\27\12\5\13\4\0\65\12\12\13\1\0\35\13"+
    "\2\0\13\13\6\0\12\13\15\0\1\12\130\0\5\13\57\12\21\13"+
    "\7\12\4\0\12\13\21\0\11\13\14\0\3\13\36\12\15\13\2\12"+
    "\12\13\54\12\16\13\14\0\44\12\24\13\10\0\12\13\3\0\3\12"+
    "\12\13\44\12\122\0\3\13\1\0\25\13\4\12\1\13\4\12\3\13"+
    "\2\12\11\0\300\12\47\13\25\0\4\13\u0116\12\2\0\6\12\2\0"+
    "\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12\3\0"+
    "\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12\5\0"+
    "\3\12\1\0\7\12\16\0\5\13\30\0\1\74\1\74\5\13\20\0"+
    "\2\12\23\0\1\12\13\0\5\13\5\0\6\13\1\0\1\12\15\0"+
    "\1\12\20\0\15\12\3\0\33\12\25\0\15\13\4\0\1\13\3\0"+
    "\14\13\21\0\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0"+
    "\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0"+
    "\13\12\2\0\4\12\5\0\5\12\4\0\1\12\21\0\51\12\u0a77\0"+
    "\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\13\2\12\14\0"+
    "\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0\1\12\17\0"+
    "\1\13\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\40\13"+
    "\57\0\1\12\u01d5\0\3\12\31\0\11\12\6\13\1\0\5\12\2\0"+
    "\5\12\4\0\126\12\2\0\2\13\2\0\3\12\1\0\132\12\1\0"+
    "\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0\20\12\u0200\0"+
    "\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0\56\12\2\0\u010d\12\3\0"+
    "\20\12\12\13\2\12\24\0\57\12\1\13\4\0\12\13\1\0\31\12"+
    "\7\0\1\13\120\12\2\13\45\0\11\12\2\0\147\12\2\0\4\12"+
    "\1\0\4\12\14\0\13\12\115\0\12\12\1\13\3\12\1\13\4\12"+
    "\1\13\27\12\5\13\20\0\1\12\7\0\64\12\14\0\2\13\62\12"+
    "\21\13\13\0\12\13\6\0\22\13\6\12\3\0\1\12\4\0\12\13"+
    "\34\12\10\13\2\0\27\12\15\13\14\0\35\12\3\0\4\13\57\12"+
    "\16\13\16\0\1\12\12\13\46\0\51\12\16\13\11\0\3\12\1\13"+
    "\10\12\2\13\2\0\12\13\6\0\27\12\3\0\1\12\1\13\4\0"+
    "\60\12\1\13\1\12\3\13\2\12\2\13\5\12\2\13\1\12\1\13"+
    "\1\12\30\0\3\12\2\0\13\12\5\13\2\0\3\12\2\13\12\0"+
    "\6\12\2\0\6\12\2\0\6\12\11\0\7\12\1\0\7\12\221\0"+
    "\43\12\10\13\1\0\2\13\2\0\12\13\6\0\u2ba4\12\14\0\27\12"+
    "\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0\5\12"+
    "\5\0\1\12\1\13\12\12\1\0\15\12\1\0\5\12\1\0\1\12"+
    "\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0\100\12"+
    "\2\0\66\12\50\0\15\12\3\0\20\13\20\0\7\13\14\0\2\12"+
    "\30\0\3\12\31\0\1\12\6\0\5\12\1\0\207\12\2\0\1\13"+
    "\4\0\1\12\13\0\12\13\7\0\32\12\4\0\1\12\1\0\32\12"+
    "\13\0\131\12\3\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12"+
    "\3\0\2\12\3\0\2\12\22\0\3\13\4\0\14\12\1\0\32\12"+
    "\1\0\23\12\1\0\2\12\1\0\17\12\2\0\16\12\42\0\173\12"+
    "\105\0\65\12\210\0\1\13\202\0\35\12\3\0\61\12\57\0\37\12"+
    "\21\0\33\12\65\0\36\12\2\0\44\12\4\0\10\12\1\0\5\12"+
    "\52\0\236\12\2\0\12\13\u0356\0\6\12\2\0\1\12\1\0\54\12"+
    "\1\0\2\12\3\0\1\12\2\0\27\12\252\0\26\12\12\0\32\12"+
    "\106\0\70\12\6\0\2\12\100\0\1\12\3\13\1\0\2\13\5\0"+
    "\4\13\4\12\1\0\3\12\1\0\33\12\4\0\3\13\4\0\1\13"+
    "\40\0\35\12\203\0\66\12\12\0\26\12\12\0\23\12\215\0\111\12"+
    "\u03b7\0\3\13\65\12\17\13\37\0\12\13\20\0\3\13\55\12\13\13"+
    "\2\0\1\13\22\0\31\12\7\0\12\13\6\0\3\13\44\12\16\13"+
    "\1\0\12\13\100\0\3\13\60\12\16\13\4\12\13\0\12\13\u04a6\0"+
    "\53\12\15\13\10\0\12\13\u0936\0\u036f\12\221\0\143\12\u0b9d\0\u042f\12"+
    "\u33d1\0\u0239\12\u04c7\0\105\12\13\0\1\12\56\13\20\0\4\13\15\12"+
    "\u4060\0\2\12\u2163\0\5\13\3\0\26\13\2\0\7\13\36\0\4\13"+
    "\224\0\3\13\u01bb\0\125\12\1\0\107\12\1\0\2\12\2\0\1\12"+
    "\2\0\2\12\2\0\4\12\1\0\14\12\1\0\1\12\1\0\7\12"+
    "\1\0\101\12\1\0\4\12\2\0\10\12\1\0\7\12\1\0\34\12"+
    "\1\0\4\12\1\0\5\12\1\0\1\12\3\0\7\12\1\0\u0154\12"+
    "\2\0\31\12\1\0\31\12\1\0\37\12\1\0\31\12\1\0\37\12"+
    "\1\0\31\12\1\0\37\12\1\0\31\12\1\0\37\12\1\0\31\12"+
    "\1\0\10\12\2\0\62\13\u1600\0\4\12\1\0\33\12\1\0\2\12"+
    "\1\0\1\12\2\0\1\12\1\0\12\12\1\0\4\12\1\0\1\12"+
    "\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0\1\12"+
    "\2\0\4\12\1\0\7\12\1\0\4\12\1\0\4\12\1\0\1\12"+
    "\1\0\12\12\1\0\21\12\5\0\3\12\1\0\5\12\1\0\21\12"+
    "\u1144\0\ua6d7\12\51\0\u1035\12\13\0\336\12\u3fe2\0\u021e\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\13\36\0\140\13\200\0\360\13\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\1\2\7\1\10\1\11\1\12\1\13\4\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\35\1\36\1\1\1\34\1\1\2\37\1\1\1\0"+
    "\1\40\1\0\1\2\1\41\1\42\1\43\1\44\1\45"+
    "\1\43\1\0\1\46\1\47\1\50\1\0\4\42\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\2\100\1\101"+
    "\10\67\2\0\1\42\1\43\2\0\1\27\3\42\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\0\1\2\1\42\1\0\1\115\1\42"+
    "\1\116\1\117\1\42\1\0\1\120\1\42\1\0\1\42"+
    "\1\0\1\42\1\0\1\42\1\0\1\42\1\0\1\42"+
    "\1\121\164\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\275\0\u013b\0\u017a"+
    "\0\275\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333"+
    "\0\275\0\275\0\u0372\0\u03b1\0\u03f0\0\u042f\0\275\0\275"+
    "\0\275\0\275\0\u046e\0\u04ad\0\u04ec\0\u052b\0\275\0\275"+
    "\0\275\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\275\0\275\0\u0723\0\u0762\0\u07a1\0\u07e0\0\275\0\u081f"+
    "\0\u085e\0\275\0\u01b9\0\u089d\0\275\0\u08dc\0\u091b\0\275"+
    "\0\275\0\u095a\0\u0999\0\275\0\275\0\275\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\275\0\275\0\u0b13\0\275\0\u0b52"+
    "\0\275\0\275\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\275\0\275\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\275\0\275\0\u06a5\0\u0b91\0\275\0\u0bd0\0\u0c0f\0\u0c4e"+
    "\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46"+
    "\0\u0e85\0\u0ec4\0\u0f03\0\u0e46\0\u0f42\0\u0f81\0\u0fc0\0\275"+
    "\0\u0fff\0\275\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\275\0\275\0\u103e\0\u0dc8\0\u107d\0\u10bc\0\u107d\0\u10fb"+
    "\0\u107d\0\275\0\u113a\0\u1179\0\u113a\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\275\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997"+
    "\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f"+
    "\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87"+
    "\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f"+
    "\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\275";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\4\1\15\1\16\2\14\1\17\1\14"+
    "\1\20\1\21\1\22\1\4\1\23\2\14\1\24\3\14"+
    "\1\25\3\14\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\7\16\1\14\1\4\1\14\1\4"+
    "\1\6\1\4\1\47\1\50\1\51\20\47\1\52\1\47"+
    "\1\53\44\47\1\54\4\47\1\55\1\56\1\57\21\55"+
    "\1\4\1\60\51\55\101\0\1\6\101\0\1\61\137\0"+
    "\1\62\30\0\10\63\1\6\66\63\11\0\1\64\34\0"+
    "\1\65\42\0\6\66\1\0\1\66\4\0\14\66\20\0"+
    "\10\66\1\0\1\66\2\0\1\66\14\0\2\67\1\70"+
    "\1\71\1\72\1\73\6\0\1\74\3\0\1\73\1\71"+
    "\1\0\1\70\22\0\7\67\1\74\21\0\2\16\1\70"+
    "\1\71\1\72\1\73\6\0\1\74\3\0\1\73\1\71"+
    "\1\0\1\70\22\0\7\16\1\74\21\0\2\72\44\0"+
    "\7\72\30\0\1\75\23\0\1\76\13\0\1\77\26\0"+
    "\6\66\1\0\1\66\4\0\1\66\1\100\12\66\20\0"+
    "\10\66\1\0\1\66\2\0\1\66\12\0\6\66\1\0"+
    "\1\66\4\0\4\66\1\101\7\66\20\0\10\66\1\0"+
    "\1\66\2\0\1\66\12\0\6\66\1\0\1\66\4\0"+
    "\10\66\1\102\3\66\20\0\10\66\1\0\1\66\2\0"+
    "\1\66\12\0\6\66\1\0\1\66\4\0\5\66\1\103"+
    "\6\66\20\0\10\66\1\0\1\66\2\0\1\66\46\0"+
    "\1\104\76\0\1\105\1\106\75\0\1\107\1\0\1\110"+
    "\74\0\1\111\76\0\1\112\6\0\1\113\67\0\1\114"+
    "\7\0\1\115\66\0\1\116\10\0\1\117\65\0\1\120"+
    "\76\0\1\121\30\0\1\47\2\0\20\47\1\0\1\47"+
    "\1\0\51\47\2\0\1\51\74\0\1\122\2\0\20\122"+
    "\1\123\1\124\1\125\3\122\1\126\1\127\2\122\1\130"+
    "\3\122\1\131\31\122\1\132\3\0\1\47\2\0\11\47"+
    "\1\133\1\134\5\47\1\0\1\47\1\0\34\47\7\134"+
    "\6\47\24\0\1\135\54\0\1\57\74\0\1\122\2\0"+
    "\20\122\1\136\1\137\1\140\3\122\1\141\1\142\2\122"+
    "\1\143\3\122\1\144\31\122\1\145\3\0\5\146\1\147"+
    "\71\146\1\64\1\5\1\6\74\64\12\0\6\150\1\0"+
    "\1\150\4\0\14\150\20\0\10\150\1\0\1\150\2\0"+
    "\1\150\14\0\2\67\1\0\1\71\1\72\1\73\6\0"+
    "\1\74\3\0\1\73\1\71\24\0\7\67\1\74\21\0"+
    "\2\72\1\0\1\71\1\0\1\73\6\0\1\74\3\0"+
    "\1\73\1\71\24\0\7\72\1\74\21\0\2\151\4\0"+
    "\1\152\34\0\1\152\2\0\7\151\71\0\1\153\25\0"+
    "\6\150\1\0\1\150\4\0\2\150\1\154\11\150\20\0"+
    "\10\150\1\0\1\150\2\0\1\150\12\0\6\150\1\0"+
    "\1\150\4\0\5\150\1\155\6\150\20\0\10\150\1\0"+
    "\1\150\2\0\1\150\12\0\6\150\1\0\1\150\4\0"+
    "\11\150\1\156\2\150\20\0\10\150\1\0\1\150\2\0"+
    "\1\150\12\0\6\150\1\0\1\150\4\0\11\150\1\157"+
    "\2\150\20\0\10\150\1\0\1\150\2\0\1\150\46\0"+
    "\1\160\1\161\75\0\1\162\30\0\1\47\2\0\11\47"+
    "\2\134\5\47\1\0\1\47\1\0\34\47\7\134\6\47"+
    "\24\0\1\163\76\0\1\164\76\0\1\165\76\0\1\166"+
    "\76\0\1\167\76\0\1\170\76\0\1\171\76\0\1\172"+
    "\52\0\5\146\1\173\75\146\1\0\1\147\1\174\70\146"+
    "\12\0\6\175\1\0\1\175\4\0\14\175\20\0\10\175"+
    "\1\0\1\175\2\0\1\175\14\0\2\151\1\0\1\71"+
    "\10\0\1\74\4\0\1\71\24\0\7\151\1\74\21\0"+
    "\2\151\44\0\7\151\72\0\1\176\24\0\6\175\1\0"+
    "\1\175\4\0\6\175\1\177\5\175\20\0\10\175\1\0"+
    "\1\175\2\0\1\175\12\0\6\175\1\0\1\175\4\0"+
    "\12\175\1\200\1\175\20\0\10\175\1\0\1\175\2\0"+
    "\1\175\12\0\6\175\1\0\1\175\4\0\11\175\1\201"+
    "\2\175\20\0\10\175\1\0\1\175\2\0\1\175\46\0"+
    "\1\202\30\0\5\146\1\173\1\6\70\146\12\0\6\203"+
    "\1\0\1\203\4\0\14\203\20\0\10\203\1\0\1\203"+
    "\2\0\1\203\65\0\1\204\23\0\6\203\1\0\1\203"+
    "\4\0\6\203\1\205\5\203\20\0\10\203\1\0\1\203"+
    "\2\0\1\203\12\0\6\206\1\0\1\206\4\0\14\206"+
    "\20\0\10\206\1\0\1\206\2\0\1\206\64\0\1\207"+
    "\24\0\6\210\1\0\1\210\4\0\14\210\20\0\10\210"+
    "\1\0\1\210\2\0\1\210\66\0\1\211\22\0\6\212"+
    "\1\0\1\212\4\0\14\212\20\0\10\212\1\0\1\212"+
    "\2\0\1\212\67\0\1\213\21\0\6\214\1\0\1\214"+
    "\4\0\14\214\20\0\10\214\1\0\1\214\2\0\1\214"+
    "\70\0\1\215\20\0\6\216\1\0\1\216\4\0\14\216"+
    "\20\0\10\216\1\0\1\216\2\0\1\216\64\0\1\217"+
    "\24\0\6\220\1\0\1\220\4\0\14\220\20\0\10\220"+
    "\1\0\1\220\2\0\1\220\66\0\1\221\22\0\6\222"+
    "\1\0\1\222\4\0\14\222\20\0\10\222\1\0\1\222"+
    "\2\0\1\222\12\0\6\223\1\0\1\223\4\0\14\223"+
    "\20\0\10\223\1\0\1\223\2\0\1\223\12\0\6\224"+
    "\1\0\1\224\4\0\14\224\20\0\10\224\1\0\1\224"+
    "\2\0\1\224\12\0\6\225\1\0\1\225\4\0\14\225"+
    "\20\0\10\225\1\0\1\225\2\0\1\225\12\0\6\226"+
    "\1\0\1\226\4\0\14\226\20\0\10\226\1\0\1\226"+
    "\2\0\1\226\12\0\6\227\1\0\1\227\4\0\14\227"+
    "\20\0\10\227\1\0\1\227\2\0\1\227\12\0\6\230"+
    "\1\0\1\230\4\0\14\230\20\0\10\230\1\0\1\230"+
    "\2\0\1\230\12\0\6\231\1\0\1\231\4\0\14\231"+
    "\20\0\10\231\1\0\1\231\2\0\1\231\12\0\6\232"+
    "\1\0\1\232\4\0\14\232\20\0\10\232\1\0\1\232"+
    "\2\0\1\232\12\0\6\233\1\0\1\233\4\0\14\233"+
    "\20\0\10\233\1\0\1\233\2\0\1\233\12\0\6\234"+
    "\1\0\1\234\4\0\14\234\20\0\10\234\1\0\1\234"+
    "\2\0\1\234\12\0\6\235\1\0\1\235\4\0\14\235"+
    "\20\0\10\235\1\0\1\235\2\0\1\235\12\0\6\236"+
    "\1\0\1\236\4\0\14\236\20\0\10\236\1\0\1\236"+
    "\2\0\1\236\12\0\6\237\1\0\1\237\4\0\14\237"+
    "\20\0\10\237\1\0\1\237\2\0\1\237\12\0\6\240"+
    "\1\0\1\240\4\0\14\240\20\0\10\240\1\0\1\240"+
    "\2\0\1\240\12\0\6\241\1\0\1\241\4\0\14\241"+
    "\20\0\10\241\1\0\1\241\2\0\1\241\12\0\6\242"+
    "\1\0\1\242\4\0\14\242\20\0\10\242\1\0\1\242"+
    "\2\0\1\242\12\0\6\243\1\0\1\243\4\0\14\243"+
    "\20\0\10\243\1\0\1\243\2\0\1\243\12\0\6\244"+
    "\1\0\1\244\4\0\14\244\20\0\10\244\1\0\1\244"+
    "\2\0\1\244\12\0\6\245\1\0\1\245\4\0\14\245"+
    "\20\0\10\245\1\0\1\245\2\0\1\245\12\0\6\246"+
    "\1\0\1\246\4\0\14\246\20\0\10\246\1\0\1\246"+
    "\2\0\1\246\12\0\6\247\1\0\1\247\4\0\14\247"+
    "\20\0\10\247\1\0\1\247\2\0\1\247\12\0\6\250"+
    "\1\0\1\250\4\0\14\250\20\0\10\250\1\0\1\250"+
    "\2\0\1\250\12\0\6\251\1\0\1\251\4\0\14\251"+
    "\20\0\10\251\1\0\1\251\2\0\1\251\12\0\6\252"+
    "\1\0\1\252\4\0\14\252\20\0\10\252\1\0\1\252"+
    "\2\0\1\252\12\0\6\253\1\0\1\253\4\0\14\253"+
    "\20\0\10\253\1\0\1\253\2\0\1\253\12\0\6\254"+
    "\1\0\1\254\4\0\14\254\20\0\10\254\1\0\1\254"+
    "\2\0\1\254\12\0\6\255\1\0\1\255\4\0\14\255"+
    "\20\0\10\255\1\0\1\255\2\0\1\255\12\0\6\256"+
    "\1\0\1\256\4\0\14\256\20\0\10\256\1\0\1\256"+
    "\2\0\1\256\12\0\6\257\1\0\1\257\4\0\14\257"+
    "\20\0\10\257\1\0\1\257\2\0\1\257\12\0\6\260"+
    "\1\0\1\260\4\0\14\260\20\0\10\260\1\0\1\260"+
    "\2\0\1\260\12\0\6\261\1\0\1\261\4\0\14\261"+
    "\20\0\10\261\1\0\1\261\2\0\1\261\12\0\6\262"+
    "\1\0\1\262\4\0\14\262\20\0\10\262\1\0\1\262"+
    "\2\0\1\262\12\0\6\263\1\0\1\263\4\0\14\263"+
    "\20\0\10\263\1\0\1\263\2\0\1\263\12\0\6\264"+
    "\1\0\1\264\4\0\14\264\20\0\10\264\1\0\1\264"+
    "\2\0\1\264\12\0\6\265\1\0\1\265\4\0\14\265"+
    "\20\0\10\265\1\0\1\265\2\0\1\265\12\0\6\266"+
    "\1\0\1\266\4\0\14\266\20\0\10\266\1\0\1\266"+
    "\2\0\1\266\12\0\6\267\1\0\1\267\4\0\14\267"+
    "\20\0\10\267\1\0\1\267\2\0\1\267\12\0\6\270"+
    "\1\0\1\270\4\0\14\270\20\0\10\270\1\0\1\270"+
    "\2\0\1\270\12\0\6\271\1\0\1\271\4\0\14\271"+
    "\20\0\10\271\1\0\1\271\2\0\1\271\12\0\6\272"+
    "\1\0\1\272\4\0\14\272\20\0\10\272\1\0\1\272"+
    "\2\0\1\272\12\0\6\273\1\0\1\273\4\0\14\273"+
    "\20\0\10\273\1\0\1\273\2\0\1\273\12\0\6\274"+
    "\1\0\1\274\4\0\14\274\20\0\10\274\1\0\1\274"+
    "\2\0\1\274\12\0\6\275\1\0\1\275\4\0\14\275"+
    "\20\0\10\275\1\0\1\275\2\0\1\275\12\0\6\276"+
    "\1\0\1\276\4\0\14\276\20\0\10\276\1\0\1\276"+
    "\2\0\1\276\12\0\6\277\1\0\1\277\4\0\14\277"+
    "\20\0\10\277\1\0\1\277\2\0\1\277\12\0\6\300"+
    "\1\0\1\300\4\0\14\300\20\0\10\300\1\0\1\300"+
    "\2\0\1\300\12\0\6\301\1\0\1\301\4\0\14\301"+
    "\20\0\10\301\1\0\1\301\2\0\1\301\12\0\6\302"+
    "\1\0\1\302\4\0\14\302\20\0\10\302\1\0\1\302"+
    "\2\0\1\302\12\0\6\303\1\0\1\303\4\0\14\303"+
    "\20\0\10\303\1\0\1\303\2\0\1\303\12\0\6\304"+
    "\1\0\1\304\4\0\14\304\20\0\10\304\1\0\1\304"+
    "\2\0\1\304\12\0\6\305\1\0\1\305\4\0\14\305"+
    "\20\0\10\305\1\0\1\305\2\0\1\305\12\0\6\306"+
    "\1\0\1\306\4\0\14\306\20\0\10\306\1\0\1\306"+
    "\2\0\1\306\12\0\6\307\1\0\1\307\4\0\14\307"+
    "\20\0\10\307\1\0\1\307\2\0\1\307\12\0\6\310"+
    "\1\0\1\310\4\0\14\310\20\0\10\310\1\0\1\310"+
    "\2\0\1\310\12\0\6\311\1\0\1\311\4\0\14\311"+
    "\20\0\10\311\1\0\1\311\2\0\1\311\12\0\6\312"+
    "\1\0\1\312\4\0\14\312\20\0\10\312\1\0\1\312"+
    "\2\0\1\312\12\0\6\313\1\0\1\313\4\0\14\313"+
    "\20\0\10\313\1\0\1\313\2\0\1\313\12\0\6\314"+
    "\1\0\1\314\4\0\14\314\20\0\10\314\1\0\1\314"+
    "\2\0\1\314\12\0\6\315\1\0\1\315\4\0\14\315"+
    "\20\0\10\315\1\0\1\315\2\0\1\315\12\0\6\316"+
    "\1\0\1\316\4\0\14\316\20\0\10\316\1\0\1\316"+
    "\2\0\1\316\12\0\6\317\1\0\1\317\4\0\14\317"+
    "\20\0\10\317\1\0\1\317\2\0\1\317\12\0\6\320"+
    "\1\0\1\320\4\0\14\320\20\0\10\320\1\0\1\320"+
    "\2\0\1\320\12\0\6\321\1\0\1\321\4\0\14\321"+
    "\20\0\10\321\1\0\1\321\2\0\1\321\12\0\6\322"+
    "\1\0\1\322\4\0\14\322\20\0\10\322\1\0\1\322"+
    "\2\0\1\322\12\0\6\323\1\0\1\323\4\0\14\323"+
    "\20\0\10\323\1\0\1\323\2\0\1\323\12\0\6\324"+
    "\1\0\1\324\4\0\14\324\20\0\10\324\1\0\1\324"+
    "\2\0\1\324\12\0\6\325\1\0\1\325\4\0\14\325"+
    "\20\0\10\325\1\0\1\325\2\0\1\325\12\0\6\326"+
    "\1\0\1\326\4\0\14\326\20\0\10\326\1\0\1\326"+
    "\2\0\1\326\12\0\6\327\1\0\1\327\4\0\14\327"+
    "\20\0\10\327\1\0\1\327\2\0\1\327\12\0\6\330"+
    "\1\0\1\330\4\0\14\330\20\0\10\330\1\0\1\330"+
    "\2\0\1\330\12\0\6\331\1\0\1\331\4\0\14\331"+
    "\20\0\10\331\1\0\1\331\2\0\1\331\12\0\6\332"+
    "\1\0\1\332\4\0\14\332\20\0\10\332\1\0\1\332"+
    "\2\0\1\332\12\0\6\333\1\0\1\333\4\0\14\333"+
    "\20\0\10\333\1\0\1\333\2\0\1\333\12\0\6\334"+
    "\1\0\1\334\4\0\14\334\20\0\10\334\1\0\1\334"+
    "\2\0\1\334\12\0\6\335\1\0\1\335\4\0\14\335"+
    "\20\0\10\335\1\0\1\335\2\0\1\335\12\0\6\336"+
    "\1\0\1\336\4\0\14\336\20\0\10\336\1\0\1\336"+
    "\2\0\1\336\12\0\6\337\1\0\1\337\4\0\14\337"+
    "\20\0\10\337\1\0\1\337\2\0\1\337\12\0\6\340"+
    "\1\0\1\340\4\0\14\340\20\0\10\340\1\0\1\340"+
    "\2\0\1\340\12\0\6\341\1\0\1\341\4\0\14\341"+
    "\20\0\10\341\1\0\1\341\2\0\1\341\12\0\6\342"+
    "\1\0\1\342\4\0\14\342\20\0\10\342\1\0\1\342"+
    "\2\0\1\342\12\0\6\343\1\0\1\343\4\0\14\343"+
    "\20\0\10\343\1\0\1\343\2\0\1\343\12\0\6\344"+
    "\1\0\1\344\4\0\14\344\20\0\10\344\1\0\1\344"+
    "\2\0\1\344\12\0\6\345\1\0\1\345\4\0\14\345"+
    "\20\0\10\345\1\0\1\345\2\0\1\345\12\0\6\346"+
    "\1\0\1\346\4\0\14\346\20\0\10\346\1\0\1\346"+
    "\2\0\1\346\12\0\6\347\1\0\1\347\4\0\14\347"+
    "\20\0\10\347\1\0\1\347\2\0\1\347\12\0\6\350"+
    "\1\0\1\350\4\0\14\350\20\0\10\350\1\0\1\350"+
    "\2\0\1\350\12\0\6\351\1\0\1\351\4\0\14\351"+
    "\20\0\10\351\1\0\1\351\2\0\1\351\12\0\6\352"+
    "\1\0\1\352\4\0\14\352\20\0\10\352\1\0\1\352"+
    "\2\0\1\352\12\0\6\353\1\0\1\353\4\0\14\353"+
    "\20\0\10\353\1\0\1\353\2\0\1\353\12\0\6\354"+
    "\1\0\1\354\4\0\14\354\20\0\10\354\1\0\1\354"+
    "\2\0\1\354\12\0\6\355\1\0\1\355\4\0\14\355"+
    "\20\0\10\355\1\0\1\355\2\0\1\355\12\0\6\356"+
    "\1\0\1\356\4\0\14\356\20\0\10\356\1\0\1\356"+
    "\2\0\1\356\12\0\6\357\1\0\1\357\4\0\14\357"+
    "\20\0\10\357\1\0\1\357\2\0\1\357\12\0\6\360"+
    "\1\0\1\360\4\0\14\360\20\0\10\360\1\0\1\360"+
    "\2\0\1\360\12\0\6\361\1\0\1\361\4\0\14\361"+
    "\20\0\10\361\1\0\1\361\2\0\1\361\12\0\6\362"+
    "\1\0\1\362\4\0\14\362\20\0\10\362\1\0\1\362"+
    "\2\0\1\362\12\0\6\363\1\0\1\363\4\0\14\363"+
    "\20\0\10\363\1\0\1\363\2\0\1\363\12\0\6\364"+
    "\1\0\1\364\4\0\14\364\20\0\10\364\1\0\1\364"+
    "\2\0\1\364\12\0\6\365\1\0\1\365\4\0\14\365"+
    "\20\0\10\365\1\0\1\365\2\0\1\365\12\0\6\366"+
    "\1\0\1\366\4\0\14\366\20\0\10\366\1\0\1\366"+
    "\2\0\1\366\12\0\6\367\1\0\1\367\4\0\14\367"+
    "\20\0\10\367\1\0\1\367\2\0\1\367\12\0\6\370"+
    "\1\0\1\370\4\0\14\370\20\0\10\370\1\0\1\370"+
    "\2\0\1\370\12\0\6\371\1\0\1\371\4\0\14\371"+
    "\20\0\10\371\1\0\1\371\2\0\1\371\12\0\6\372"+
    "\1\0\1\372\4\0\14\372\20\0\10\372\1\0\1\372"+
    "\2\0\1\372\12\0\6\373\1\0\1\373\4\0\14\373"+
    "\20\0\10\373\1\0\1\373\2\0\1\373\12\0\6\374"+
    "\1\0\1\374\4\0\14\374\20\0\10\374\1\0\1\374"+
    "\2\0\1\374\12\0\6\375\1\0\1\375\4\0\14\375"+
    "\20\0\10\375\1\0\1\375\2\0\1\375\12\0\6\376"+
    "\1\0\1\376\4\0\14\376\20\0\10\376\1\0\1\376"+
    "\2\0\1\376\12\0\6\377\1\0\1\377\4\0\14\377"+
    "\20\0\10\377\1\0\1\377\2\0\1\377\12\0\6\u0100"+
    "\1\0\1\u0100\4\0\14\u0100\20\0\10\u0100\1\0\1\u0100"+
    "\2\0\1\u0100\12\0\6\u0101\1\0\1\u0101\4\0\14\u0101"+
    "\20\0\10\u0101\1\0\1\u0101\2\0\1\u0101\12\0\6\u0102"+
    "\1\0\1\u0102\4\0\14\u0102\20\0\10\u0102\1\0\1\u0102"+
    "\2\0\1\u0102\12\0\6\u0103\1\0\1\u0103\4\0\14\u0103"+
    "\20\0\10\u0103\1\0\1\u0103\2\0\1\u0103\12\0\6\u0104"+
    "\1\0\1\u0104\4\0\14\u0104\20\0\10\u0104\1\0\1\u0104"+
    "\2\0\1\u0104\12\0\6\u0105\1\0\1\u0105\4\0\14\u0105"+
    "\20\0\10\u0105\1\0\1\u0105\2\0\1\u0105";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12474];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\7\1\2\11"+
    "\4\1\4\11\4\1\3\11\7\1\2\11\4\1\1\11"+
    "\1\1\1\0\1\11\1\0\1\1\1\11\2\1\2\11"+
    "\1\1\1\0\3\11\1\0\4\1\2\11\1\1\1\11"+
    "\1\1\22\11\2\1\1\11\10\1\2\0\2\1\2\0"+
    "\4\1\1\11\1\1\11\11\1\0\2\1\1\0\3\1"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\163\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new PclSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new PclSymbol(type, yyline+1, yycolumn+1, value);
  }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2876) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 82: break;
          case 2: 
            { /* ignore */
            }
          case 83: break;
          case 3: 
            { return symbol(LPAREN);
            }
          case 84: break;
          case 4: 
            { return symbol(MULT);
            }
          case 85: break;
          case 5: 
            { return symbol(RPAREN);
            }
          case 86: break;
          case 6: 
            { return symbol(DIV);
            }
          case 87: break;
          case 7: 
            { return symbol(INTEGER_LITERAL, new Integer(yytext()));
            }
          case 88: break;
          case 8: 
            { return symbol(DOT);
            }
          case 89: break;
          case 9: 
            { return symbol(MINUS);
            }
          case 90: break;
          case 10: 
            { yybegin(STRING); string.setLength(0);
            }
          case 91: break;
          case 11: 
            { yybegin(CHARLITERAL);
            }
          case 92: break;
          case 12: 
            { return symbol(LBRACK);
            }
          case 93: break;
          case 13: 
            { return symbol(RBRACK);
            }
          case 94: break;
          case 14: 
            { return symbol(SEMICOLON);
            }
          case 95: break;
          case 15: 
            { return symbol(COMMA);
            }
          case 96: break;
          case 16: 
            { return symbol(EQ);
            }
          case 97: break;
          case 17: 
            { return symbol(GT);
            }
          case 98: break;
          case 18: 
            { return symbol(LT);
            }
          case 99: break;
          case 19: 
            { return symbol(NOT);
            }
          case 100: break;
          case 20: 
            { return symbol(COMP);
            }
          case 101: break;
          case 21: 
            { return symbol(QUESTION);
            }
          case 102: break;
          case 22: 
            { return symbol(COLON);
            }
          case 103: break;
          case 23: 
            { return symbol(AND);
            }
          case 104: break;
          case 24: 
            { return symbol(OR);
            }
          case 105: break;
          case 25: 
            { return symbol(PLUS);
            }
          case 106: break;
          case 26: 
            { return symbol(XOR);
            }
          case 107: break;
          case 27: 
            { return symbol(MOD);
            }
          case 108: break;
          case 28: 
            { string.append( yytext() );
            }
          case 109: break;
          case 29: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 110: break;
          case 30: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          case 111: break;
          case 31: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 112: break;
          case 32: 
            { return symbol(MULTEQ);
            }
          case 113: break;
          case 33: 
            { return symbol(DIVEQ);
            }
          case 114: break;
          case 34: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 115: break;
          case 35: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 116: break;
          case 36: 
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 117: break;
          case 37: 
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 118: break;
          case 38: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 119: break;
          case 39: 
            { return symbol(MINUSMINUS);
            }
          case 120: break;
          case 40: 
            { return symbol(MINUSEQ);
            }
          case 121: break;
          case 41: 
            { return symbol(EQEQ);
            }
          case 122: break;
          case 42: 
            { return symbol(GTEQ);
            }
          case 123: break;
          case 43: 
            { return symbol(RSHIFT);
            }
          case 124: break;
          case 44: 
            { return symbol(LTEQ);
            }
          case 125: break;
          case 45: 
            { return symbol(LSHIFT);
            }
          case 126: break;
          case 46: 
            { return symbol(NOTEQ);
            }
          case 127: break;
          case 47: 
            { return symbol(ANDEQ);
            }
          case 128: break;
          case 48: 
            { return symbol(ANDAND);
            }
          case 129: break;
          case 49: 
            { return symbol(OREQ);
            }
          case 130: break;
          case 50: 
            { return symbol(OROR);
            }
          case 131: break;
          case 51: 
            { return symbol(PLUSEQ);
            }
          case 132: break;
          case 52: 
            { return symbol(PLUSPLUS);
            }
          case 133: break;
          case 53: 
            { return symbol(XOREQ);
            }
          case 134: break;
          case 54: 
            { return symbol(MODEQ);
            }
          case 135: break;
          case 55: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 136: break;
          case 56: 
            { string.append( '\"' );
            }
          case 137: break;
          case 57: 
            { string.append( '\'' );
            }
          case 138: break;
          case 58: 
            { string.append( '\\' );
            }
          case 139: break;
          case 59: 
            { string.append( '\t' );
            }
          case 140: break;
          case 60: 
            { string.append( '\r' );
            }
          case 141: break;
          case 61: 
            { string.append( '\f' );
            }
          case 142: break;
          case 62: 
            { string.append( '\n' );
            }
          case 143: break;
          case 63: 
            { string.append( '\b' );
            }
          case 144: break;
          case 64: 
            { string.append( (char)Integer.parseInt(yytext().substring(1)) );
            }
          case 145: break;
          case 65: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 146: break;
          case 66: 
            { return symbol(RSHIFTEQ);
            }
          case 147: break;
          case 67: 
            { return symbol(URSHIFT);
            }
          case 148: break;
          case 68: 
            { return symbol(LSHIFTEQ);
            }
          case 149: break;
          case 69: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          case 150: break;
          case 70: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          case 151: break;
          case 71: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          case 152: break;
          case 72: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          case 153: break;
          case 73: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
            }
          case 154: break;
          case 74: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
            }
          case 155: break;
          case 75: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
            }
          case 156: break;
          case 76: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          case 157: break;
          case 77: 
            { return symbol(BOOLEAN_LITERAL, true);
            }
          case 158: break;
          case 78: 
            { return symbol(NULL_LITERAL);
            }
          case 159: break;
          case 79: 
            { return symbol(URSHIFTEQ);
            }
          case 160: break;
          case 80: 
            { return symbol(BOOLEAN_LITERAL, false);
            }
          case 161: break;
          case 81: 
            { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
            }
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
