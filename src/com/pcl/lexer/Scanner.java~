/* The following code was generated by JFlex 1.6.1 */

package com.pcl.lexer;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/kevinah95/IdeaProjects/pcl-compiler/src/com/pcl/lexer/pcl.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\4\1\2\1\3\1\3\1\1\16\14\4\0\1\4\1\0"+
    "\1\25\1\65\1\13\2\0\1\26\1\11\1\6\1\5\1\60\1\57"+
    "\1\24\1\22\1\10\1\16\1\67\1\66\1\73\1\70\1\17\1\74"+
    "\1\71\1\72\1\17\1\64\1\57\1\63\1\62\1\61\2\0\1\30"+
    "\1\33\1\43\1\46\1\34\1\50\1\35\1\45\1\36\1\13\1\53"+
    "\1\41\1\54\1\37\1\40\1\52\1\13\1\31\1\44\1\42\1\51"+
    "\1\55\1\47\1\56\1\32\1\13\1\57\1\27\1\57\1\0\1\13"+
    "\1\0\1\13\1\76\1\13\1\75\1\23\1\21\5\13\1\20\7\13"+
    "\1\77\6\13\1\12\1\0\1\7\1\0\6\14\1\15\32\14\2\0"+
    "\4\13\4\0\1\13\2\0\1\14\7\0\1\13\4\0\1\13\5\0"+
    "\27\13\1\0\37\13\1\0\u01ca\13\4\0\14\13\16\0\5\13\7\0"+
    "\1\13\1\0\1\13\21\0\160\14\5\13\1\0\2\13\2\0\4\13"+
    "\10\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13\1\0\123\13"+
    "\1\0\213\13\1\0\5\14\2\0\236\13\11\0\46\13\2\0\1\13"+
    "\7\0\47\13\7\0\1\13\1\0\55\14\1\0\1\14\1\0\2\14"+
    "\1\0\2\14\1\0\1\14\10\0\33\13\5\0\3\13\15\0\5\14"+
    "\6\0\1\13\4\0\13\14\5\0\53\13\37\14\4\0\2\13\1\14"+
    "\143\13\1\0\1\13\10\14\1\0\6\14\2\13\2\14\1\0\4\14"+
    "\2\13\12\14\3\13\2\0\1\13\17\0\1\14\1\13\1\14\36\13"+
    "\33\14\2\0\131\13\13\14\1\13\16\0\12\14\41\13\11\14\2\13"+
    "\4\0\1\13\5\0\26\13\4\14\1\13\11\14\1\13\3\14\1\13"+
    "\5\14\22\0\31\13\3\14\104\0\1\13\1\0\13\13\67\0\33\14"+
    "\1\0\4\14\66\13\3\14\1\13\22\14\1\13\7\14\12\13\2\14"+
    "\2\0\12\14\1\0\7\13\1\0\7\13\1\0\3\14\1\0\10\13"+
    "\2\0\2\13\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13"+
    "\2\0\1\14\1\13\7\14\2\0\2\14\2\0\3\14\1\13\10\0"+
    "\1\14\4\0\2\13\1\0\3\13\2\14\2\0\12\14\4\13\7\0"+
    "\1\13\5\0\3\14\1\0\6\13\4\0\2\13\2\0\26\13\1\0"+
    "\7\13\1\0\2\13\1\0\2\13\1\0\2\13\2\0\1\14\1\0"+
    "\5\14\4\0\2\14\2\0\3\14\3\0\1\14\7\0\4\13\1\0"+
    "\1\13\7\0\14\14\3\13\1\14\13\0\3\14\1\0\11\13\1\0"+
    "\3\13\1\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0"+
    "\1\14\1\13\10\14\1\0\3\14\1\0\3\14\2\0\1\13\17\0"+
    "\2\13\2\14\2\0\12\14\1\0\1\13\17\0\3\14\1\0\10\13"+
    "\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13"+
    "\2\0\1\14\1\13\7\14\2\0\2\14\2\0\3\14\10\0\2\14"+
    "\4\0\2\13\1\0\3\13\2\14\2\0\12\14\1\0\1\13\20\0"+
    "\1\14\1\13\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13"+
    "\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0\14\13"+
    "\4\0\5\14\3\0\3\14\1\0\4\14\2\0\1\13\6\0\1\14"+
    "\16\0\12\14\11\0\1\13\7\0\3\14\1\0\10\13\1\0\3\13"+
    "\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13\7\14\1\0"+
    "\3\14\1\0\4\14\7\0\2\14\1\0\2\13\6\0\2\13\2\14"+
    "\2\0\12\14\22\0\2\14\1\0\10\13\1\0\3\13\1\0\27\13"+
    "\1\0\12\13\1\0\5\13\2\0\1\14\1\13\7\14\1\0\3\14"+
    "\1\0\4\14\7\0\2\14\7\0\1\13\1\0\2\13\2\14\2\0"+
    "\12\14\1\0\2\13\17\0\2\14\1\0\10\13\1\0\3\13\1\0"+
    "\51\13\2\0\1\13\7\14\1\0\3\14\1\0\4\14\1\13\10\0"+
    "\1\14\10\0\2\13\2\14\2\0\12\14\12\0\6\13\2\0\2\14"+
    "\1\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0\7\13"+
    "\3\0\1\14\4\0\6\14\1\0\1\14\1\0\10\14\22\0\2\14"+
    "\15\0\60\13\1\14\2\13\7\14\4\0\10\13\10\14\1\0\12\14"+
    "\47\0\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13"+
    "\6\0\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13"+
    "\2\0\2\13\1\0\4\13\1\14\2\13\6\14\1\0\2\14\1\13"+
    "\2\0\5\13\1\0\1\13\1\0\6\14\2\0\12\14\2\0\4\13"+
    "\40\0\1\13\27\0\2\14\6\0\12\14\13\0\1\14\1\0\1\14"+
    "\1\0\1\14\4\0\2\14\10\13\1\0\44\13\4\0\24\14\1\0"+
    "\2\14\5\13\13\14\1\0\44\14\11\0\1\14\71\0\53\13\24\14"+
    "\1\13\12\14\6\0\6\13\4\14\4\13\3\14\1\13\3\14\2\13"+
    "\7\14\3\13\4\14\15\13\14\14\1\13\17\14\2\0\46\13\1\0"+
    "\1\13\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0"+
    "\7\13\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13\2\0"+
    "\41\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0"+
    "\17\13\1\0\71\13\1\0\4\13\2\0\103\13\2\0\3\14\40\0"+
    "\20\13\20\0\125\13\14\0\u026c\13\2\0\21\13\1\0\32\13\5\0"+
    "\113\13\3\0\3\13\17\0\15\13\1\0\4\13\3\14\13\0\22\13"+
    "\3\14\13\0\22\13\2\14\14\0\15\13\1\0\3\13\1\0\2\14"+
    "\14\0\64\13\40\14\3\0\1\13\3\0\2\13\1\14\2\0\12\14"+
    "\41\0\3\14\2\0\12\14\6\0\130\13\10\0\51\13\1\14\1\13"+
    "\5\0\106\13\12\0\35\13\3\0\14\14\4\0\14\14\12\0\12\14"+
    "\36\13\2\0\5\13\13\0\54\13\4\0\21\14\7\13\2\14\6\0"+
    "\12\14\46\0\27\13\5\14\4\0\65\13\12\14\1\0\35\14\2\0"+
    "\13\14\6\0\12\14\15\0\1\13\130\0\5\14\57\13\21\14\7\13"+
    "\4\0\12\14\21\0\11\14\14\0\3\14\36\13\15\14\2\13\12\14"+
    "\54\13\16\14\14\0\44\13\24\14\10\0\12\14\3\0\3\13\12\14"+
    "\44\13\122\0\3\14\1\0\25\14\4\13\1\14\4\13\3\14\2\13"+
    "\11\0\300\13\47\14\25\0\4\14\u0116\13\2\0\6\13\2\0\46\13"+
    "\2\0\6\13\2\0\10\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\37\13\2\0\65\13\1\0\7\13\1\0\1\13\3\0\3\13"+
    "\1\0\7\13\3\0\4\13\2\0\6\13\4\0\15\13\5\0\3\13"+
    "\1\0\7\13\16\0\5\14\30\0\1\3\1\3\5\14\20\0\2\13"+
    "\23\0\1\13\13\0\5\14\5\0\6\14\1\0\1\13\15\0\1\13"+
    "\20\0\15\13\3\0\33\13\25\0\15\14\4\0\1\14\3\0\14\14"+
    "\21\0\1\13\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13"+
    "\6\0\1\13\1\0\1\13\1\0\1\13\1\0\4\13\1\0\13\13"+
    "\2\0\4\13\5\0\5\13\4\0\1\13\21\0\51\13\u0a77\0\57\13"+
    "\1\0\57\13\1\0\205\13\6\0\4\13\3\14\2\13\14\0\46\13"+
    "\1\0\1\13\5\0\1\13\2\0\70\13\7\0\1\13\17\0\1\14"+
    "\27\13\11\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\40\14\57\0"+
    "\1\13\u01d5\0\3\13\31\0\11\13\6\14\1\0\5\13\2\0\5\13"+
    "\4\0\126\13\2\0\2\14\2\0\3\13\1\0\132\13\1\0\4\13"+
    "\5\0\51\13\3\0\136\13\21\0\33\13\65\0\20\13\u0200\0\u19b6\13"+
    "\112\0\u51cd\13\63\0\u048d\13\103\0\56\13\2\0\u010d\13\3\0\20\13"+
    "\12\14\2\13\24\0\57\13\1\14\4\0\12\14\1\0\31\13\7\0"+
    "\1\14\120\13\2\14\45\0\11\13\2\0\147\13\2\0\4\13\1\0"+
    "\4\13\14\0\13\13\115\0\12\13\1\14\3\13\1\14\4\13\1\14"+
    "\27\13\5\14\20\0\1\13\7\0\64\13\14\0\2\14\62\13\21\14"+
    "\13\0\12\14\6\0\22\14\6\13\3\0\1\13\4\0\12\14\34\13"+
    "\10\14\2\0\27\13\15\14\14\0\35\13\3\0\4\14\57\13\16\14"+
    "\16\0\1\13\12\14\46\0\51\13\16\14\11\0\3\13\1\14\10\13"+
    "\2\14\2\0\12\14\6\0\27\13\3\0\1\13\1\14\4\0\60\13"+
    "\1\14\1\13\3\14\2\13\2\14\5\13\2\14\1\13\1\14\1\13"+
    "\30\0\3\13\2\0\13\13\5\14\2\0\3\13\2\14\12\0\6\13"+
    "\2\0\6\13\2\0\6\13\11\0\7\13\1\0\7\13\221\0\43\13"+
    "\10\14\1\0\2\14\2\0\12\14\6\0\u2ba4\13\14\0\27\13\4\0"+
    "\61\13\u2104\0\u016e\13\2\0\152\13\46\0\7\13\14\0\5\13\5\0"+
    "\1\13\1\14\12\13\1\0\15\13\1\0\5\13\1\0\1\13\1\0"+
    "\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0"+
    "\66\13\50\0\15\13\3\0\20\14\20\0\7\14\14\0\2\13\30\0"+
    "\3\13\31\0\1\13\6\0\5\13\1\0\207\13\2\0\1\14\4\0"+
    "\1\13\13\0\12\14\7\0\32\13\4\0\1\13\1\0\32\13\13\0"+
    "\131\13\3\0\6\13\2\0\6\13\2\0\6\13\2\0\3\13\3\0"+
    "\2\13\3\0\2\13\22\0\3\14\4\0\14\13\1\0\32\13\1\0"+
    "\23\13\1\0\2\13\1\0\17\13\2\0\16\13\42\0\173\13\105\0"+
    "\65\13\210\0\1\14\202\0\35\13\3\0\61\13\57\0\37\13\21\0"+
    "\33\13\65\0\36\13\2\0\44\13\4\0\10\13\1\0\5\13\52\0"+
    "\236\13\2\0\12\14\u0356\0\6\13\2\0\1\13\1\0\54\13\1\0"+
    "\2\13\3\0\1\13\2\0\27\13\252\0\26\13\12\0\32\13\106\0"+
    "\70\13\6\0\2\13\100\0\1\13\3\14\1\0\2\14\5\0\4\14"+
    "\4\13\1\0\3\13\1\0\33\13\4\0\3\14\4\0\1\14\40\0"+
    "\35\13\203\0\66\13\12\0\26\13\12\0\23\13\215\0\111\13\u03b7\0"+
    "\3\14\65\13\17\14\37\0\12\14\20\0\3\14\55\13\13\14\2\0"+
    "\1\14\22\0\31\13\7\0\12\14\6\0\3\14\44\13\16\14\1\0"+
    "\12\14\100\0\3\14\60\13\16\14\4\13\13\0\12\14\u04a6\0\53\13"+
    "\15\14\10\0\12\14\u0936\0\u036f\13\221\0\143\13\u0b9d\0\u042f\13\u33d1\0"+
    "\u0239\13\u04c7\0\105\13\13\0\1\13\56\14\20\0\4\14\15\13\u4060\0"+
    "\2\13\u2163\0\5\14\3\0\26\14\2\0\7\14\36\0\4\14\224\0"+
    "\3\14\u01bb\0\125\13\1\0\107\13\1\0\2\13\2\0\1\13\2\0"+
    "\2\13\2\0\4\13\1\0\14\13\1\0\1\13\1\0\7\13\1\0"+
    "\101\13\1\0\4\13\2\0\10\13\1\0\7\13\1\0\34\13\1\0"+
    "\4\13\1\0\5\13\1\0\1\13\3\0\7\13\1\0\u0154\13\2\0"+
    "\31\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13\1\0"+
    "\31\13\1\0\37\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0"+
    "\10\13\2\0\62\14\u1600\0\4\13\1\0\33\13\1\0\2\13\1\0"+
    "\1\13\2\0\1\13\1\0\12\13\1\0\4\13\1\0\1\13\1\0"+
    "\1\13\6\0\1\13\4\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\3\13\1\0\2\13\1\0\1\13\2\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\2\13\1\0\1\13\2\0"+
    "\4\13\1\0\7\13\1\0\4\13\1\0\4\13\1\0\1\13\1\0"+
    "\12\13\1\0\21\13\5\0\3\13\1\0\5\13\1\0\21\13\u1144\0"+
    "\ua6d7\13\51\0\u1035\13\13\0\336\13\u3fe2\0\u021e\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\14\36\0\140\14\200\0\360\14\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\4\4\1\5\1\6\2\7"+
    "\1\4\1\10\1\11\24\6\3\4\1\2\1\12\1\13"+
    "\2\2\3\14\1\2\2\1\1\15\1\1\1\3\1\6"+
    "\1\0\1\16\2\0\11\6\2\17\2\6\1\4\13\6"+
    "\1\17\14\6\2\20\1\12\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\5\22\1\1\1\15\1\0"+
    "\1\1\3\0\1\6\1\31\1\0\1\6\1\4\6\6"+
    "\1\17\16\6\1\17\4\6\1\32\1\33\1\34\1\35"+
    "\1\36\1\15\1\0\1\15\1\6\1\37\1\0\1\40"+
    "\1\0\1\6\1\17\22\6\1\31\2\0\1\17\15\6"+
    "\1\0\1\17\10\6\1\0\1\17\4\6\1\0\1\17"+
    "\2\6\1\0\1\17\1\6\1\0\1\6\1\41\164\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0100\0\u0180"+
    "\0\u0100\0\u01c0\0\u0200\0\u0100\0\u0240\0\u0280\0\u02c0\0\u0300"+
    "\0\u0100\0\u0100\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480"+
    "\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680"+
    "\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880"+
    "\0\u08c0\0\u0900\0\u0940\0\u0100\0\u0980\0\u09c0\0\u0a00\0\u0100"+
    "\0\u09c0\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0"+
    "\0\u0c00\0\u0100\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80"+
    "\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0bc0\0\u0f40"+
    "\0\u0f80\0\u0bc0\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500"+
    "\0\u1540\0\u1580\0\u0100\0\u15c0\0\u1600\0\u0100\0\u0100\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u0b00\0\u1840\0\u17c0"+
    "\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u18c0\0\u19c0\0\u1a00"+
    "\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u18c0\0\u1b40\0\u1b80\0\u1bc0"+
    "\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u2000\0\u2000"+
    "\0\u2040\0\u0100\0\u2080\0\u0100\0\u20c0\0\u2100\0\u2040\0\u2140"+
    "\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340"+
    "\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540"+
    "\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2580\0\u2680\0\u26c0\0\u2700"+
    "\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900"+
    "\0\u2940\0\u2980\0\u29c0\0\u2980\0\u2a00\0\u2a40\0\u2a80\0\u2ac0"+
    "\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2bc0\0\u2c40\0\u2c80"+
    "\0\u2cc0\0\u2d00\0\u2d40\0\u2d00\0\u2d80\0\u2dc0\0\u2e00\0\u2dc0"+
    "\0\u2e40\0\u2e80\0\u2ec0\0\u0100\0\u2f00\0\u2f40\0\u2f80\0\u2fc0"+
    "\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0"+
    "\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0"+
    "\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0"+
    "\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0"+
    "\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0"+
    "\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0"+
    "\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0"+
    "\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0"+
    "\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0"+
    "\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0"+
    "\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0"+
    "\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740\0\u4780\0\u47c0"+
    "\0\u4800\0\u4840\0\u4880\0\u48c0\0\u4900\0\u4940\0\u4980\0\u49c0"+
    "\0\u4a00\0\u4a40\0\u4a80\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u0100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\3\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\1\5\1\7\1\16\1\17\2\15\1\11"+
    "\1\15\1\20\1\21\1\22\1\5\1\23\1\24\1\15"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\15\1\37\1\40\1\41\1\42\1\43"+
    "\1\15\1\44\1\45\1\46\1\11\1\47\1\50\1\11"+
    "\1\51\1\10\1\52\7\17\3\15\25\53\1\54\1\53"+
    "\1\55\50\53\1\56\1\57\1\60\1\61\11\56\1\61"+
    "\10\56\1\5\1\62\50\56\5\4\1\63\1\64\1\65"+
    "\1\4\1\64\1\66\65\4\102\0\1\7\157\0\1\11"+
    "\25\0\1\67\51\0\1\11\22\0\1\14\105\0\7\70"+
    "\1\0\1\70\4\0\27\70\7\0\12\70\16\0\2\71"+
    "\1\72\1\0\1\73\16\0\1\72\24\0\7\71\21\0"+
    "\2\17\1\72\1\0\1\73\16\0\1\72\24\0\7\17"+
    "\27\0\1\11\35\0\1\11\3\0\1\74\24\0\7\70"+
    "\1\0\1\70\4\0\1\70\1\75\5\70\1\76\17\70"+
    "\7\0\12\70\13\0\7\70\1\0\1\70\4\0\4\70"+
    "\1\77\22\70\7\0\12\70\13\0\7\70\1\0\1\70"+
    "\4\0\2\70\1\100\1\70\1\101\3\70\1\102\16\70"+
    "\7\0\12\70\13\0\7\70\1\0\1\70\4\0\7\70"+
    "\1\103\1\70\1\104\15\70\7\0\12\70\13\0\7\70"+
    "\1\0\1\70\4\0\10\70\1\105\16\70\7\0\12\70"+
    "\13\0\7\70\1\0\1\70\4\0\7\70\1\106\10\70"+
    "\1\107\6\70\7\0\12\70\13\0\7\70\1\0\1\70"+
    "\4\0\6\70\1\110\1\70\1\111\16\70\7\0\12\70"+
    "\13\0\7\70\1\0\1\70\4\0\1\70\1\112\16\70"+
    "\1\107\6\70\7\0\12\70\13\0\7\70\1\0\1\70"+
    "\4\0\1\113\7\70\1\114\16\70\7\0\12\70\13\0"+
    "\7\70\1\0\1\70\4\0\1\70\1\115\1\116\5\70"+
    "\1\107\4\70\1\117\11\70\7\0\12\70\13\0\7\70"+
    "\1\0\1\70\4\0\1\104\7\70\1\120\4\70\1\121"+
    "\11\70\7\0\12\70\13\0\7\70\1\0\1\70\4\0"+
    "\4\70\1\122\5\70\1\123\2\70\1\124\11\70\7\0"+
    "\12\70\13\0\7\70\1\0\1\70\4\0\6\70\1\125"+
    "\1\70\1\126\16\70\7\0\12\70\13\0\7\70\1\0"+
    "\1\70\4\0\1\70\1\127\4\70\1\130\6\70\1\131"+
    "\11\70\7\0\12\70\13\0\7\70\1\0\1\70\4\0"+
    "\1\132\5\70\1\133\1\70\1\134\10\70\1\135\5\70"+
    "\7\0\12\70\13\0\7\70\1\0\1\70\4\0\7\70"+
    "\1\136\17\70\7\0\12\70\13\0\7\70\1\0\1\70"+
    "\4\0\1\137\1\140\25\70\7\0\12\70\13\0\7\70"+
    "\1\0\1\70\4\0\10\70\1\76\16\70\7\0\12\70"+
    "\13\0\7\70\1\0\1\70\4\0\1\141\26\70\7\0"+
    "\12\70\13\0\7\70\1\0\1\70\4\0\10\70\1\142"+
    "\16\70\7\0\12\70\60\0\1\11\1\0\1\11\76\0"+
    "\1\10\1\11\76\0\2\11\1\10\32\0\1\143\1\144"+
    "\46\0\7\144\3\0\25\145\1\146\1\145\1\0\50\145"+
    "\1\147\3\0\11\147\1\0\7\147\1\150\1\151\1\152"+
    "\46\147\1\153\1\154\26\0\1\155\53\0\1\60\75\0"+
    "\1\147\3\0\11\147\1\0\7\147\1\156\1\157\1\160"+
    "\46\147\1\161\1\162\5\64\1\63\1\163\1\164\2\64"+
    "\1\165\72\64\1\63\1\64\1\164\2\64\1\165\65\64"+
    "\5\166\1\167\1\170\2\166\1\170\66\166\5\66\1\171"+
    "\1\165\1\65\1\66\1\165\66\66\1\67\1\6\1\7"+
    "\75\67\13\0\7\172\1\0\1\172\4\0\27\172\7\0"+
    "\12\172\16\0\2\71\2\0\1\73\43\0\7\71\21\0"+
    "\2\173\46\0\7\173\72\0\1\174\23\0\7\172\1\0"+
    "\1\172\4\0\1\172\1\175\25\172\7\0\12\172\13\0"+
    "\7\172\1\0\1\172\4\0\16\172\1\176\10\172\7\0"+
    "\12\172\13\0\7\172\1\0\1\172\4\0\1\177\12\172"+
    "\1\200\6\172\1\201\4\172\7\0\12\172\13\0\7\172"+
    "\1\0\1\172\4\0\12\172\1\202\14\172\7\0\12\172"+
    "\13\0\7\172\1\0\1\172\4\0\5\172\1\203\21\172"+
    "\7\0\12\172\13\0\7\172\1\0\1\172\4\0\10\172"+
    "\1\204\16\172\7\0\12\172\13\0\7\172\1\0\1\172"+
    "\4\0\16\172\1\205\10\172\7\0\12\172\13\0\7\172"+
    "\1\0\1\172\4\0\14\172\1\202\12\172\7\0\12\172"+
    "\13\0\7\172\1\0\1\172\4\0\12\172\1\206\14\172"+
    "\7\0\12\172\13\0\7\172\1\0\1\172\4\0\11\172"+
    "\1\207\1\205\14\172\7\0\12\172\13\0\7\172\1\0"+
    "\1\172\4\0\11\172\1\205\15\172\7\0\12\172\13\0"+
    "\7\172\1\0\1\172\4\0\12\172\1\176\14\172\7\0"+
    "\12\172\13\0\7\172\1\0\1\172\4\0\3\172\1\210"+
    "\23\172\7\0\12\172\13\0\7\172\1\0\1\172\4\0"+
    "\7\172\1\211\17\172\7\0\12\172\13\0\7\172\1\0"+
    "\1\172\4\0\21\172\1\202\5\172\7\0\12\172\13\0"+
    "\7\172\1\0\1\172\4\0\22\172\1\202\4\172\7\0"+
    "\12\172\13\0\7\172\1\0\1\172\4\0\4\172\1\212"+
    "\22\172\7\0\12\172\13\0\7\172\1\0\1\172\4\0"+
    "\7\172\1\213\17\172\7\0\12\172\13\0\7\172\1\0"+
    "\1\172\4\0\1\214\26\172\7\0\12\172\13\0\7\172"+
    "\1\0\1\172\4\0\12\172\1\205\14\172\7\0\12\172"+
    "\13\0\7\172\1\0\1\172\4\0\1\172\1\215\25\172"+
    "\7\0\12\172\13\0\7\172\1\0\1\172\4\0\10\172"+
    "\1\216\16\172\7\0\12\172\13\0\7\172\1\0\1\172"+
    "\4\0\25\172\1\176\1\172\7\0\12\172\13\0\7\172"+
    "\1\0\1\172\4\0\17\172\1\217\7\172\7\0\12\172"+
    "\13\0\7\172\1\0\1\172\4\0\6\172\1\220\20\172"+
    "\7\0\12\172\13\0\7\172\1\0\1\172\4\0\12\172"+
    "\1\221\14\172\7\0\12\172\13\0\7\172\1\0\1\172"+
    "\4\0\6\172\1\222\20\172\7\0\12\172\13\0\7\172"+
    "\1\0\1\172\4\0\11\172\1\223\15\172\7\0\12\172"+
    "\13\0\7\172\1\0\1\172\4\0\11\172\1\202\15\172"+
    "\7\0\12\172\13\0\7\172\1\0\1\172\4\0\1\172"+
    "\1\224\25\172\7\0\12\172\13\0\7\172\1\0\1\172"+
    "\4\0\7\172\1\225\17\172\7\0\12\172\13\0\7\172"+
    "\1\0\1\172\4\0\12\172\1\226\14\172\7\0\12\172"+
    "\13\0\7\172\1\0\1\172\4\0\13\172\1\227\13\172"+
    "\7\0\12\172\13\0\7\172\1\0\1\172\4\0\10\172"+
    "\1\230\16\172\7\0\12\172\13\0\7\172\1\0\1\172"+
    "\4\0\1\172\1\205\25\172\7\0\12\172\13\0\7\172"+
    "\1\0\1\172\4\0\1\172\1\176\25\172\7\0\12\172"+
    "\16\0\2\144\46\0\7\144\3\0\25\145\1\0\1\145"+
    "\1\0\50\145\26\0\1\231\77\0\1\232\77\0\1\233"+
    "\77\0\1\234\77\0\1\235\51\0\7\163\1\236\2\163"+
    "\1\237\65\163\5\170\1\167\72\170\5\165\1\171\1\165"+
    "\1\164\70\165\5\170\1\167\1\236\71\170\5\165\1\171"+
    "\1\240\1\164\70\165\13\0\7\241\1\0\1\241\4\0"+
    "\27\241\7\0\12\241\16\0\2\173\1\0\1\242\1\0"+
    "\1\243\10\0\1\243\11\0\1\244\1\0\1\242\15\0"+
    "\7\173\1\244\72\0\1\245\22\0\7\241\1\0\1\241"+
    "\4\0\1\246\26\241\7\0\12\241\13\0\7\241\1\0"+
    "\1\241\4\0\11\241\1\247\4\241\1\247\10\241\7\0"+
    "\12\241\13\0\7\241\1\0\1\241\4\0\10\241\1\250"+
    "\16\241\7\0\12\241\13\0\7\241\1\0\1\241\4\0"+
    "\4\241\1\251\22\241\7\0\12\241\13\0\7\241\1\0"+
    "\1\241\4\0\4\241\1\247\22\241\7\0\12\241\13\0"+
    "\7\241\1\0\1\241\4\0\6\241\1\252\20\241\7\0"+
    "\12\241\13\0\7\241\1\0\1\241\4\0\11\241\1\253"+
    "\15\241\7\0\12\241\13\0\7\241\1\0\1\241\4\0"+
    "\10\241\1\247\16\241\7\0\12\241\13\0\7\241\1\0"+
    "\1\241\4\0\6\241\1\254\20\241\7\0\12\241\13\0"+
    "\7\241\1\0\1\241\4\0\4\241\1\255\22\241\7\0"+
    "\12\241\13\0\7\241\1\0\1\241\4\0\5\241\1\256"+
    "\21\241\7\0\12\241\13\0\7\241\1\0\1\241\4\0"+
    "\7\241\1\247\17\241\7\0\12\241\13\0\7\241\1\0"+
    "\1\241\4\0\14\241\1\257\12\241\7\0\12\241\13\0"+
    "\7\241\1\0\1\241\4\0\1\241\1\247\25\241\7\0"+
    "\12\241\13\0\7\241\1\0\1\241\4\0\6\241\1\260"+
    "\20\241\7\0\12\241\13\0\7\241\1\0\1\241\4\0"+
    "\1\241\1\261\25\241\7\0\12\241\13\0\7\241\1\0"+
    "\1\241\4\0\7\241\1\262\17\241\7\0\12\241\13\0"+
    "\7\241\1\0\1\241\4\0\12\241\1\263\14\241\7\0"+
    "\12\241\13\0\7\241\1\0\1\241\4\0\15\241\1\247"+
    "\11\241\7\0\12\241\13\0\7\241\1\0\1\241\4\0"+
    "\11\241\1\263\15\241\7\0\12\241\13\0\7\241\1\0"+
    "\1\241\4\0\14\241\1\263\12\241\7\0\12\241\13\0"+
    "\7\241\1\0\1\241\4\0\17\241\1\264\7\241\7\0"+
    "\12\241\13\0\7\241\1\0\1\241\4\0\13\241\1\265"+
    "\13\241\7\0\12\241\13\0\7\241\1\0\1\241\4\0"+
    "\6\241\1\255\20\241\7\0\12\241\13\0\7\241\1\0"+
    "\1\241\4\0\23\241\1\266\3\241\7\0\12\241\13\0"+
    "\7\241\1\0\1\241\4\0\5\241\1\267\5\241\1\270"+
    "\13\241\7\0\12\241\7\237\1\236\70\237\13\0\7\271"+
    "\1\0\1\271\4\0\27\271\7\0\12\271\16\0\2\272"+
    "\4\0\1\273\33\0\1\273\5\0\7\272\74\0\1\274"+
    "\21\0\7\271\1\0\1\271\4\0\2\271\1\275\24\271"+
    "\7\0\12\271\13\0\7\271\1\0\1\271\4\0\1\271"+
    "\1\276\25\271\7\0\12\271\13\0\7\271\1\0\1\271"+
    "\4\0\1\277\26\271\7\0\12\271\13\0\7\271\1\0"+
    "\1\271\4\0\7\271\1\275\17\271\7\0\12\271\13\0"+
    "\7\271\1\0\1\271\4\0\4\271\1\300\22\271\7\0"+
    "\12\271\13\0\7\271\1\0\1\271\4\0\7\271\1\301"+
    "\17\271\7\0\12\271\13\0\7\271\1\0\1\271\4\0"+
    "\11\271\1\275\15\271\7\0\12\271\13\0\7\271\1\0"+
    "\1\271\4\0\6\271\1\302\20\271\7\0\12\271\13\0"+
    "\7\271\1\0\1\271\4\0\12\271\1\275\14\271\7\0"+
    "\12\271\13\0\7\271\1\0\1\271\4\0\7\271\1\303"+
    "\17\271\7\0\12\271\13\0\7\271\1\0\1\271\4\0"+
    "\12\271\1\304\14\271\7\0\12\271\13\0\7\271\1\0"+
    "\1\271\4\0\12\271\1\305\14\271\7\0\12\271\13\0"+
    "\7\271\1\0\1\271\4\0\4\271\1\275\22\271\7\0"+
    "\12\271\13\0\7\271\1\0\1\271\4\0\1\306\26\271"+
    "\7\0\12\271\13\0\7\271\1\0\1\271\4\0\12\271"+
    "\1\307\14\271\7\0\12\271\13\0\7\271\1\0\1\271"+
    "\4\0\4\271\1\276\22\271\7\0\12\271\13\0\7\271"+
    "\1\0\1\271\4\0\1\271\1\310\25\271\7\0\12\271"+
    "\13\0\7\271\1\0\1\271\4\0\4\271\1\311\22\271"+
    "\7\0\12\271\13\0\7\312\1\0\1\312\4\0\27\312"+
    "\7\0\12\312\16\0\2\272\1\0\1\242\24\0\1\244"+
    "\1\0\1\242\15\0\7\272\1\244\20\0\2\272\46\0"+
    "\7\272\73\0\1\313\22\0\7\312\1\0\1\312\4\0"+
    "\16\312\1\314\10\312\7\0\12\312\13\0\7\312\1\0"+
    "\1\312\4\0\12\312\1\314\14\312\7\0\12\312\13\0"+
    "\7\312\1\0\1\312\4\0\1\315\26\312\7\0\12\312"+
    "\13\0\7\312\1\0\1\312\4\0\4\312\1\314\22\312"+
    "\7\0\12\312\13\0\7\312\1\0\1\312\4\0\7\312"+
    "\1\316\17\312\7\0\12\312\13\0\7\312\1\0\1\312"+
    "\4\0\5\312\1\314\21\312\7\0\12\312\13\0\7\312"+
    "\1\0\1\312\4\0\6\312\1\317\20\312\7\0\12\312"+
    "\13\0\7\312\1\0\1\312\4\0\10\312\1\314\16\312"+
    "\7\0\12\312\13\0\7\312\1\0\1\312\4\0\1\312"+
    "\1\320\25\312\7\0\12\312\13\0\7\312\1\0\1\312"+
    "\4\0\6\312\1\321\20\312\7\0\12\312\13\0\7\312"+
    "\1\0\1\312\4\0\1\322\26\312\7\0\12\312\13\0"+
    "\7\312\1\0\1\312\4\0\16\312\1\323\10\312\7\0"+
    "\12\312\13\0\7\324\1\0\1\324\4\0\27\324\7\0"+
    "\12\324\72\0\1\325\20\0\7\324\1\0\1\324\4\0"+
    "\7\324\1\326\17\324\7\0\12\324\13\0\7\324\1\0"+
    "\1\324\4\0\12\324\1\326\14\324\7\0\12\324\13\0"+
    "\7\324\1\0\1\324\4\0\7\324\1\327\17\324\7\0"+
    "\12\324\13\0\7\324\1\0\1\324\4\0\16\324\1\326"+
    "\10\324\7\0\12\324\13\0\7\324\1\0\1\324\4\0"+
    "\10\324\1\330\16\324\7\0\12\324\13\0\7\324\1\0"+
    "\1\324\4\0\24\324\1\326\2\324\7\0\12\324\13\0"+
    "\7\324\1\0\1\324\4\0\21\324\1\331\5\324\7\0"+
    "\12\324\13\0\7\332\1\0\1\332\4\0\27\332\7\0"+
    "\12\332\73\0\1\333\17\0\7\332\1\0\1\332\4\0"+
    "\12\332\1\334\14\332\7\0\12\332\13\0\7\332\1\0"+
    "\1\332\4\0\7\332\1\334\17\332\7\0\12\332\13\0"+
    "\7\332\1\0\1\332\4\0\1\332\1\335\25\332\7\0"+
    "\12\332\13\0\7\336\1\0\1\336\4\0\27\336\7\0"+
    "\12\336\74\0\1\337\16\0\7\336\1\0\1\336\4\0"+
    "\4\336\1\340\22\336\7\0\12\336\13\0\7\341\1\0"+
    "\1\341\4\0\27\341\7\0\12\341\70\0\1\342\22\0"+
    "\7\343\1\0\1\343\4\0\27\343\7\0\12\343\72\0"+
    "\1\344\20\0\7\345\1\0\1\345\4\0\27\345\7\0"+
    "\12\345\13\0\7\346\1\0\1\346\4\0\27\346\7\0"+
    "\12\346\13\0\7\347\1\0\1\347\4\0\27\347\7\0"+
    "\12\347\13\0\7\350\1\0\1\350\4\0\27\350\7\0"+
    "\12\350\13\0\7\351\1\0\1\351\4\0\27\351\7\0"+
    "\12\351\13\0\7\352\1\0\1\352\4\0\27\352\7\0"+
    "\12\352\13\0\7\353\1\0\1\353\4\0\27\353\7\0"+
    "\12\353\13\0\7\354\1\0\1\354\4\0\27\354\7\0"+
    "\12\354\13\0\7\355\1\0\1\355\4\0\27\355\7\0"+
    "\12\355\13\0\7\356\1\0\1\356\4\0\27\356\7\0"+
    "\12\356\13\0\7\357\1\0\1\357\4\0\27\357\7\0"+
    "\12\357\13\0\7\360\1\0\1\360\4\0\27\360\7\0"+
    "\12\360\13\0\7\361\1\0\1\361\4\0\27\361\7\0"+
    "\12\361\13\0\7\362\1\0\1\362\4\0\27\362\7\0"+
    "\12\362\13\0\7\363\1\0\1\363\4\0\27\363\7\0"+
    "\12\363\13\0\7\364\1\0\1\364\4\0\27\364\7\0"+
    "\12\364\13\0\7\365\1\0\1\365\4\0\27\365\7\0"+
    "\12\365\13\0\7\366\1\0\1\366\4\0\27\366\7\0"+
    "\12\366\13\0\7\367\1\0\1\367\4\0\27\367\7\0"+
    "\12\367\13\0\7\370\1\0\1\370\4\0\27\370\7\0"+
    "\12\370\13\0\7\371\1\0\1\371\4\0\27\371\7\0"+
    "\12\371\13\0\7\372\1\0\1\372\4\0\27\372\7\0"+
    "\12\372\13\0\7\373\1\0\1\373\4\0\27\373\7\0"+
    "\12\373\13\0\7\374\1\0\1\374\4\0\27\374\7\0"+
    "\12\374\13\0\7\375\1\0\1\375\4\0\27\375\7\0"+
    "\12\375\13\0\7\376\1\0\1\376\4\0\27\376\7\0"+
    "\12\376\13\0\7\377\1\0\1\377\4\0\27\377\7\0"+
    "\12\377\13\0\7\u0100\1\0\1\u0100\4\0\27\u0100\7\0"+
    "\12\u0100\13\0\7\u0101\1\0\1\u0101\4\0\27\u0101\7\0"+
    "\12\u0101\13\0\7\u0102\1\0\1\u0102\4\0\27\u0102\7\0"+
    "\12\u0102\13\0\7\u0103\1\0\1\u0103\4\0\27\u0103\7\0"+
    "\12\u0103\13\0\7\u0104\1\0\1\u0104\4\0\27\u0104\7\0"+
    "\12\u0104\13\0\7\u0105\1\0\1\u0105\4\0\27\u0105\7\0"+
    "\12\u0105\13\0\7\u0106\1\0\1\u0106\4\0\27\u0106\7\0"+
    "\12\u0106\13\0\7\u0107\1\0\1\u0107\4\0\27\u0107\7\0"+
    "\12\u0107\13\0\7\u0108\1\0\1\u0108\4\0\27\u0108\7\0"+
    "\12\u0108\13\0\7\u0109\1\0\1\u0109\4\0\27\u0109\7\0"+
    "\12\u0109\13\0\7\u010a\1\0\1\u010a\4\0\27\u010a\7\0"+
    "\12\u010a\13\0\7\u010b\1\0\1\u010b\4\0\27\u010b\7\0"+
    "\12\u010b\13\0\7\u010c\1\0\1\u010c\4\0\27\u010c\7\0"+
    "\12\u010c\13\0\7\u010d\1\0\1\u010d\4\0\27\u010d\7\0"+
    "\12\u010d\13\0\7\u010e\1\0\1\u010e\4\0\27\u010e\7\0"+
    "\12\u010e\13\0\7\u010f\1\0\1\u010f\4\0\27\u010f\7\0"+
    "\12\u010f\13\0\7\u0110\1\0\1\u0110\4\0\27\u0110\7\0"+
    "\12\u0110\13\0\7\u0111\1\0\1\u0111\4\0\27\u0111\7\0"+
    "\12\u0111\13\0\7\u0112\1\0\1\u0112\4\0\27\u0112\7\0"+
    "\12\u0112\13\0\7\u0113\1\0\1\u0113\4\0\27\u0113\7\0"+
    "\12\u0113\13\0\7\u0114\1\0\1\u0114\4\0\27\u0114\7\0"+
    "\12\u0114\13\0\7\u0115\1\0\1\u0115\4\0\27\u0115\7\0"+
    "\12\u0115\13\0\7\u0116\1\0\1\u0116\4\0\27\u0116\7\0"+
    "\12\u0116\13\0\7\u0117\1\0\1\u0117\4\0\27\u0117\7\0"+
    "\12\u0117\13\0\7\u0118\1\0\1\u0118\4\0\27\u0118\7\0"+
    "\12\u0118\13\0\7\u0119\1\0\1\u0119\4\0\27\u0119\7\0"+
    "\12\u0119\13\0\7\u011a\1\0\1\u011a\4\0\27\u011a\7\0"+
    "\12\u011a\13\0\7\u011b\1\0\1\u011b\4\0\27\u011b\7\0"+
    "\12\u011b\13\0\7\u011c\1\0\1\u011c\4\0\27\u011c\7\0"+
    "\12\u011c\13\0\7\u011d\1\0\1\u011d\4\0\27\u011d\7\0"+
    "\12\u011d\13\0\7\u011e\1\0\1\u011e\4\0\27\u011e\7\0"+
    "\12\u011e\13\0\7\u011f\1\0\1\u011f\4\0\27\u011f\7\0"+
    "\12\u011f\13\0\7\u0120\1\0\1\u0120\4\0\27\u0120\7\0"+
    "\12\u0120\13\0\7\u0121\1\0\1\u0121\4\0\27\u0121\7\0"+
    "\12\u0121\13\0\7\u0122\1\0\1\u0122\4\0\27\u0122\7\0"+
    "\12\u0122\13\0\7\u0123\1\0\1\u0123\4\0\27\u0123\7\0"+
    "\12\u0123\13\0\7\u0124\1\0\1\u0124\4\0\27\u0124\7\0"+
    "\12\u0124\13\0\7\u0125\1\0\1\u0125\4\0\27\u0125\7\0"+
    "\12\u0125\13\0\7\u0126\1\0\1\u0126\4\0\27\u0126\7\0"+
    "\12\u0126\13\0\7\u0127\1\0\1\u0127\4\0\27\u0127\7\0"+
    "\12\u0127\13\0\7\u0128\1\0\1\u0128\4\0\27\u0128\7\0"+
    "\12\u0128\13\0\7\u0129\1\0\1\u0129\4\0\27\u0129\7\0"+
    "\12\u0129\13\0\7\u012a\1\0\1\u012a\4\0\27\u012a\7\0"+
    "\12\u012a\13\0\7\u012b\1\0\1\u012b\4\0\27\u012b\7\0"+
    "\12\u012b\13\0\7\u012c\1\0\1\u012c\4\0\27\u012c\7\0"+
    "\12\u012c\13\0\7\u012d\1\0\1\u012d\4\0\27\u012d\7\0"+
    "\12\u012d\13\0\7\u012e\1\0\1\u012e\4\0\27\u012e\7\0"+
    "\12\u012e\13\0\7\u012f\1\0\1\u012f\4\0\27\u012f\7\0"+
    "\12\u012f\13\0\7\u0130\1\0\1\u0130\4\0\27\u0130\7\0"+
    "\12\u0130\13\0\7\u0131\1\0\1\u0131\4\0\27\u0131\7\0"+
    "\12\u0131\13\0\7\u0132\1\0\1\u0132\4\0\27\u0132\7\0"+
    "\12\u0132\13\0\7\u0133\1\0\1\u0133\4\0\27\u0133\7\0"+
    "\12\u0133\13\0\7\u0134\1\0\1\u0134\4\0\27\u0134\7\0"+
    "\12\u0134\13\0\7\u0135\1\0\1\u0135\4\0\27\u0135\7\0"+
    "\12\u0135\13\0\7\u0136\1\0\1\u0136\4\0\27\u0136\7\0"+
    "\12\u0136\13\0\7\u0137\1\0\1\u0137\4\0\27\u0137\7\0"+
    "\12\u0137\13\0\7\u0138\1\0\1\u0138\4\0\27\u0138\7\0"+
    "\12\u0138\13\0\7\u0139\1\0\1\u0139\4\0\27\u0139\7\0"+
    "\12\u0139\13\0\7\u013a\1\0\1\u013a\4\0\27\u013a\7\0"+
    "\12\u013a\13\0\7\u013b\1\0\1\u013b\4\0\27\u013b\7\0"+
    "\12\u013b\13\0\7\u013c\1\0\1\u013c\4\0\27\u013c\7\0"+
    "\12\u013c\13\0\7\u013d\1\0\1\u013d\4\0\27\u013d\7\0"+
    "\12\u013d\13\0\7\u013e\1\0\1\u013e\4\0\27\u013e\7\0"+
    "\12\u013e\13\0\7\u013f\1\0\1\u013f\4\0\27\u013f\7\0"+
    "\12\u013f\13\0\7\u0140\1\0\1\u0140\4\0\27\u0140\7\0"+
    "\12\u0140\13\0\7\u0141\1\0\1\u0141\4\0\27\u0141\7\0"+
    "\12\u0141\13\0\7\u0142\1\0\1\u0142\4\0\27\u0142\7\0"+
    "\12\u0142\13\0\7\u0143\1\0\1\u0143\4\0\27\u0143\7\0"+
    "\12\u0143\13\0\7\u0144\1\0\1\u0144\4\0\27\u0144\7\0"+
    "\12\u0144\13\0\7\u0145\1\0\1\u0145\4\0\27\u0145\7\0"+
    "\12\u0145\13\0\7\u0146\1\0\1\u0146\4\0\27\u0146\7\0"+
    "\12\u0146\13\0\7\u0147\1\0\1\u0147\4\0\27\u0147\7\0"+
    "\12\u0147\13\0\7\u0148\1\0\1\u0148\4\0\27\u0148\7\0"+
    "\12\u0148\13\0\7\u0149\1\0\1\u0149\4\0\27\u0149\7\0"+
    "\12\u0149\13\0\7\u014a\1\0\1\u014a\4\0\27\u014a\7\0"+
    "\12\u014a\13\0\7\u014b\1\0\1\u014b\4\0\27\u014b\7\0"+
    "\12\u014b\13\0\7\u014c\1\0\1\u014c\4\0\27\u014c\7\0"+
    "\12\u014c\13\0\7\u014d\1\0\1\u014d\4\0\27\u014d\7\0"+
    "\12\u014d\13\0\7\u014e\1\0\1\u014e\4\0\27\u014e\7\0"+
    "\12\u014e\13\0\7\u014f\1\0\1\u014f\4\0\27\u014f\7\0"+
    "\12\u014f\13\0\7\u0150\1\0\1\u0150\4\0\27\u0150\7\0"+
    "\12\u0150\13\0\7\u0151\1\0\1\u0151\4\0\27\u0151\7\0"+
    "\12\u0151\13\0\7\u0152\1\0\1\u0152\4\0\27\u0152\7\0"+
    "\12\u0152\13\0\7\u0153\1\0\1\u0153\4\0\27\u0153\7\0"+
    "\12\u0153\13\0\7\u0154\1\0\1\u0154\4\0\27\u0154\7\0"+
    "\12\u0154\13\0\7\u0155\1\0\1\u0155\4\0\27\u0155\7\0"+
    "\12\u0155\13\0\7\u0156\1\0\1\u0156\4\0\27\u0156\7\0"+
    "\12\u0156\13\0\7\u0157\1\0\1\u0157\4\0\27\u0157\7\0"+
    "\12\u0157\13\0\7\u0158\1\0\1\u0158\4\0\27\u0158\7\0"+
    "\12\u0158";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19392];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\1\11\4\1\2\11\31\1\1\11\3\1\1\11\10\1"+
    "\1\0\1\11\2\0\46\1\1\11\2\1\10\11\7\1"+
    "\1\0\1\1\3\0\2\1\1\0\34\1\6\11\1\0"+
    "\2\1\1\11\1\0\1\11\1\0\25\1\2\0\16\1"+
    "\1\0\11\1\1\0\5\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\11\163\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new PclSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new PclSymbol(type, yyline+1, yycolumn+1, value);
  }

  private void printError(String type){
    System.out.println("Error: line:" + (yyline+1) + " col:" + (yycolumn+1) + " type:" + type);
  }

  public java_cup.runtime.Symbol custom_debug_next_token() throws java.io.IOException {
      java_cup.runtime.Symbol s = next_token();
      //System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
      return s;
  }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2894) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              printError("Unterminated string at end of file"); return symbol(EOF);
            }
            case 345: break;
            case CHARLITERAL: {
              printError("Unterminated character at end of file"); return symbol(EOF);
            }
            case 346: break;
            case COMMENT: {
              printError("Unterminated comment at end of file"); return symbol(EOF);
            }
            case 347: break;
            default:
              {
                return symbol(EOF);
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 34: break;
          case 2: 
            { printError("Illegal character \""+yytext()+
                                                              "\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
          case 35: break;
          case 3: 
            { /* ignore */
            }
          case 36: break;
          case 4: 
            { return symbol(OPERADOR,yytext());
            }
          case 37: break;
          case 5: 
            { yybegin(COMMENT);
            }
          case 38: break;
          case 6: 
            { return symbol(IDENTIFICADOR, yytext());
            }
          case 39: break;
          case 7: 
            { return symbol(INTEGER_LITERAL, new Integer(yytext()));
            }
          case 40: break;
          case 8: 
            { yybegin(STRING); string.setLength(0);
            }
          case 41: break;
          case 9: 
            { yybegin(CHARLITERAL);
            }
          case 42: break;
          case 10: 
            { string.append( yytext() );
            }
          case 43: break;
          case 11: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          case 44: break;
          case 12: 
            { printError("Unterminated character literal at end of line");
            }
          case 45: break;
          case 13: 
            { yybegin(YYINITIAL);
            }
          case 46: break;
          case 14: 
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 47: break;
          case 15: 
            { return symbol(PALABRA_RESERVADA,yytext());
            }
          case 48: break;
          case 16: 
            { return symbol(CHARACTER_LITERAL, yytext());
            }
          case 49: break;
          case 17: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL,yytext().charAt(0));
            }
          case 50: break;
          case 18: 
            { printError("Illegal escape sequence \""+yytext()+"\"");
            }
          case 51: break;
          case 19: 
            { string.append( '\"' );
            }
          case 52: break;
          case 20: 
            { string.append( '\'' );
            }
          case 53: break;
          case 21: 
            { string.append( '\\' );
            }
          case 54: break;
          case 22: 
            { string.append( '\b' );
            }
          case 55: break;
          case 23: 
            { string.append( '\t' );
            }
          case 56: break;
          case 24: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 57: break;
          case 25: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 58: break;
          case 26: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          case 59: break;
          case 27: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          case 60: break;
          case 28: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          case 61: break;
          case 29: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          case 62: break;
          case 30: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          case 63: break;
          case 31: 
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 64: break;
          case 32: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 65: break;
          case 33: 
            { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
            }
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
