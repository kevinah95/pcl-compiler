/* The following code was generated by JFlex 1.6.1 */

package com.pcl.lexer;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/kevinah95/IdeaProjects/pcl-compiler/src/com/pcl/lexer/pcl.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\12\1\4\1\2\1\3\1\3\1\1\16\12\4\0\1\4\1\0"+
    "\1\23\1\63\1\11\2\0\1\24\1\10\1\6\1\5\1\56\1\55"+
    "\1\22\1\20\1\7\1\14\1\65\1\64\1\71\1\66\1\15\1\72"+
    "\1\67\1\70\1\15\1\62\1\55\1\61\1\60\1\57\2\0\1\26"+
    "\1\31\1\41\1\44\1\32\1\46\1\33\1\43\1\34\1\11\1\51"+
    "\1\37\1\52\1\35\1\36\1\50\1\11\1\27\1\42\1\40\1\47"+
    "\1\53\1\45\1\54\1\30\1\11\1\55\1\25\1\55\1\0\1\11"+
    "\1\0\1\11\1\75\1\11\1\73\1\21\1\17\5\11\1\16\7\11"+
    "\1\76\6\11\1\74\1\0\1\0\1\0\6\12\1\13\32\12\2\0"+
    "\4\11\4\0\1\11\2\0\1\12\7\0\1\11\4\0\1\11\5\0"+
    "\27\11\1\0\37\11\1\0\u01ca\11\4\0\14\11\16\0\5\11\7\0"+
    "\1\11\1\0\1\11\21\0\160\12\5\11\1\0\2\11\2\0\4\11"+
    "\10\0\1\11\1\0\3\11\1\0\1\11\1\0\24\11\1\0\123\11"+
    "\1\0\213\11\1\0\5\12\2\0\236\11\11\0\46\11\2\0\1\11"+
    "\7\0\47\11\7\0\1\11\1\0\55\12\1\0\1\12\1\0\2\12"+
    "\1\0\2\12\1\0\1\12\10\0\33\11\5\0\3\11\15\0\5\12"+
    "\6\0\1\11\4\0\13\12\5\0\53\11\37\12\4\0\2\11\1\12"+
    "\143\11\1\0\1\11\10\12\1\0\6\12\2\11\2\12\1\0\4\12"+
    "\2\11\12\12\3\11\2\0\1\11\17\0\1\12\1\11\1\12\36\11"+
    "\33\12\2\0\131\11\13\12\1\11\16\0\12\12\41\11\11\12\2\11"+
    "\4\0\1\11\5\0\26\11\4\12\1\11\11\12\1\11\3\12\1\11"+
    "\5\12\22\0\31\11\3\12\104\0\1\11\1\0\13\11\67\0\33\12"+
    "\1\0\4\12\66\11\3\12\1\11\22\12\1\11\7\12\12\11\2\12"+
    "\2\0\12\12\1\0\7\11\1\0\7\11\1\0\3\12\1\0\10\11"+
    "\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11\3\0\4\11"+
    "\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12\1\11\10\0"+
    "\1\12\4\0\2\11\1\0\3\11\2\12\2\0\12\12\4\11\7\0"+
    "\1\11\5\0\3\12\1\0\6\11\4\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\12\1\0"+
    "\5\12\4\0\2\12\2\0\3\12\3\0\1\12\7\0\4\11\1\0"+
    "\1\11\7\0\14\12\3\11\1\12\13\0\3\12\1\0\11\11\1\0"+
    "\3\11\1\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11\2\0"+
    "\1\12\1\11\10\12\1\0\3\12\1\0\3\12\2\0\1\11\17\0"+
    "\2\11\2\12\2\0\12\12\1\0\1\11\17\0\3\12\1\0\10\11"+
    "\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12\10\0\2\12"+
    "\4\0\2\11\1\0\3\11\2\12\2\0\12\12\1\0\1\11\20\0"+
    "\1\12\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11"+
    "\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0\14\11"+
    "\4\0\5\12\3\0\3\12\1\0\4\12\2\0\1\11\6\0\1\12"+
    "\16\0\12\12\11\0\1\11\7\0\3\12\1\0\10\11\1\0\3\11"+
    "\1\0\27\11\1\0\12\11\1\0\5\11\3\0\1\11\7\12\1\0"+
    "\3\12\1\0\4\12\7\0\2\12\1\0\2\11\6\0\2\11\2\12"+
    "\2\0\12\12\22\0\2\12\1\0\10\11\1\0\3\11\1\0\27\11"+
    "\1\0\12\11\1\0\5\11\2\0\1\12\1\11\7\12\1\0\3\12"+
    "\1\0\4\12\7\0\2\12\7\0\1\11\1\0\2\11\2\12\2\0"+
    "\12\12\1\0\2\11\17\0\2\12\1\0\10\11\1\0\3\11\1\0"+
    "\51\11\2\0\1\11\7\12\1\0\3\12\1\0\4\12\1\11\10\0"+
    "\1\12\10\0\2\11\2\12\2\0\12\12\12\0\6\11\2\0\2\12"+
    "\1\0\22\11\3\0\30\11\1\0\11\11\1\0\1\11\2\0\7\11"+
    "\3\0\1\12\4\0\6\12\1\0\1\12\1\0\10\12\22\0\2\12"+
    "\15\0\60\11\1\12\2\11\7\12\4\0\10\11\10\12\1\0\12\12"+
    "\47\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0\1\11"+
    "\2\0\2\11\1\0\4\11\1\12\2\11\6\12\1\0\2\12\1\11"+
    "\2\0\5\11\1\0\1\11\1\0\6\12\2\0\12\12\2\0\4\11"+
    "\40\0\1\11\27\0\2\12\6\0\12\12\13\0\1\12\1\0\1\12"+
    "\1\0\1\12\4\0\2\12\10\11\1\0\44\11\4\0\24\12\1\0"+
    "\2\12\5\11\13\12\1\0\44\12\11\0\1\12\71\0\53\11\24\12"+
    "\1\11\12\12\6\0\6\11\4\12\4\11\3\12\1\11\3\12\2\11"+
    "\7\12\3\11\4\12\15\11\14\12\1\11\17\12\2\0\46\11\1\0"+
    "\1\11\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11\2\0"+
    "\7\11\1\0\1\11\1\0\4\11\2\0\51\11\1\0\4\11\2\0"+
    "\41\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0"+
    "\17\11\1\0\71\11\1\0\4\11\2\0\103\11\2\0\3\12\40\0"+
    "\20\11\20\0\125\11\14\0\u026c\11\2\0\21\11\1\0\32\11\5\0"+
    "\113\11\3\0\3\11\17\0\15\11\1\0\4\11\3\12\13\0\22\11"+
    "\3\12\13\0\22\11\2\12\14\0\15\11\1\0\3\11\1\0\2\12"+
    "\14\0\64\11\40\12\3\0\1\11\3\0\2\11\1\12\2\0\12\12"+
    "\41\0\3\12\2\0\12\12\6\0\130\11\10\0\51\11\1\12\1\11"+
    "\5\0\106\11\12\0\35\11\3\0\14\12\4\0\14\12\12\0\12\12"+
    "\36\11\2\0\5\11\13\0\54\11\4\0\21\12\7\11\2\12\6\0"+
    "\12\12\46\0\27\11\5\12\4\0\65\11\12\12\1\0\35\12\2\0"+
    "\13\12\6\0\12\12\15\0\1\11\130\0\5\12\57\11\21\12\7\11"+
    "\4\0\12\12\21\0\11\12\14\0\3\12\36\11\15\12\2\11\12\12"+
    "\54\11\16\12\14\0\44\11\24\12\10\0\12\12\3\0\3\11\12\12"+
    "\44\11\122\0\3\12\1\0\25\12\4\11\1\12\4\11\3\12\2\11"+
    "\11\0\300\11\47\12\25\0\4\12\u0116\11\2\0\6\11\2\0\46\11"+
    "\2\0\6\11\2\0\10\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\37\11\2\0\65\11\1\0\7\11\1\0\1\11\3\0\3\11"+
    "\1\0\7\11\3\0\4\11\2\0\6\11\4\0\15\11\5\0\3\11"+
    "\1\0\7\11\16\0\5\12\30\0\1\3\1\3\5\12\20\0\2\11"+
    "\23\0\1\11\13\0\5\12\5\0\6\12\1\0\1\11\15\0\1\11"+
    "\20\0\15\11\3\0\33\11\25\0\15\12\4\0\1\12\3\0\14\12"+
    "\21\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0\5\11"+
    "\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\13\11"+
    "\2\0\4\11\5\0\5\11\4\0\1\11\21\0\51\11\u0a77\0\57\11"+
    "\1\0\57\11\1\0\205\11\6\0\4\11\3\12\2\11\14\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11\17\0\1\12"+
    "\27\11\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\12\57\0"+
    "\1\11\u01d5\0\3\11\31\0\11\11\6\12\1\0\5\11\2\0\5\11"+
    "\4\0\126\11\2\0\2\12\2\0\3\11\1\0\132\11\1\0\4\11"+
    "\5\0\51\11\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11"+
    "\112\0\u51cd\11\63\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11"+
    "\12\12\2\11\24\0\57\11\1\12\4\0\12\12\1\0\31\11\7\0"+
    "\1\12\120\11\2\12\45\0\11\11\2\0\147\11\2\0\4\11\1\0"+
    "\4\11\14\0\13\11\115\0\12\11\1\12\3\11\1\12\4\11\1\12"+
    "\27\11\5\12\20\0\1\11\7\0\64\11\14\0\2\12\62\11\21\12"+
    "\13\0\12\12\6\0\22\12\6\11\3\0\1\11\4\0\12\12\34\11"+
    "\10\12\2\0\27\11\15\12\14\0\35\11\3\0\4\12\57\11\16\12"+
    "\16\0\1\11\12\12\46\0\51\11\16\12\11\0\3\11\1\12\10\11"+
    "\2\12\2\0\12\12\6\0\27\11\3\0\1\11\1\12\4\0\60\11"+
    "\1\12\1\11\3\12\2\11\2\12\5\11\2\12\1\11\1\12\1\11"+
    "\30\0\3\11\2\0\13\11\5\12\2\0\3\11\2\12\12\0\6\11"+
    "\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11\221\0\43\11"+
    "\10\12\1\0\2\12\2\0\12\12\6\0\u2ba4\11\14\0\27\11\4\0"+
    "\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11\14\0\5\11\5\0"+
    "\1\11\1\12\12\11\1\0\15\11\1\0\5\11\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11\2\0"+
    "\66\11\50\0\15\11\3\0\20\12\20\0\7\12\14\0\2\11\30\0"+
    "\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\12\4\0"+
    "\1\11\13\0\12\12\7\0\32\11\4\0\1\11\1\0\32\11\13\0"+
    "\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11\3\0"+
    "\2\11\3\0\2\11\22\0\3\12\4\0\14\11\1\0\32\11\1\0"+
    "\23\11\1\0\2\11\1\0\17\11\2\0\16\11\42\0\173\11\105\0"+
    "\65\11\210\0\1\12\202\0\35\11\3\0\61\11\57\0\37\11\21\0"+
    "\33\11\65\0\36\11\2\0\44\11\4\0\10\11\1\0\5\11\52\0"+
    "\236\11\2\0\12\12\u0356\0\6\11\2\0\1\11\1\0\54\11\1\0"+
    "\2\11\3\0\1\11\2\0\27\11\252\0\26\11\12\0\32\11\106\0"+
    "\70\11\6\0\2\11\100\0\1\11\3\12\1\0\2\12\5\0\4\12"+
    "\4\11\1\0\3\11\1\0\33\11\4\0\3\12\4\0\1\12\40\0"+
    "\35\11\203\0\66\11\12\0\26\11\12\0\23\11\215\0\111\11\u03b7\0"+
    "\3\12\65\11\17\12\37\0\12\12\20\0\3\12\55\11\13\12\2\0"+
    "\1\12\22\0\31\11\7\0\12\12\6\0\3\12\44\11\16\12\1\0"+
    "\12\12\100\0\3\12\60\11\16\12\4\11\13\0\12\12\u04a6\0\53\11"+
    "\15\12\10\0\12\12\u0936\0\u036f\11\221\0\143\11\u0b9d\0\u042f\11\u33d1\0"+
    "\u0239\11\u04c7\0\105\11\13\0\1\11\56\12\20\0\4\12\15\11\u4060\0"+
    "\2\11\u2163\0\5\12\3\0\26\12\2\0\7\12\36\0\4\12\224\0"+
    "\3\12\u01bb\0\125\11\1\0\107\11\1\0\2\11\2\0\1\11\2\0"+
    "\2\11\2\0\4\11\1\0\14\11\1\0\1\11\1\0\7\11\1\0"+
    "\101\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0\34\11\1\0"+
    "\4\11\1\0\5\11\1\0\1\11\3\0\7\11\1\0\u0154\11\2\0"+
    "\31\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11\1\0"+
    "\31\11\1\0\37\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0"+
    "\10\11\2\0\62\12\u1600\0\4\11\1\0\33\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\1\0\12\11\1\0\4\11\1\0\1\11\1\0"+
    "\1\11\6\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11\2\0"+
    "\4\11\1\0\7\11\1\0\4\11\1\0\4\11\1\0\1\11\1\0"+
    "\12\11\1\0\21\11\5\0\3\11\1\0\5\11\1\0\21\11\u1144\0"+
    "\ua6d7\11\51\0\u1035\11\13\0\336\11\u3fe2\0\u021e\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\12\36\0\140\12\200\0\360\12\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\4\3\1\4\2\5\1\3\1\6"+
    "\1\7\24\4\3\3\1\1\1\10\1\11\1\12\2\1"+
    "\3\13\3\1\1\2\1\4\1\0\1\14\2\0\11\4"+
    "\2\15\2\4\1\3\13\4\1\15\14\4\2\16\1\11"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\5\20\2\0\1\4\1\27\1\0\1\4\1\3\6\4"+
    "\1\15\16\4\1\15\4\4\1\30\1\31\1\32\1\33"+
    "\1\34\1\4\1\35\1\0\1\36\1\0\1\4\1\15"+
    "\22\4\1\27\2\0\1\15\15\4\1\0\1\15\10\4"+
    "\1\0\1\15\4\4\1\0\1\15\2\4\1\0\1\15"+
    "\1\4\1\0\1\4\1\37\164\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\374\0\u017a"+
    "\0\374\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\374"+
    "\0\374\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad"+
    "\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5"+
    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d"+
    "\0\u08dc\0\374\0\u091b\0\374\0\u095a\0\u0999\0\u09d8\0\374"+
    "\0\u0999\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\374"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0b13\0\u0e85\0\u0ec4\0\u0b13"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc"+
    "\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4"+
    "\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac"+
    "\0\374\0\u14eb\0\u152a\0\374\0\374\0\374\0\374\0\374"+
    "\0\374\0\374\0\374\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u0a56\0\u0a95\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u16a4\0\u17a0"+
    "\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u16a4\0\u191a\0\u1959"+
    "\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49"+
    "\0\u1d88\0\374\0\374\0\374\0\374\0\374\0\u1dc7\0\374"+
    "\0\u1e06\0\374\0\u1e45\0\u1e84\0\u1dc7\0\u1ec3\0\u1f02\0\u1f41"+
    "\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139"+
    "\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331"+
    "\0\u2370\0\u23af\0\u22f2\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea"+
    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2"+
    "\0\u2721\0\u26e2\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b"+
    "\0\u28da\0\u2919\0\u2958\0\u2919\0\u2997\0\u29d6\0\u2a15\0\u2a54"+
    "\0\u2a93\0\u2a54\0\u2ad2\0\u2b11\0\u2b50\0\u2b11\0\u2b8f\0\u2bce"+
    "\0\u2c0d\0\374\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87"+
    "\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f"+
    "\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177"+
    "\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f"+
    "\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567"+
    "\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f"+
    "\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957"+
    "\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f"+
    "\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47"+
    "\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f"+
    "\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137"+
    "\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f"+
    "\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527"+
    "\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f"+
    "\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\3\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\5\1\7\1\15\1\16\2\14\1\11\1\14\1\17"+
    "\1\20\1\21\1\5\1\22\1\23\1\14\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\14\1\36\1\37\1\40\1\41\1\42\1\14\1\43"+
    "\1\44\1\45\1\11\1\46\1\47\1\11\1\50\1\10"+
    "\1\51\7\16\1\14\1\52\2\14\23\53\1\54\1\53"+
    "\1\55\51\53\1\56\1\57\1\60\1\61\7\56\1\61"+
    "\10\56\1\5\1\62\51\56\5\63\1\64\71\63\101\0"+
    "\1\7\154\0\1\11\25\0\1\65\50\0\1\11\23\0"+
    "\1\52\102\0\7\66\1\0\1\66\4\0\27\66\7\0"+
    "\10\66\1\0\2\66\14\0\2\67\1\70\1\0\1\71"+
    "\16\0\1\70\24\0\7\67\20\0\2\16\1\70\1\0"+
    "\1\71\16\0\1\70\24\0\7\16\26\0\1\11\35\0"+
    "\1\11\3\0\1\72\23\0\7\66\1\0\1\66\4\0"+
    "\1\66\1\73\5\66\1\74\17\66\7\0\10\66\1\0"+
    "\2\66\11\0\7\66\1\0\1\66\4\0\4\66\1\75"+
    "\22\66\7\0\10\66\1\0\2\66\11\0\7\66\1\0"+
    "\1\66\4\0\2\66\1\76\1\66\1\77\3\66\1\100"+
    "\16\66\7\0\10\66\1\0\2\66\11\0\7\66\1\0"+
    "\1\66\4\0\7\66\1\101\1\66\1\102\15\66\7\0"+
    "\10\66\1\0\2\66\11\0\7\66\1\0\1\66\4\0"+
    "\10\66\1\103\16\66\7\0\10\66\1\0\2\66\11\0"+
    "\7\66\1\0\1\66\4\0\7\66\1\104\10\66\1\105"+
    "\6\66\7\0\10\66\1\0\2\66\11\0\7\66\1\0"+
    "\1\66\4\0\6\66\1\106\1\66\1\107\16\66\7\0"+
    "\10\66\1\0\2\66\11\0\7\66\1\0\1\66\4\0"+
    "\1\66\1\110\16\66\1\105\6\66\7\0\10\66\1\0"+
    "\2\66\11\0\7\66\1\0\1\66\4\0\1\111\7\66"+
    "\1\112\16\66\7\0\10\66\1\0\2\66\11\0\7\66"+
    "\1\0\1\66\4\0\1\66\1\113\1\114\5\66\1\105"+
    "\4\66\1\115\11\66\7\0\10\66\1\0\2\66\11\0"+
    "\7\66\1\0\1\66\4\0\1\102\7\66\1\116\4\66"+
    "\1\117\11\66\7\0\10\66\1\0\2\66\11\0\7\66"+
    "\1\0\1\66\4\0\4\66\1\120\5\66\1\121\2\66"+
    "\1\122\11\66\7\0\10\66\1\0\2\66\11\0\7\66"+
    "\1\0\1\66\4\0\6\66\1\123\1\66\1\124\16\66"+
    "\7\0\10\66\1\0\2\66\11\0\7\66\1\0\1\66"+
    "\4\0\1\66\1\125\4\66\1\126\6\66\1\127\11\66"+
    "\7\0\10\66\1\0\2\66\11\0\7\66\1\0\1\66"+
    "\4\0\1\130\5\66\1\131\1\66\1\132\10\66\1\133"+
    "\5\66\7\0\10\66\1\0\2\66\11\0\7\66\1\0"+
    "\1\66\4\0\7\66\1\134\17\66\7\0\10\66\1\0"+
    "\2\66\11\0\7\66\1\0\1\66\4\0\1\135\1\136"+
    "\25\66\7\0\10\66\1\0\2\66\11\0\7\66\1\0"+
    "\1\66\4\0\10\66\1\74\16\66\7\0\10\66\1\0"+
    "\2\66\11\0\7\66\1\0\1\66\4\0\1\137\26\66"+
    "\7\0\10\66\1\0\2\66\11\0\7\66\1\0\1\66"+
    "\4\0\10\66\1\140\16\66\7\0\10\66\1\0\2\66"+
    "\56\0\1\11\1\0\1\11\75\0\1\10\1\11\75\0"+
    "\2\11\1\10\31\0\1\141\1\142\46\0\7\142\4\0"+
    "\23\143\1\144\1\143\1\0\51\143\1\145\3\0\7\145"+
    "\1\0\7\145\1\146\1\147\1\150\47\145\1\151\1\152"+
    "\24\0\1\153\54\0\1\60\74\0\1\145\3\0\7\145"+
    "\1\0\7\145\1\154\1\155\1\156\47\145\1\157\1\160"+
    "\5\161\1\162\76\161\1\162\1\7\70\161\1\65\1\6"+
    "\1\7\74\65\11\0\7\163\1\0\1\163\4\0\27\163"+
    "\7\0\10\163\1\0\2\163\14\0\2\67\2\0\1\71"+
    "\43\0\7\67\20\0\2\164\46\0\7\164\71\0\1\165"+
    "\22\0\7\163\1\0\1\163\4\0\1\163\1\166\25\163"+
    "\7\0\10\163\1\0\2\163\11\0\7\163\1\0\1\163"+
    "\4\0\16\163\1\167\10\163\7\0\10\163\1\0\2\163"+
    "\11\0\7\163\1\0\1\163\4\0\1\170\12\163\1\171"+
    "\6\163\1\172\4\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\12\163\1\173\14\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\5\163\1\174\21\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\10\163\1\175\16\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\16\163\1\176\10\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\14\163\1\173\12\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\12\163\1\177\14\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\11\163\1\200\1\176\14\163"+
    "\7\0\10\163\1\0\2\163\11\0\7\163\1\0\1\163"+
    "\4\0\11\163\1\176\15\163\7\0\10\163\1\0\2\163"+
    "\11\0\7\163\1\0\1\163\4\0\12\163\1\167\14\163"+
    "\7\0\10\163\1\0\2\163\11\0\7\163\1\0\1\163"+
    "\4\0\3\163\1\201\23\163\7\0\10\163\1\0\2\163"+
    "\11\0\7\163\1\0\1\163\4\0\7\163\1\202\17\163"+
    "\7\0\10\163\1\0\2\163\11\0\7\163\1\0\1\163"+
    "\4\0\21\163\1\173\5\163\7\0\10\163\1\0\2\163"+
    "\11\0\7\163\1\0\1\163\4\0\22\163\1\173\4\163"+
    "\7\0\10\163\1\0\2\163\11\0\7\163\1\0\1\163"+
    "\4\0\4\163\1\203\22\163\7\0\10\163\1\0\2\163"+
    "\11\0\7\163\1\0\1\163\4\0\7\163\1\204\17\163"+
    "\7\0\10\163\1\0\2\163\11\0\7\163\1\0\1\163"+
    "\4\0\1\205\26\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\12\163\1\176\14\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\1\163\1\206\25\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\10\163\1\207\16\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\25\163\1\167\1\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\17\163\1\210\7\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\6\163\1\211\20\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\12\163\1\212\14\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\6\163\1\213\20\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\11\163\1\214\15\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\11\163\1\173\15\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\1\163\1\215\25\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\7\163\1\216\17\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\12\163\1\217\14\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\13\163\1\220\13\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\10\163\1\221\16\163\7\0"+
    "\10\163\1\0\2\163\11\0\7\163\1\0\1\163\4\0"+
    "\1\163\1\176\25\163\7\0\10\163\1\0\2\163\11\0"+
    "\7\163\1\0\1\163\4\0\1\163\1\167\25\163\7\0"+
    "\10\163\1\0\2\163\14\0\2\142\46\0\7\142\4\0"+
    "\23\143\1\0\1\143\1\0\51\143\24\0\1\222\76\0"+
    "\1\223\76\0\1\224\76\0\1\225\76\0\1\226\63\0"+
    "\7\227\1\0\1\227\4\0\27\227\7\0\10\227\1\0"+
    "\2\227\14\0\2\164\1\0\1\230\1\0\1\231\10\0"+
    "\1\231\11\0\1\232\1\0\1\230\15\0\7\164\1\232"+
    "\71\0\1\233\21\0\7\227\1\0\1\227\4\0\1\234"+
    "\26\227\7\0\10\227\1\0\2\227\11\0\7\227\1\0"+
    "\1\227\4\0\11\227\1\235\4\227\1\235\10\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\10\227\1\236\16\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\4\227\1\237\22\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\4\227\1\235\22\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\6\227\1\240\20\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\11\227\1\241\15\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\10\227\1\235\16\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\6\227\1\242\20\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\4\227\1\243\22\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\5\227\1\244\21\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\7\227\1\235\17\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\14\227\1\245\12\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\1\227\1\235\25\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\6\227\1\246\20\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\1\227\1\247\25\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\7\227\1\250\17\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\12\227\1\251\14\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\15\227\1\235\11\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\11\227\1\251\15\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\14\227\1\251\12\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\17\227\1\252\7\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\13\227\1\253\13\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\6\227\1\243\20\227\7\0"+
    "\10\227\1\0\2\227\11\0\7\227\1\0\1\227\4\0"+
    "\23\227\1\254\3\227\7\0\10\227\1\0\2\227\11\0"+
    "\7\227\1\0\1\227\4\0\5\227\1\255\5\227\1\256"+
    "\13\227\7\0\10\227\1\0\2\227\11\0\7\257\1\0"+
    "\1\257\4\0\27\257\7\0\10\257\1\0\2\257\14\0"+
    "\2\260\4\0\1\261\33\0\1\261\5\0\7\260\73\0"+
    "\1\262\20\0\7\257\1\0\1\257\4\0\2\257\1\263"+
    "\24\257\7\0\10\257\1\0\2\257\11\0\7\257\1\0"+
    "\1\257\4\0\1\257\1\264\25\257\7\0\10\257\1\0"+
    "\2\257\11\0\7\257\1\0\1\257\4\0\1\265\26\257"+
    "\7\0\10\257\1\0\2\257\11\0\7\257\1\0\1\257"+
    "\4\0\7\257\1\263\17\257\7\0\10\257\1\0\2\257"+
    "\11\0\7\257\1\0\1\257\4\0\4\257\1\266\22\257"+
    "\7\0\10\257\1\0\2\257\11\0\7\257\1\0\1\257"+
    "\4\0\7\257\1\267\17\257\7\0\10\257\1\0\2\257"+
    "\11\0\7\257\1\0\1\257\4\0\11\257\1\263\15\257"+
    "\7\0\10\257\1\0\2\257\11\0\7\257\1\0\1\257"+
    "\4\0\6\257\1\270\20\257\7\0\10\257\1\0\2\257"+
    "\11\0\7\257\1\0\1\257\4\0\12\257\1\263\14\257"+
    "\7\0\10\257\1\0\2\257\11\0\7\257\1\0\1\257"+
    "\4\0\7\257\1\271\17\257\7\0\10\257\1\0\2\257"+
    "\11\0\7\257\1\0\1\257\4\0\12\257\1\272\14\257"+
    "\7\0\10\257\1\0\2\257\11\0\7\257\1\0\1\257"+
    "\4\0\12\257\1\273\14\257\7\0\10\257\1\0\2\257"+
    "\11\0\7\257\1\0\1\257\4\0\4\257\1\263\22\257"+
    "\7\0\10\257\1\0\2\257\11\0\7\257\1\0\1\257"+
    "\4\0\1\274\26\257\7\0\10\257\1\0\2\257\11\0"+
    "\7\257\1\0\1\257\4\0\12\257\1\275\14\257\7\0"+
    "\10\257\1\0\2\257\11\0\7\257\1\0\1\257\4\0"+
    "\4\257\1\264\22\257\7\0\10\257\1\0\2\257\11\0"+
    "\7\257\1\0\1\257\4\0\1\257\1\276\25\257\7\0"+
    "\10\257\1\0\2\257\11\0\7\257\1\0\1\257\4\0"+
    "\4\257\1\277\22\257\7\0\10\257\1\0\2\257\11\0"+
    "\7\300\1\0\1\300\4\0\27\300\7\0\10\300\1\0"+
    "\2\300\14\0\2\260\1\0\1\230\24\0\1\232\1\0"+
    "\1\230\15\0\7\260\1\232\17\0\2\260\46\0\7\260"+
    "\72\0\1\301\21\0\7\300\1\0\1\300\4\0\16\300"+
    "\1\302\10\300\7\0\10\300\1\0\2\300\11\0\7\300"+
    "\1\0\1\300\4\0\12\300\1\302\14\300\7\0\10\300"+
    "\1\0\2\300\11\0\7\300\1\0\1\300\4\0\1\303"+
    "\26\300\7\0\10\300\1\0\2\300\11\0\7\300\1\0"+
    "\1\300\4\0\4\300\1\302\22\300\7\0\10\300\1\0"+
    "\2\300\11\0\7\300\1\0\1\300\4\0\7\300\1\304"+
    "\17\300\7\0\10\300\1\0\2\300\11\0\7\300\1\0"+
    "\1\300\4\0\5\300\1\302\21\300\7\0\10\300\1\0"+
    "\2\300\11\0\7\300\1\0\1\300\4\0\6\300\1\305"+
    "\20\300\7\0\10\300\1\0\2\300\11\0\7\300\1\0"+
    "\1\300\4\0\10\300\1\302\16\300\7\0\10\300\1\0"+
    "\2\300\11\0\7\300\1\0\1\300\4\0\1\300\1\306"+
    "\25\300\7\0\10\300\1\0\2\300\11\0\7\300\1\0"+
    "\1\300\4\0\6\300\1\307\20\300\7\0\10\300\1\0"+
    "\2\300\11\0\7\300\1\0\1\300\4\0\1\310\26\300"+
    "\7\0\10\300\1\0\2\300\11\0\7\300\1\0\1\300"+
    "\4\0\16\300\1\311\10\300\7\0\10\300\1\0\2\300"+
    "\11\0\7\312\1\0\1\312\4\0\27\312\7\0\10\312"+
    "\1\0\2\312\70\0\1\313\17\0\7\312\1\0\1\312"+
    "\4\0\7\312\1\314\17\312\7\0\10\312\1\0\2\312"+
    "\11\0\7\312\1\0\1\312\4\0\12\312\1\314\14\312"+
    "\7\0\10\312\1\0\2\312\11\0\7\312\1\0\1\312"+
    "\4\0\7\312\1\315\17\312\7\0\10\312\1\0\2\312"+
    "\11\0\7\312\1\0\1\312\4\0\16\312\1\314\10\312"+
    "\7\0\10\312\1\0\2\312\11\0\7\312\1\0\1\312"+
    "\4\0\10\312\1\316\16\312\7\0\10\312\1\0\2\312"+
    "\11\0\7\312\1\0\1\312\4\0\24\312\1\314\2\312"+
    "\7\0\10\312\1\0\2\312\11\0\7\312\1\0\1\312"+
    "\4\0\21\312\1\317\5\312\7\0\10\312\1\0\2\312"+
    "\11\0\7\320\1\0\1\320\4\0\27\320\7\0\10\320"+
    "\1\0\2\320\71\0\1\321\16\0\7\320\1\0\1\320"+
    "\4\0\12\320\1\322\14\320\7\0\10\320\1\0\2\320"+
    "\11\0\7\320\1\0\1\320\4\0\7\320\1\322\17\320"+
    "\7\0\10\320\1\0\2\320\11\0\7\320\1\0\1\320"+
    "\4\0\1\320\1\323\25\320\7\0\10\320\1\0\2\320"+
    "\11\0\7\324\1\0\1\324\4\0\27\324\7\0\10\324"+
    "\1\0\2\324\72\0\1\325\15\0\7\324\1\0\1\324"+
    "\4\0\4\324\1\326\22\324\7\0\10\324\1\0\2\324"+
    "\11\0\7\327\1\0\1\327\4\0\27\327\7\0\10\327"+
    "\1\0\2\327\66\0\1\330\21\0\7\331\1\0\1\331"+
    "\4\0\27\331\7\0\10\331\1\0\2\331\70\0\1\332"+
    "\17\0\7\333\1\0\1\333\4\0\27\333\7\0\10\333"+
    "\1\0\2\333\11\0\7\334\1\0\1\334\4\0\27\334"+
    "\7\0\10\334\1\0\2\334\11\0\7\335\1\0\1\335"+
    "\4\0\27\335\7\0\10\335\1\0\2\335\11\0\7\336"+
    "\1\0\1\336\4\0\27\336\7\0\10\336\1\0\2\336"+
    "\11\0\7\337\1\0\1\337\4\0\27\337\7\0\10\337"+
    "\1\0\2\337\11\0\7\340\1\0\1\340\4\0\27\340"+
    "\7\0\10\340\1\0\2\340\11\0\7\341\1\0\1\341"+
    "\4\0\27\341\7\0\10\341\1\0\2\341\11\0\7\342"+
    "\1\0\1\342\4\0\27\342\7\0\10\342\1\0\2\342"+
    "\11\0\7\343\1\0\1\343\4\0\27\343\7\0\10\343"+
    "\1\0\2\343\11\0\7\344\1\0\1\344\4\0\27\344"+
    "\7\0\10\344\1\0\2\344\11\0\7\345\1\0\1\345"+
    "\4\0\27\345\7\0\10\345\1\0\2\345\11\0\7\346"+
    "\1\0\1\346\4\0\27\346\7\0\10\346\1\0\2\346"+
    "\11\0\7\347\1\0\1\347\4\0\27\347\7\0\10\347"+
    "\1\0\2\347\11\0\7\350\1\0\1\350\4\0\27\350"+
    "\7\0\10\350\1\0\2\350\11\0\7\351\1\0\1\351"+
    "\4\0\27\351\7\0\10\351\1\0\2\351\11\0\7\352"+
    "\1\0\1\352\4\0\27\352\7\0\10\352\1\0\2\352"+
    "\11\0\7\353\1\0\1\353\4\0\27\353\7\0\10\353"+
    "\1\0\2\353\11\0\7\354\1\0\1\354\4\0\27\354"+
    "\7\0\10\354\1\0\2\354\11\0\7\355\1\0\1\355"+
    "\4\0\27\355\7\0\10\355\1\0\2\355\11\0\7\356"+
    "\1\0\1\356\4\0\27\356\7\0\10\356\1\0\2\356"+
    "\11\0\7\357\1\0\1\357\4\0\27\357\7\0\10\357"+
    "\1\0\2\357\11\0\7\360\1\0\1\360\4\0\27\360"+
    "\7\0\10\360\1\0\2\360\11\0\7\361\1\0\1\361"+
    "\4\0\27\361\7\0\10\361\1\0\2\361\11\0\7\362"+
    "\1\0\1\362\4\0\27\362\7\0\10\362\1\0\2\362"+
    "\11\0\7\363\1\0\1\363\4\0\27\363\7\0\10\363"+
    "\1\0\2\363\11\0\7\364\1\0\1\364\4\0\27\364"+
    "\7\0\10\364\1\0\2\364\11\0\7\365\1\0\1\365"+
    "\4\0\27\365\7\0\10\365\1\0\2\365\11\0\7\366"+
    "\1\0\1\366\4\0\27\366\7\0\10\366\1\0\2\366"+
    "\11\0\7\367\1\0\1\367\4\0\27\367\7\0\10\367"+
    "\1\0\2\367\11\0\7\370\1\0\1\370\4\0\27\370"+
    "\7\0\10\370\1\0\2\370\11\0\7\371\1\0\1\371"+
    "\4\0\27\371\7\0\10\371\1\0\2\371\11\0\7\372"+
    "\1\0\1\372\4\0\27\372\7\0\10\372\1\0\2\372"+
    "\11\0\7\373\1\0\1\373\4\0\27\373\7\0\10\373"+
    "\1\0\2\373\11\0\7\374\1\0\1\374\4\0\27\374"+
    "\7\0\10\374\1\0\2\374\11\0\7\375\1\0\1\375"+
    "\4\0\27\375\7\0\10\375\1\0\2\375\11\0\7\376"+
    "\1\0\1\376\4\0\27\376\7\0\10\376\1\0\2\376"+
    "\11\0\7\377\1\0\1\377\4\0\27\377\7\0\10\377"+
    "\1\0\2\377\11\0\7\u0100\1\0\1\u0100\4\0\27\u0100"+
    "\7\0\10\u0100\1\0\2\u0100\11\0\7\u0101\1\0\1\u0101"+
    "\4\0\27\u0101\7\0\10\u0101\1\0\2\u0101\11\0\7\u0102"+
    "\1\0\1\u0102\4\0\27\u0102\7\0\10\u0102\1\0\2\u0102"+
    "\11\0\7\u0103\1\0\1\u0103\4\0\27\u0103\7\0\10\u0103"+
    "\1\0\2\u0103\11\0\7\u0104\1\0\1\u0104\4\0\27\u0104"+
    "\7\0\10\u0104\1\0\2\u0104\11\0\7\u0105\1\0\1\u0105"+
    "\4\0\27\u0105\7\0\10\u0105\1\0\2\u0105\11\0\7\u0106"+
    "\1\0\1\u0106\4\0\27\u0106\7\0\10\u0106\1\0\2\u0106"+
    "\11\0\7\u0107\1\0\1\u0107\4\0\27\u0107\7\0\10\u0107"+
    "\1\0\2\u0107\11\0\7\u0108\1\0\1\u0108\4\0\27\u0108"+
    "\7\0\10\u0108\1\0\2\u0108\11\0\7\u0109\1\0\1\u0109"+
    "\4\0\27\u0109\7\0\10\u0109\1\0\2\u0109\11\0\7\u010a"+
    "\1\0\1\u010a\4\0\27\u010a\7\0\10\u010a\1\0\2\u010a"+
    "\11\0\7\u010b\1\0\1\u010b\4\0\27\u010b\7\0\10\u010b"+
    "\1\0\2\u010b\11\0\7\u010c\1\0\1\u010c\4\0\27\u010c"+
    "\7\0\10\u010c\1\0\2\u010c\11\0\7\u010d\1\0\1\u010d"+
    "\4\0\27\u010d\7\0\10\u010d\1\0\2\u010d\11\0\7\u010e"+
    "\1\0\1\u010e\4\0\27\u010e\7\0\10\u010e\1\0\2\u010e"+
    "\11\0\7\u010f\1\0\1\u010f\4\0\27\u010f\7\0\10\u010f"+
    "\1\0\2\u010f\11\0\7\u0110\1\0\1\u0110\4\0\27\u0110"+
    "\7\0\10\u0110\1\0\2\u0110\11\0\7\u0111\1\0\1\u0111"+
    "\4\0\27\u0111\7\0\10\u0111\1\0\2\u0111\11\0\7\u0112"+
    "\1\0\1\u0112\4\0\27\u0112\7\0\10\u0112\1\0\2\u0112"+
    "\11\0\7\u0113\1\0\1\u0113\4\0\27\u0113\7\0\10\u0113"+
    "\1\0\2\u0113\11\0\7\u0114\1\0\1\u0114\4\0\27\u0114"+
    "\7\0\10\u0114\1\0\2\u0114\11\0\7\u0115\1\0\1\u0115"+
    "\4\0\27\u0115\7\0\10\u0115\1\0\2\u0115\11\0\7\u0116"+
    "\1\0\1\u0116\4\0\27\u0116\7\0\10\u0116\1\0\2\u0116"+
    "\11\0\7\u0117\1\0\1\u0117\4\0\27\u0117\7\0\10\u0117"+
    "\1\0\2\u0117\11\0\7\u0118\1\0\1\u0118\4\0\27\u0118"+
    "\7\0\10\u0118\1\0\2\u0118\11\0\7\u0119\1\0\1\u0119"+
    "\4\0\27\u0119\7\0\10\u0119\1\0\2\u0119\11\0\7\u011a"+
    "\1\0\1\u011a\4\0\27\u011a\7\0\10\u011a\1\0\2\u011a"+
    "\11\0\7\u011b\1\0\1\u011b\4\0\27\u011b\7\0\10\u011b"+
    "\1\0\2\u011b\11\0\7\u011c\1\0\1\u011c\4\0\27\u011c"+
    "\7\0\10\u011c\1\0\2\u011c\11\0\7\u011d\1\0\1\u011d"+
    "\4\0\27\u011d\7\0\10\u011d\1\0\2\u011d\11\0\7\u011e"+
    "\1\0\1\u011e\4\0\27\u011e\7\0\10\u011e\1\0\2\u011e"+
    "\11\0\7\u011f\1\0\1\u011f\4\0\27\u011f\7\0\10\u011f"+
    "\1\0\2\u011f\11\0\7\u0120\1\0\1\u0120\4\0\27\u0120"+
    "\7\0\10\u0120\1\0\2\u0120\11\0\7\u0121\1\0\1\u0121"+
    "\4\0\27\u0121\7\0\10\u0121\1\0\2\u0121\11\0\7\u0122"+
    "\1\0\1\u0122\4\0\27\u0122\7\0\10\u0122\1\0\2\u0122"+
    "\11\0\7\u0123\1\0\1\u0123\4\0\27\u0123\7\0\10\u0123"+
    "\1\0\2\u0123\11\0\7\u0124\1\0\1\u0124\4\0\27\u0124"+
    "\7\0\10\u0124\1\0\2\u0124\11\0\7\u0125\1\0\1\u0125"+
    "\4\0\27\u0125\7\0\10\u0125\1\0\2\u0125\11\0\7\u0126"+
    "\1\0\1\u0126\4\0\27\u0126\7\0\10\u0126\1\0\2\u0126"+
    "\11\0\7\u0127\1\0\1\u0127\4\0\27\u0127\7\0\10\u0127"+
    "\1\0\2\u0127\11\0\7\u0128\1\0\1\u0128\4\0\27\u0128"+
    "\7\0\10\u0128\1\0\2\u0128\11\0\7\u0129\1\0\1\u0129"+
    "\4\0\27\u0129\7\0\10\u0129\1\0\2\u0129\11\0\7\u012a"+
    "\1\0\1\u012a\4\0\27\u012a\7\0\10\u012a\1\0\2\u012a"+
    "\11\0\7\u012b\1\0\1\u012b\4\0\27\u012b\7\0\10\u012b"+
    "\1\0\2\u012b\11\0\7\u012c\1\0\1\u012c\4\0\27\u012c"+
    "\7\0\10\u012c\1\0\2\u012c\11\0\7\u012d\1\0\1\u012d"+
    "\4\0\27\u012d\7\0\10\u012d\1\0\2\u012d\11\0\7\u012e"+
    "\1\0\1\u012e\4\0\27\u012e\7\0\10\u012e\1\0\2\u012e"+
    "\11\0\7\u012f\1\0\1\u012f\4\0\27\u012f\7\0\10\u012f"+
    "\1\0\2\u012f\11\0\7\u0130\1\0\1\u0130\4\0\27\u0130"+
    "\7\0\10\u0130\1\0\2\u0130\11\0\7\u0131\1\0\1\u0131"+
    "\4\0\27\u0131\7\0\10\u0131\1\0\2\u0131\11\0\7\u0132"+
    "\1\0\1\u0132\4\0\27\u0132\7\0\10\u0132\1\0\2\u0132"+
    "\11\0\7\u0133\1\0\1\u0133\4\0\27\u0133\7\0\10\u0133"+
    "\1\0\2\u0133\11\0\7\u0134\1\0\1\u0134\4\0\27\u0134"+
    "\7\0\10\u0134\1\0\2\u0134\11\0\7\u0135\1\0\1\u0135"+
    "\4\0\27\u0135\7\0\10\u0135\1\0\2\u0135\11\0\7\u0136"+
    "\1\0\1\u0136\4\0\27\u0136\7\0\10\u0136\1\0\2\u0136"+
    "\11\0\7\u0137\1\0\1\u0137\4\0\27\u0137\7\0\10\u0137"+
    "\1\0\2\u0137\11\0\7\u0138\1\0\1\u0138\4\0\27\u0138"+
    "\7\0\10\u0138\1\0\2\u0138\11\0\7\u0139\1\0\1\u0139"+
    "\4\0\27\u0139\7\0\10\u0139\1\0\2\u0139\11\0\7\u013a"+
    "\1\0\1\u013a\4\0\27\u013a\7\0\10\u013a\1\0\2\u013a"+
    "\11\0\7\u013b\1\0\1\u013b\4\0\27\u013b\7\0\10\u013b"+
    "\1\0\2\u013b\11\0\7\u013c\1\0\1\u013c\4\0\27\u013c"+
    "\7\0\10\u013c\1\0\2\u013c\11\0\7\u013d\1\0\1\u013d"+
    "\4\0\27\u013d\7\0\10\u013d\1\0\2\u013d\11\0\7\u013e"+
    "\1\0\1\u013e\4\0\27\u013e\7\0\10\u013e\1\0\2\u013e"+
    "\11\0\7\u013f\1\0\1\u013f\4\0\27\u013f\7\0\10\u013f"+
    "\1\0\2\u013f\11\0\7\u0140\1\0\1\u0140\4\0\27\u0140"+
    "\7\0\10\u0140\1\0\2\u0140\11\0\7\u0141\1\0\1\u0141"+
    "\4\0\27\u0141\7\0\10\u0141\1\0\2\u0141\11\0\7\u0142"+
    "\1\0\1\u0142\4\0\27\u0142\7\0\10\u0142\1\0\2\u0142"+
    "\11\0\7\u0143\1\0\1\u0143\4\0\27\u0143\7\0\10\u0143"+
    "\1\0\2\u0143\11\0\7\u0144\1\0\1\u0144\4\0\27\u0144"+
    "\7\0\10\u0144\1\0\2\u0144\11\0\7\u0145\1\0\1\u0145"+
    "\4\0\27\u0145\7\0\10\u0145\1\0\2\u0145\11\0\7\u0146"+
    "\1\0\1\u0146\4\0\27\u0146\7\0\10\u0146\1\0\2\u0146"+
    "\11\0\7\u0147\1\0\1\u0147\4\0\27\u0147\7\0\10\u0147"+
    "\1\0\2\u0147\11\0\7\u0148\1\0\1\u0148\4\0\27\u0148"+
    "\7\0\10\u0148\1\0\2\u0148\11\0\7\u0149\1\0\1\u0149"+
    "\4\0\27\u0149\7\0\10\u0149\1\0\2\u0149\11\0\7\u014a"+
    "\1\0\1\u014a\4\0\27\u014a\7\0\10\u014a\1\0\2\u014a"+
    "\11\0\7\u014b\1\0\1\u014b\4\0\27\u014b\7\0\10\u014b"+
    "\1\0\2\u014b\11\0\7\u014c\1\0\1\u014c\4\0\27\u014c"+
    "\7\0\10\u014c\1\0\2\u014c\11\0\7\u014d\1\0\1\u014d"+
    "\4\0\27\u014d\7\0\10\u014d\1\0\2\u014d\11\0\7\u014e"+
    "\1\0\1\u014e\4\0\27\u014e\7\0\10\u014e\1\0\2\u014e";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18585];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\1\1\1\11\6\1\2\11"+
    "\30\1\1\11\1\1\1\11\3\1\1\11\6\1\1\0"+
    "\1\11\2\0\46\1\1\11\2\1\10\11\5\1\2\0"+
    "\2\1\1\0\34\1\5\11\1\1\1\11\1\0\1\11"+
    "\1\0\25\1\2\0\16\1\1\0\11\1\1\0\5\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\11\163\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new PclSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new PclSymbol(type, yyline+1, yycolumn+1, value);
  }

  private void printError(String type){
    System.out.println("Error: line:" + (yyline+1) + " col:" + (yycolumn+1) + " type:" + type);
  }

  public java_cup.runtime.Symbol custom_debug_next_token() throws java.io.IOException {
      java_cup.runtime.Symbol s = next_token();
      //System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
      return s;
  }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2894) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              printError("Unterminated string at end of file"); return symbol(EOF);
            }
            case 335: break;
            case CHARLITERAL: {
              printError("Unterminated character at end of file"); return symbol(EOF);
            }
            case 336: break;
            case COMMENT: {
              printError("Unterminated comment at end of file"); return symbol(EOF);
            }
            case 337: break;
            default:
              {
                return symbol(EOF);
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { printError("Illegal character \""+yytext()+
                                                              "\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
          case 32: break;
          case 2: 
            { /* ignore */
            }
          case 33: break;
          case 3: 
            { return symbol(OPERADOR,yytext());
            }
          case 34: break;
          case 4: 
            { return symbol(IDENTIFICADOR, yytext());
            }
          case 35: break;
          case 5: 
            { return symbol(INTEGER_LITERAL, new Integer(yytext()));
            }
          case 36: break;
          case 6: 
            { yybegin(STRING); string.setLength(0);
            }
          case 37: break;
          case 7: 
            { yybegin(CHARLITERAL);
            }
          case 38: break;
          case 8: 
            { yybegin(COMMENT);
            }
          case 39: break;
          case 9: 
            { string.append( yytext() );
            }
          case 40: break;
          case 10: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          case 41: break;
          case 11: 
            { printError("Unterminated character literal at end of line");
            }
          case 42: break;
          case 12: 
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 43: break;
          case 13: 
            { return symbol(PALABRA_RESERVADA,yytext());
            }
          case 44: break;
          case 14: 
            { return symbol(CHARACTER_LITERAL, yytext());
            }
          case 45: break;
          case 15: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL,yytext().charAt(0));
            }
          case 46: break;
          case 16: 
            { printError("Illegal escape sequence \""+yytext()+"\"");
            }
          case 47: break;
          case 17: 
            { string.append( '\"' );
            }
          case 48: break;
          case 18: 
            { string.append( '\'' );
            }
          case 49: break;
          case 19: 
            { string.append( '\\' );
            }
          case 50: break;
          case 20: 
            { string.append( '\b' );
            }
          case 51: break;
          case 21: 
            { string.append( '\t' );
            }
          case 52: break;
          case 22: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 53: break;
          case 23: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 54: break;
          case 24: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          case 55: break;
          case 25: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          case 56: break;
          case 26: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          case 57: break;
          case 27: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          case 58: break;
          case 28: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          case 59: break;
          case 29: 
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 60: break;
          case 30: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 61: break;
          case 31: 
            { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
