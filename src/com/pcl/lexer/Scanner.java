/* The following code was generated by JFlex 1.6.1 */

package com.pcl.lexer;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/kevinah95/IdeaProjects/pcl-compiler/src/com/pcl/lexer/pcl.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\3\1\2\1\76\1\77\1\1\16\13\4\0\1\3\1\0"+
    "\1\23\1\73\1\12\2\0\1\24\1\4\1\6\1\5\1\56\1\55"+
    "\1\22\1\20\1\11\1\14\1\64\1\63\1\70\1\65\1\15\1\71"+
    "\1\66\1\67\1\15\1\62\1\55\1\61\1\60\1\57\2\0\1\26"+
    "\1\31\1\41\1\44\1\32\1\46\1\33\1\43\1\34\1\12\1\51"+
    "\1\37\1\52\1\35\1\36\1\50\1\12\1\27\1\42\1\40\1\47"+
    "\1\53\1\45\1\54\1\30\1\12\1\55\1\25\1\55\1\0\1\12"+
    "\1\0\1\12\1\74\1\12\1\72\1\21\1\17\5\12\1\16\7\12"+
    "\1\75\6\12\1\7\1\0\1\10\1\0\6\13\1\100\32\13\2\0"+
    "\4\12\4\0\1\12\2\0\1\13\7\0\1\12\4\0\1\12\5\0"+
    "\27\12\1\0\37\12\1\0\u01ca\12\4\0\14\12\16\0\5\12\7\0"+
    "\1\12\1\0\1\12\21\0\160\13\5\12\1\0\2\12\2\0\4\12"+
    "\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0\123\12"+
    "\1\0\213\12\1\0\5\13\2\0\236\12\11\0\46\12\2\0\1\12"+
    "\7\0\47\12\7\0\1\12\1\0\55\13\1\0\1\13\1\0\2\13"+
    "\1\0\2\13\1\0\1\13\10\0\33\12\5\0\3\12\15\0\5\13"+
    "\6\0\1\12\4\0\13\13\5\0\53\12\37\13\4\0\2\12\1\13"+
    "\143\12\1\0\1\12\10\13\1\0\6\13\2\12\2\13\1\0\4\13"+
    "\2\12\12\13\3\12\2\0\1\12\17\0\1\13\1\12\1\13\36\12"+
    "\33\13\2\0\131\12\13\13\1\12\16\0\12\13\41\12\11\13\2\12"+
    "\4\0\1\12\5\0\26\12\4\13\1\12\11\13\1\12\3\13\1\12"+
    "\5\13\22\0\31\12\3\13\104\0\1\12\1\0\13\12\67\0\33\13"+
    "\1\0\4\13\66\12\3\13\1\12\22\13\1\12\7\13\12\12\2\13"+
    "\2\0\12\13\1\0\7\12\1\0\7\12\1\0\3\13\1\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12"+
    "\2\0\1\13\1\12\7\13\2\0\2\13\2\0\3\13\1\12\10\0"+
    "\1\13\4\0\2\12\1\0\3\12\2\13\2\0\12\13\4\12\7\0"+
    "\1\12\5\0\3\13\1\0\6\12\4\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\13\1\0"+
    "\5\13\4\0\2\13\2\0\3\13\3\0\1\13\7\0\4\12\1\0"+
    "\1\12\7\0\14\13\3\12\1\13\13\0\3\13\1\0\11\12\1\0"+
    "\3\12\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0"+
    "\1\13\1\12\10\13\1\0\3\13\1\0\3\13\2\0\1\12\17\0"+
    "\2\12\2\13\2\0\12\13\1\0\1\12\17\0\3\13\1\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12"+
    "\2\0\1\13\1\12\7\13\2\0\2\13\2\0\3\13\10\0\2\13"+
    "\4\0\2\12\1\0\3\12\2\13\2\0\12\13\1\0\1\12\20\0"+
    "\1\13\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12"+
    "\4\0\5\13\3\0\3\13\1\0\4\13\2\0\1\12\6\0\1\13"+
    "\16\0\12\13\11\0\1\12\7\0\3\13\1\0\10\12\1\0\3\12"+
    "\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12\7\13\1\0"+
    "\3\13\1\0\4\13\7\0\2\13\1\0\2\12\6\0\2\12\2\13"+
    "\2\0\12\13\22\0\2\13\1\0\10\12\1\0\3\12\1\0\27\12"+
    "\1\0\12\12\1\0\5\12\2\0\1\13\1\12\7\13\1\0\3\13"+
    "\1\0\4\13\7\0\2\13\7\0\1\12\1\0\2\12\2\13\2\0"+
    "\12\13\1\0\2\12\17\0\2\13\1\0\10\12\1\0\3\12\1\0"+
    "\51\12\2\0\1\12\7\13\1\0\3\13\1\0\4\13\1\12\10\0"+
    "\1\13\10\0\2\12\2\13\2\0\12\13\12\0\6\12\2\0\2\13"+
    "\1\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0\7\12"+
    "\3\0\1\13\4\0\6\13\1\0\1\13\1\0\10\13\22\0\2\13"+
    "\15\0\60\12\1\13\2\12\7\13\4\0\10\12\10\13\1\0\12\13"+
    "\47\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12"+
    "\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12"+
    "\2\0\2\12\1\0\4\12\1\13\2\12\6\13\1\0\2\13\1\12"+
    "\2\0\5\12\1\0\1\12\1\0\6\13\2\0\12\13\2\0\4\12"+
    "\40\0\1\12\27\0\2\13\6\0\12\13\13\0\1\13\1\0\1\13"+
    "\1\0\1\13\4\0\2\13\10\12\1\0\44\12\4\0\24\13\1\0"+
    "\2\13\5\12\13\13\1\0\44\13\11\0\1\13\71\0\53\12\24\13"+
    "\1\12\12\13\6\0\6\12\4\13\4\12\3\13\1\12\3\13\2\12"+
    "\7\13\3\12\4\13\15\12\14\13\1\12\17\13\2\0\46\12\1\0"+
    "\1\12\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12\2\0"+
    "\7\12\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12\2\0"+
    "\41\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0"+
    "\17\12\1\0\71\12\1\0\4\12\2\0\103\12\2\0\3\13\40\0"+
    "\20\12\20\0\125\12\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0"+
    "\113\12\3\0\3\12\17\0\15\12\1\0\4\12\3\13\13\0\22\12"+
    "\3\13\13\0\22\12\2\13\14\0\15\12\1\0\3\12\1\0\2\13"+
    "\14\0\64\12\40\13\3\0\1\12\3\0\2\12\1\13\2\0\12\13"+
    "\41\0\3\13\2\0\12\13\6\0\130\12\10\0\51\12\1\13\1\12"+
    "\5\0\106\12\12\0\35\12\3\0\14\13\4\0\14\13\12\0\12\13"+
    "\36\12\2\0\5\12\13\0\54\12\4\0\21\13\7\12\2\13\6\0"+
    "\12\13\46\0\27\12\5\13\4\0\65\12\12\13\1\0\35\13\2\0"+
    "\13\13\6\0\12\13\15\0\1\12\130\0\5\13\57\12\21\13\7\12"+
    "\4\0\12\13\21\0\11\13\14\0\3\13\36\12\15\13\2\12\12\13"+
    "\54\12\16\13\14\0\44\12\24\13\10\0\12\13\3\0\3\12\12\13"+
    "\44\12\122\0\3\13\1\0\25\13\4\12\1\13\4\12\3\13\2\12"+
    "\11\0\300\12\47\13\25\0\4\13\u0116\12\2\0\6\12\2\0\46\12"+
    "\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12\3\0\3\12"+
    "\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12\5\0\3\12"+
    "\1\0\7\12\16\0\5\13\30\0\1\76\1\76\5\13\20\0\2\12"+
    "\23\0\1\12\13\0\5\13\5\0\6\13\1\0\1\12\15\0\1\12"+
    "\20\0\15\12\3\0\33\12\25\0\15\13\4\0\1\13\3\0\14\13"+
    "\21\0\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12"+
    "\6\0\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0\13\12"+
    "\2\0\4\12\5\0\5\12\4\0\1\12\21\0\51\12\u0a77\0\57\12"+
    "\1\0\57\12\1\0\205\12\6\0\4\12\3\13\2\12\14\0\46\12"+
    "\1\0\1\12\5\0\1\12\2\0\70\12\7\0\1\12\17\0\1\13"+
    "\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\40\13\57\0"+
    "\1\12\u01d5\0\3\12\31\0\11\12\6\13\1\0\5\12\2\0\5\12"+
    "\4\0\126\12\2\0\2\13\2\0\3\12\1\0\132\12\1\0\4\12"+
    "\5\0\51\12\3\0\136\12\21\0\33\12\65\0\20\12\u0200\0\u19b6\12"+
    "\112\0\u51cd\12\63\0\u048d\12\103\0\56\12\2\0\u010d\12\3\0\20\12"+
    "\12\13\2\12\24\0\57\12\1\13\4\0\12\13\1\0\31\12\7\0"+
    "\1\13\120\12\2\13\45\0\11\12\2\0\147\12\2\0\4\12\1\0"+
    "\4\12\14\0\13\12\115\0\12\12\1\13\3\12\1\13\4\12\1\13"+
    "\27\12\5\13\20\0\1\12\7\0\64\12\14\0\2\13\62\12\21\13"+
    "\13\0\12\13\6\0\22\13\6\12\3\0\1\12\4\0\12\13\34\12"+
    "\10\13\2\0\27\12\15\13\14\0\35\12\3\0\4\13\57\12\16\13"+
    "\16\0\1\12\12\13\46\0\51\12\16\13\11\0\3\12\1\13\10\12"+
    "\2\13\2\0\12\13\6\0\27\12\3\0\1\12\1\13\4\0\60\12"+
    "\1\13\1\12\3\13\2\12\2\13\5\12\2\13\1\12\1\13\1\12"+
    "\30\0\3\12\2\0\13\12\5\13\2\0\3\12\2\13\12\0\6\12"+
    "\2\0\6\12\2\0\6\12\11\0\7\12\1\0\7\12\221\0\43\12"+
    "\10\13\1\0\2\13\2\0\12\13\6\0\u2ba4\12\14\0\27\12\4\0"+
    "\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0\5\12\5\0"+
    "\1\12\1\13\12\12\1\0\15\12\1\0\5\12\1\0\1\12\1\0"+
    "\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0\100\12\2\0"+
    "\66\12\50\0\15\12\3\0\20\13\20\0\7\13\14\0\2\12\30\0"+
    "\3\12\31\0\1\12\6\0\5\12\1\0\207\12\2\0\1\13\4\0"+
    "\1\12\13\0\12\13\7\0\32\12\4\0\1\12\1\0\32\12\13\0"+
    "\131\12\3\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0"+
    "\2\12\3\0\2\12\22\0\3\13\4\0\14\12\1\0\32\12\1\0"+
    "\23\12\1\0\2\12\1\0\17\12\2\0\16\12\42\0\173\12\105\0"+
    "\65\12\210\0\1\13\202\0\35\12\3\0\61\12\57\0\37\12\21\0"+
    "\33\12\65\0\36\12\2\0\44\12\4\0\10\12\1\0\5\12\52\0"+
    "\236\12\2\0\12\13\u0356\0\6\12\2\0\1\12\1\0\54\12\1\0"+
    "\2\12\3\0\1\12\2\0\27\12\252\0\26\12\12\0\32\12\106\0"+
    "\70\12\6\0\2\12\100\0\1\12\3\13\1\0\2\13\5\0\4\13"+
    "\4\12\1\0\3\12\1\0\33\12\4\0\3\13\4\0\1\13\40\0"+
    "\35\12\203\0\66\12\12\0\26\12\12\0\23\12\215\0\111\12\u03b7\0"+
    "\3\13\65\12\17\13\37\0\12\13\20\0\3\13\55\12\13\13\2\0"+
    "\1\13\22\0\31\12\7\0\12\13\6\0\3\13\44\12\16\13\1\0"+
    "\12\13\100\0\3\13\60\12\16\13\4\12\13\0\12\13\u04a6\0\53\12"+
    "\15\13\10\0\12\13\u0936\0\u036f\12\221\0\143\12\u0b9d\0\u042f\12\u33d1\0"+
    "\u0239\12\u04c7\0\105\12\13\0\1\12\56\13\20\0\4\13\15\12\u4060\0"+
    "\2\12\u2163\0\5\13\3\0\26\13\2\0\7\13\36\0\4\13\224\0"+
    "\3\13\u01bb\0\125\12\1\0\107\12\1\0\2\12\2\0\1\12\2\0"+
    "\2\12\2\0\4\12\1\0\14\12\1\0\1\12\1\0\7\12\1\0"+
    "\101\12\1\0\4\12\2\0\10\12\1\0\7\12\1\0\34\12\1\0"+
    "\4\12\1\0\5\12\1\0\1\12\3\0\7\12\1\0\u0154\12\2\0"+
    "\31\12\1\0\31\12\1\0\37\12\1\0\31\12\1\0\37\12\1\0"+
    "\31\12\1\0\37\12\1\0\31\12\1\0\37\12\1\0\31\12\1\0"+
    "\10\12\2\0\62\13\u1600\0\4\12\1\0\33\12\1\0\2\12\1\0"+
    "\1\12\2\0\1\12\1\0\12\12\1\0\4\12\1\0\1\12\1\0"+
    "\1\12\6\0\1\12\4\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0\1\12\2\0"+
    "\4\12\1\0\7\12\1\0\4\12\1\0\4\12\1\0\1\12\1\0"+
    "\12\12\1\0\21\12\5\0\3\12\1\0\5\12\1\0\21\12\u1144\0"+
    "\ua6d7\12\51\0\u1035\12\13\0\336\12\u3fe2\0\u021e\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\13\36\0\140\13\200\0\360\13\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\3\3\1\1\1\3\1\4\2\5"+
    "\2\3\1\6\1\7\24\4\3\3\1\10\1\11\1\1"+
    "\1\10\1\1\2\12\1\1\2\0\1\2\1\4\1\13"+
    "\1\14\1\15\1\13\1\0\1\16\1\0\11\4\2\17"+
    "\2\4\1\3\13\4\1\17\14\4\1\10\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\27\1\30\5\21"+
    "\2\0\1\4\1\13\2\0\1\4\1\3\6\4\1\17"+
    "\16\4\1\17\4\4\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\0\1\2\1\4\1\0\1\4\1\17\22\4"+
    "\1\0\1\17\15\4\1\0\1\17\10\4\1\0\1\17"+
    "\4\4\1\0\1\17\2\4\1\0\1\17\1\4\1\0"+
    "\1\4\1\37\164\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\303\0\u0145\0\u0186"+
    "\0\303\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d"+
    "\0\303\0\303\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3"+
    "\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db"+
    "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\303\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\303"+
    "\0\u0aaa\0\u0aeb\0\u01c7\0\u0b2c\0\u0b6d\0\u0bae\0\303\0\303"+
    "\0\u0bef\0\u0c30\0\303\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75"+
    "\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0b6d\0\u0f3c"+
    "\0\u0f7d\0\u0b6d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u15d6\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\u1617\0\u1658\0\303\0\u1699\0\u16da\0\u171b"+
    "\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923"+
    "\0\u1964\0\u1860\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1860\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\u1ffe\0\u17de\0\u203f\0\u2080\0\u20c1\0\u203f"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1"+
    "\0\u2512\0\u2553\0\u2594\0\u2553\0\u25d5\0\u2616\0\u2657\0\u2698"+
    "\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u28e1\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67"+
    "\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2b2a\0\u2bac\0\u2bed\0\u2c2e"+
    "\0\u2c6f\0\u2cb0\0\u2c6f\0\u2cf1\0\u2d32\0\u2d73\0\u2d32\0\u2db4"+
    "\0\u2df5\0\u2e36\0\303\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b"+
    "\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183"+
    "\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b"+
    "\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593"+
    "\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b"+
    "\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3"+
    "\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"+
    "\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb"+
    "\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3"+
    "\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb"+
    "\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3"+
    "\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db"+
    "\0\u481c\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3"+
    "\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\4\1\15\1\16\2\14\1\17\1\14"+
    "\1\20\1\21\1\22\1\4\1\23\1\24\1\14\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\14\1\37\1\40\1\41\1\42\1\43\1\14"+
    "\1\44\1\45\1\46\1\11\1\47\1\50\1\11\1\51"+
    "\1\10\7\16\1\14\1\4\2\14\1\4\1\6\1\4"+
    "\23\52\1\53\1\52\1\54\45\52\1\55\5\52\1\56"+
    "\1\57\1\60\21\56\1\4\1\61\53\56\103\0\1\6"+
    "\103\0\1\62\153\0\1\11\20\0\10\63\1\6\70\63"+
    "\11\0\1\64\46\0\1\11\32\0\6\65\1\0\1\65"+
    "\4\0\27\65\6\0\10\65\1\0\2\65\2\0\1\65"+
    "\14\0\2\66\1\67\1\70\1\71\1\72\10\0\1\72"+
    "\4\0\1\67\4\0\1\73\1\0\1\70\14\0\7\66"+
    "\1\73\22\0\2\16\1\67\1\70\1\71\1\72\10\0"+
    "\1\72\4\0\1\67\4\0\1\73\1\0\1\70\14\0"+
    "\7\16\1\73\22\0\2\71\45\0\7\71\31\0\1\11"+
    "\35\0\1\11\2\0\1\74\27\0\6\65\1\0\1\65"+
    "\4\0\1\65\1\75\5\65\1\76\17\65\6\0\10\65"+
    "\1\0\2\65\2\0\1\65\12\0\6\65\1\0\1\65"+
    "\4\0\4\65\1\77\22\65\6\0\10\65\1\0\2\65"+
    "\2\0\1\65\12\0\6\65\1\0\1\65\4\0\2\65"+
    "\1\100\1\65\1\101\3\65\1\102\16\65\6\0\10\65"+
    "\1\0\2\65\2\0\1\65\12\0\6\65\1\0\1\65"+
    "\4\0\7\65\1\103\1\65\1\104\15\65\6\0\10\65"+
    "\1\0\2\65\2\0\1\65\12\0\6\65\1\0\1\65"+
    "\4\0\10\65\1\105\16\65\6\0\10\65\1\0\2\65"+
    "\2\0\1\65\12\0\6\65\1\0\1\65\4\0\7\65"+
    "\1\106\10\65\1\107\6\65\6\0\10\65\1\0\2\65"+
    "\2\0\1\65\12\0\6\65\1\0\1\65\4\0\6\65"+
    "\1\110\1\65\1\111\16\65\6\0\10\65\1\0\2\65"+
    "\2\0\1\65\12\0\6\65\1\0\1\65\4\0\1\65"+
    "\1\112\16\65\1\107\6\65\6\0\10\65\1\0\2\65"+
    "\2\0\1\65\12\0\6\65\1\0\1\65\4\0\1\113"+
    "\7\65\1\114\16\65\6\0\10\65\1\0\2\65\2\0"+
    "\1\65\12\0\6\65\1\0\1\65\4\0\1\65\1\115"+
    "\1\116\5\65\1\107\4\65\1\117\11\65\6\0\10\65"+
    "\1\0\2\65\2\0\1\65\12\0\6\65\1\0\1\65"+
    "\4\0\1\104\7\65\1\120\4\65\1\121\11\65\6\0"+
    "\10\65\1\0\2\65\2\0\1\65\12\0\6\65\1\0"+
    "\1\65\4\0\4\65\1\122\5\65\1\123\2\65\1\124"+
    "\11\65\6\0\10\65\1\0\2\65\2\0\1\65\12\0"+
    "\6\65\1\0\1\65\4\0\6\65\1\125\1\65\1\126"+
    "\16\65\6\0\10\65\1\0\2\65\2\0\1\65\12\0"+
    "\6\65\1\0\1\65\4\0\1\65\1\127\4\65\1\130"+
    "\6\65\1\131\11\65\6\0\10\65\1\0\2\65\2\0"+
    "\1\65\12\0\6\65\1\0\1\65\4\0\1\132\5\65"+
    "\1\133\1\65\1\134\10\65\1\135\5\65\6\0\10\65"+
    "\1\0\2\65\2\0\1\65\12\0\6\65\1\0\1\65"+
    "\4\0\7\65\1\136\17\65\6\0\10\65\1\0\2\65"+
    "\2\0\1\65\12\0\6\65\1\0\1\65\4\0\1\137"+
    "\1\140\25\65\6\0\10\65\1\0\2\65\2\0\1\65"+
    "\12\0\6\65\1\0\1\65\4\0\10\65\1\76\16\65"+
    "\6\0\10\65\1\0\2\65\2\0\1\65\12\0\6\65"+
    "\1\0\1\65\4\0\1\141\26\65\6\0\10\65\1\0"+
    "\2\65\2\0\1\65\12\0\6\65\1\0\1\65\4\0"+
    "\10\65\1\142\16\65\6\0\10\65\1\0\2\65\2\0"+
    "\1\65\56\0\1\11\1\0\1\11\77\0\1\10\1\11"+
    "\77\0\2\11\1\10\17\0\23\143\1\144\1\143\1\0"+
    "\53\143\1\145\2\0\20\145\1\146\1\147\1\150\46\145"+
    "\1\151\1\152\3\0\14\143\1\153\1\154\5\143\1\144"+
    "\1\143\1\0\35\143\7\154\7\143\24\0\1\155\56\0"+
    "\1\60\76\0\1\145\2\0\20\145\1\156\1\157\1\160"+
    "\46\145\1\161\1\162\3\0\5\163\1\164\73\163\1\64"+
    "\1\5\1\6\76\64\12\0\6\165\1\0\1\165\4\0"+
    "\27\165\6\0\10\165\1\0\2\165\2\0\1\165\14\0"+
    "\2\66\1\0\1\70\1\71\1\72\10\0\1\72\11\0"+
    "\1\73\1\0\1\70\14\0\7\66\1\73\22\0\2\71"+
    "\1\0\1\70\1\0\1\72\10\0\1\72\11\0\1\73"+
    "\1\0\1\70\14\0\7\71\1\73\22\0\2\166\4\0"+
    "\1\167\33\0\1\167\4\0\7\166\73\0\1\170\26\0"+
    "\6\165\1\0\1\165\4\0\1\165\1\171\25\165\6\0"+
    "\10\165\1\0\2\165\2\0\1\165\12\0\6\165\1\0"+
    "\1\165\4\0\16\165\1\172\10\165\6\0\10\165\1\0"+
    "\2\165\2\0\1\165\12\0\6\165\1\0\1\165\4\0"+
    "\1\173\12\165\1\174\6\165\1\175\4\165\6\0\10\165"+
    "\1\0\2\165\2\0\1\165\12\0\6\165\1\0\1\165"+
    "\4\0\12\165\1\176\14\165\6\0\10\165\1\0\2\165"+
    "\2\0\1\165\12\0\6\165\1\0\1\165\4\0\5\165"+
    "\1\177\21\165\6\0\10\165\1\0\2\165\2\0\1\165"+
    "\12\0\6\165\1\0\1\165\4\0\10\165\1\200\16\165"+
    "\6\0\10\165\1\0\2\165\2\0\1\165\12\0\6\165"+
    "\1\0\1\165\4\0\16\165\1\201\10\165\6\0\10\165"+
    "\1\0\2\165\2\0\1\165\12\0\6\165\1\0\1\165"+
    "\4\0\14\165\1\176\12\165\6\0\10\165\1\0\2\165"+
    "\2\0\1\165\12\0\6\165\1\0\1\165\4\0\12\165"+
    "\1\202\14\165\6\0\10\165\1\0\2\165\2\0\1\165"+
    "\12\0\6\165\1\0\1\165\4\0\11\165\1\203\1\201"+
    "\14\165\6\0\10\165\1\0\2\165\2\0\1\165\12\0"+
    "\6\165\1\0\1\165\4\0\11\165\1\201\15\165\6\0"+
    "\10\165\1\0\2\165\2\0\1\165\12\0\6\165\1\0"+
    "\1\165\4\0\12\165\1\172\14\165\6\0\10\165\1\0"+
    "\2\165\2\0\1\165\12\0\6\165\1\0\1\165\4\0"+
    "\3\165\1\204\23\165\6\0\10\165\1\0\2\165\2\0"+
    "\1\165\12\0\6\165\1\0\1\165\4\0\7\165\1\205"+
    "\17\165\6\0\10\165\1\0\2\165\2\0\1\165\12\0"+
    "\6\165\1\0\1\165\4\0\21\165\1\176\5\165\6\0"+
    "\10\165\1\0\2\165\2\0\1\165\12\0\6\165\1\0"+
    "\1\165\4\0\22\165\1\176\4\165\6\0\10\165\1\0"+
    "\2\165\2\0\1\165\12\0\6\165\1\0\1\165\4\0"+
    "\4\165\1\206\22\165\6\0\10\165\1\0\2\165\2\0"+
    "\1\165\12\0\6\165\1\0\1\165\4\0\7\165\1\207"+
    "\17\165\6\0\10\165\1\0\2\165\2\0\1\165\12\0"+
    "\6\165\1\0\1\165\4\0\1\210\26\165\6\0\10\165"+
    "\1\0\2\165\2\0\1\165\12\0\6\165\1\0\1\165"+
    "\4\0\12\165\1\201\14\165\6\0\10\165\1\0\2\165"+
    "\2\0\1\165\12\0\6\165\1\0\1\165\4\0\1\165"+
    "\1\211\25\165\6\0\10\165\1\0\2\165\2\0\1\165"+
    "\12\0\6\165\1\0\1\165\4\0\10\165\1\212\16\165"+
    "\6\0\10\165\1\0\2\165\2\0\1\165\12\0\6\165"+
    "\1\0\1\165\4\0\25\165\1\172\1\165\6\0\10\165"+
    "\1\0\2\165\2\0\1\165\12\0\6\165\1\0\1\165"+
    "\4\0\17\165\1\213\7\165\6\0\10\165\1\0\2\165"+
    "\2\0\1\165\12\0\6\165\1\0\1\165\4\0\6\165"+
    "\1\214\20\165\6\0\10\165\1\0\2\165\2\0\1\165"+
    "\12\0\6\165\1\0\1\165\4\0\12\165\1\215\14\165"+
    "\6\0\10\165\1\0\2\165\2\0\1\165\12\0\6\165"+
    "\1\0\1\165\4\0\6\165\1\216\20\165\6\0\10\165"+
    "\1\0\2\165\2\0\1\165\12\0\6\165\1\0\1\165"+
    "\4\0\11\165\1\217\15\165\6\0\10\165\1\0\2\165"+
    "\2\0\1\165\12\0\6\165\1\0\1\165\4\0\11\165"+
    "\1\176\15\165\6\0\10\165\1\0\2\165\2\0\1\165"+
    "\12\0\6\165\1\0\1\165\4\0\1\165\1\220\25\165"+
    "\6\0\10\165\1\0\2\165\2\0\1\165\12\0\6\165"+
    "\1\0\1\165\4\0\7\165\1\221\17\165\6\0\10\165"+
    "\1\0\2\165\2\0\1\165\12\0\6\165\1\0\1\165"+
    "\4\0\12\165\1\222\14\165\6\0\10\165\1\0\2\165"+
    "\2\0\1\165\12\0\6\165\1\0\1\165\4\0\13\165"+
    "\1\223\13\165\6\0\10\165\1\0\2\165\2\0\1\165"+
    "\12\0\6\165\1\0\1\165\4\0\10\165\1\224\16\165"+
    "\6\0\10\165\1\0\2\165\2\0\1\165\12\0\6\165"+
    "\1\0\1\165\4\0\1\165\1\201\25\165\6\0\10\165"+
    "\1\0\2\165\2\0\1\165\12\0\6\165\1\0\1\165"+
    "\4\0\1\165\1\172\25\165\6\0\10\165\1\0\2\165"+
    "\2\0\1\165\23\143\1\0\1\143\1\0\76\143\1\225"+
    "\1\143\1\0\67\143\2\154\5\143\1\225\1\143\1\0"+
    "\35\143\7\154\7\143\24\0\1\226\100\0\1\227\100\0"+
    "\1\230\100\0\1\231\100\0\1\232\54\0\5\163\1\233"+
    "\77\163\1\0\1\164\1\234\72\163\12\0\6\235\1\0"+
    "\1\235\4\0\27\235\6\0\10\235\1\0\2\235\2\0"+
    "\1\235\14\0\2\166\1\0\1\70\24\0\1\73\1\0"+
    "\1\70\14\0\7\166\1\73\22\0\2\166\45\0\7\166"+
    "\74\0\1\236\25\0\6\235\1\0\1\235\4\0\1\237"+
    "\26\235\6\0\10\235\1\0\2\235\2\0\1\235\12\0"+
    "\6\235\1\0\1\235\4\0\11\235\1\240\4\235\1\240"+
    "\10\235\6\0\10\235\1\0\2\235\2\0\1\235\12\0"+
    "\6\235\1\0\1\235\4\0\10\235\1\241\16\235\6\0"+
    "\10\235\1\0\2\235\2\0\1\235\12\0\6\235\1\0"+
    "\1\235\4\0\4\235\1\242\22\235\6\0\10\235\1\0"+
    "\2\235\2\0\1\235\12\0\6\235\1\0\1\235\4\0"+
    "\4\235\1\240\22\235\6\0\10\235\1\0\2\235\2\0"+
    "\1\235\12\0\6\235\1\0\1\235\4\0\6\235\1\243"+
    "\20\235\6\0\10\235\1\0\2\235\2\0\1\235\12\0"+
    "\6\235\1\0\1\235\4\0\11\235\1\244\15\235\6\0"+
    "\10\235\1\0\2\235\2\0\1\235\12\0\6\235\1\0"+
    "\1\235\4\0\10\235\1\240\16\235\6\0\10\235\1\0"+
    "\2\235\2\0\1\235\12\0\6\235\1\0\1\235\4\0"+
    "\6\235\1\245\20\235\6\0\10\235\1\0\2\235\2\0"+
    "\1\235\12\0\6\235\1\0\1\235\4\0\4\235\1\246"+
    "\22\235\6\0\10\235\1\0\2\235\2\0\1\235\12\0"+
    "\6\235\1\0\1\235\4\0\5\235\1\247\21\235\6\0"+
    "\10\235\1\0\2\235\2\0\1\235\12\0\6\235\1\0"+
    "\1\235\4\0\7\235\1\240\17\235\6\0\10\235\1\0"+
    "\2\235\2\0\1\235\12\0\6\235\1\0\1\235\4\0"+
    "\14\235\1\250\12\235\6\0\10\235\1\0\2\235\2\0"+
    "\1\235\12\0\6\235\1\0\1\235\4\0\1\235\1\240"+
    "\25\235\6\0\10\235\1\0\2\235\2\0\1\235\12\0"+
    "\6\235\1\0\1\235\4\0\6\235\1\251\20\235\6\0"+
    "\10\235\1\0\2\235\2\0\1\235\12\0\6\235\1\0"+
    "\1\235\4\0\1\235\1\252\25\235\6\0\10\235\1\0"+
    "\2\235\2\0\1\235\12\0\6\235\1\0\1\235\4\0"+
    "\7\235\1\253\17\235\6\0\10\235\1\0\2\235\2\0"+
    "\1\235\12\0\6\235\1\0\1\235\4\0\12\235\1\254"+
    "\14\235\6\0\10\235\1\0\2\235\2\0\1\235\12\0"+
    "\6\235\1\0\1\235\4\0\15\235\1\240\11\235\6\0"+
    "\10\235\1\0\2\235\2\0\1\235\12\0\6\235\1\0"+
    "\1\235\4\0\11\235\1\254\15\235\6\0\10\235\1\0"+
    "\2\235\2\0\1\235\12\0\6\235\1\0\1\235\4\0"+
    "\14\235\1\254\12\235\6\0\10\235\1\0\2\235\2\0"+
    "\1\235\12\0\6\235\1\0\1\235\4\0\17\235\1\255"+
    "\7\235\6\0\10\235\1\0\2\235\2\0\1\235\12\0"+
    "\6\235\1\0\1\235\4\0\13\235\1\256\13\235\6\0"+
    "\10\235\1\0\2\235\2\0\1\235\12\0\6\235\1\0"+
    "\1\235\4\0\6\235\1\246\20\235\6\0\10\235\1\0"+
    "\2\235\2\0\1\235\12\0\6\235\1\0\1\235\4\0"+
    "\23\235\1\257\3\235\6\0\10\235\1\0\2\235\2\0"+
    "\1\235\12\0\6\235\1\0\1\235\4\0\5\235\1\260"+
    "\5\235\1\261\13\235\6\0\10\235\1\0\2\235\2\0"+
    "\1\235\5\163\1\233\1\6\72\163\12\0\6\262\1\0"+
    "\1\262\4\0\27\262\6\0\10\262\1\0\2\262\2\0"+
    "\1\262\66\0\1\263\24\0\6\262\1\0\1\262\4\0"+
    "\2\262\1\264\24\262\6\0\10\262\1\0\2\262\2\0"+
    "\1\262\12\0\6\262\1\0\1\262\4\0\1\262\1\265"+
    "\25\262\6\0\10\262\1\0\2\262\2\0\1\262\12\0"+
    "\6\262\1\0\1\262\4\0\1\266\26\262\6\0\10\262"+
    "\1\0\2\262\2\0\1\262\12\0\6\262\1\0\1\262"+
    "\4\0\7\262\1\264\17\262\6\0\10\262\1\0\2\262"+
    "\2\0\1\262\12\0\6\262\1\0\1\262\4\0\4\262"+
    "\1\267\22\262\6\0\10\262\1\0\2\262\2\0\1\262"+
    "\12\0\6\262\1\0\1\262\4\0\7\262\1\270\17\262"+
    "\6\0\10\262\1\0\2\262\2\0\1\262\12\0\6\262"+
    "\1\0\1\262\4\0\11\262\1\264\15\262\6\0\10\262"+
    "\1\0\2\262\2\0\1\262\12\0\6\262\1\0\1\262"+
    "\4\0\6\262\1\271\20\262\6\0\10\262\1\0\2\262"+
    "\2\0\1\262\12\0\6\262\1\0\1\262\4\0\12\262"+
    "\1\264\14\262\6\0\10\262\1\0\2\262\2\0\1\262"+
    "\12\0\6\262\1\0\1\262\4\0\7\262\1\272\17\262"+
    "\6\0\10\262\1\0\2\262\2\0\1\262\12\0\6\262"+
    "\1\0\1\262\4\0\12\262\1\273\14\262\6\0\10\262"+
    "\1\0\2\262\2\0\1\262\12\0\6\262\1\0\1\262"+
    "\4\0\12\262\1\274\14\262\6\0\10\262\1\0\2\262"+
    "\2\0\1\262\12\0\6\262\1\0\1\262\4\0\4\262"+
    "\1\264\22\262\6\0\10\262\1\0\2\262\2\0\1\262"+
    "\12\0\6\262\1\0\1\262\4\0\1\275\26\262\6\0"+
    "\10\262\1\0\2\262\2\0\1\262\12\0\6\262\1\0"+
    "\1\262\4\0\12\262\1\276\14\262\6\0\10\262\1\0"+
    "\2\262\2\0\1\262\12\0\6\262\1\0\1\262\4\0"+
    "\4\262\1\265\22\262\6\0\10\262\1\0\2\262\2\0"+
    "\1\262\12\0\6\262\1\0\1\262\4\0\1\262\1\277"+
    "\25\262\6\0\10\262\1\0\2\262\2\0\1\262\12\0"+
    "\6\262\1\0\1\262\4\0\4\262\1\300\22\262\6\0"+
    "\10\262\1\0\2\262\2\0\1\262\12\0\6\301\1\0"+
    "\1\301\4\0\27\301\6\0\10\301\1\0\2\301\2\0"+
    "\1\301\65\0\1\302\25\0\6\301\1\0\1\301\4\0"+
    "\16\301\1\303\10\301\6\0\10\301\1\0\2\301\2\0"+
    "\1\301\12\0\6\301\1\0\1\301\4\0\12\301\1\303"+
    "\14\301\6\0\10\301\1\0\2\301\2\0\1\301\12\0"+
    "\6\301\1\0\1\301\4\0\1\304\26\301\6\0\10\301"+
    "\1\0\2\301\2\0\1\301\12\0\6\301\1\0\1\301"+
    "\4\0\4\301\1\303\22\301\6\0\10\301\1\0\2\301"+
    "\2\0\1\301\12\0\6\301\1\0\1\301\4\0\7\301"+
    "\1\305\17\301\6\0\10\301\1\0\2\301\2\0\1\301"+
    "\12\0\6\301\1\0\1\301\4\0\5\301\1\303\21\301"+
    "\6\0\10\301\1\0\2\301\2\0\1\301\12\0\6\301"+
    "\1\0\1\301\4\0\6\301\1\306\20\301\6\0\10\301"+
    "\1\0\2\301\2\0\1\301\12\0\6\301\1\0\1\301"+
    "\4\0\10\301\1\303\16\301\6\0\10\301\1\0\2\301"+
    "\2\0\1\301\12\0\6\301\1\0\1\301\4\0\1\301"+
    "\1\307\25\301\6\0\10\301\1\0\2\301\2\0\1\301"+
    "\12\0\6\301\1\0\1\301\4\0\6\301\1\310\20\301"+
    "\6\0\10\301\1\0\2\301\2\0\1\301\12\0\6\301"+
    "\1\0\1\301\4\0\1\311\26\301\6\0\10\301\1\0"+
    "\2\301\2\0\1\301\12\0\6\301\1\0\1\301\4\0"+
    "\16\301\1\312\10\301\6\0\10\301\1\0\2\301\2\0"+
    "\1\301\12\0\6\313\1\0\1\313\4\0\27\313\6\0"+
    "\10\313\1\0\2\313\2\0\1\313\67\0\1\314\23\0"+
    "\6\313\1\0\1\313\4\0\7\313\1\315\17\313\6\0"+
    "\10\313\1\0\2\313\2\0\1\313\12\0\6\313\1\0"+
    "\1\313\4\0\12\313\1\315\14\313\6\0\10\313\1\0"+
    "\2\313\2\0\1\313\12\0\6\313\1\0\1\313\4\0"+
    "\7\313\1\316\17\313\6\0\10\313\1\0\2\313\2\0"+
    "\1\313\12\0\6\313\1\0\1\313\4\0\16\313\1\315"+
    "\10\313\6\0\10\313\1\0\2\313\2\0\1\313\12\0"+
    "\6\313\1\0\1\313\4\0\10\313\1\317\16\313\6\0"+
    "\10\313\1\0\2\313\2\0\1\313\12\0\6\313\1\0"+
    "\1\313\4\0\24\313\1\315\2\313\6\0\10\313\1\0"+
    "\2\313\2\0\1\313\12\0\6\313\1\0\1\313\4\0"+
    "\21\313\1\320\5\313\6\0\10\313\1\0\2\313\2\0"+
    "\1\313\12\0\6\321\1\0\1\321\4\0\27\321\6\0"+
    "\10\321\1\0\2\321\2\0\1\321\70\0\1\322\22\0"+
    "\6\321\1\0\1\321\4\0\12\321\1\323\14\321\6\0"+
    "\10\321\1\0\2\321\2\0\1\321\12\0\6\321\1\0"+
    "\1\321\4\0\7\321\1\323\17\321\6\0\10\321\1\0"+
    "\2\321\2\0\1\321\12\0\6\321\1\0\1\321\4\0"+
    "\1\321\1\324\25\321\6\0\10\321\1\0\2\321\2\0"+
    "\1\321\12\0\6\325\1\0\1\325\4\0\27\325\6\0"+
    "\10\325\1\0\2\325\2\0\1\325\71\0\1\326\21\0"+
    "\6\325\1\0\1\325\4\0\4\325\1\327\22\325\6\0"+
    "\10\325\1\0\2\325\2\0\1\325\12\0\6\330\1\0"+
    "\1\330\4\0\27\330\6\0\10\330\1\0\2\330\2\0"+
    "\1\330\65\0\1\331\25\0\6\332\1\0\1\332\4\0"+
    "\27\332\6\0\10\332\1\0\2\332\2\0\1\332\67\0"+
    "\1\333\23\0\6\334\1\0\1\334\4\0\27\334\6\0"+
    "\10\334\1\0\2\334\2\0\1\334\12\0\6\335\1\0"+
    "\1\335\4\0\27\335\6\0\10\335\1\0\2\335\2\0"+
    "\1\335\12\0\6\336\1\0\1\336\4\0\27\336\6\0"+
    "\10\336\1\0\2\336\2\0\1\336\12\0\6\337\1\0"+
    "\1\337\4\0\27\337\6\0\10\337\1\0\2\337\2\0"+
    "\1\337\12\0\6\340\1\0\1\340\4\0\27\340\6\0"+
    "\10\340\1\0\2\340\2\0\1\340\12\0\6\341\1\0"+
    "\1\341\4\0\27\341\6\0\10\341\1\0\2\341\2\0"+
    "\1\341\12\0\6\342\1\0\1\342\4\0\27\342\6\0"+
    "\10\342\1\0\2\342\2\0\1\342\12\0\6\343\1\0"+
    "\1\343\4\0\27\343\6\0\10\343\1\0\2\343\2\0"+
    "\1\343\12\0\6\344\1\0\1\344\4\0\27\344\6\0"+
    "\10\344\1\0\2\344\2\0\1\344\12\0\6\345\1\0"+
    "\1\345\4\0\27\345\6\0\10\345\1\0\2\345\2\0"+
    "\1\345\12\0\6\346\1\0\1\346\4\0\27\346\6\0"+
    "\10\346\1\0\2\346\2\0\1\346\12\0\6\347\1\0"+
    "\1\347\4\0\27\347\6\0\10\347\1\0\2\347\2\0"+
    "\1\347\12\0\6\350\1\0\1\350\4\0\27\350\6\0"+
    "\10\350\1\0\2\350\2\0\1\350\12\0\6\351\1\0"+
    "\1\351\4\0\27\351\6\0\10\351\1\0\2\351\2\0"+
    "\1\351\12\0\6\352\1\0\1\352\4\0\27\352\6\0"+
    "\10\352\1\0\2\352\2\0\1\352\12\0\6\353\1\0"+
    "\1\353\4\0\27\353\6\0\10\353\1\0\2\353\2\0"+
    "\1\353\12\0\6\354\1\0\1\354\4\0\27\354\6\0"+
    "\10\354\1\0\2\354\2\0\1\354\12\0\6\355\1\0"+
    "\1\355\4\0\27\355\6\0\10\355\1\0\2\355\2\0"+
    "\1\355\12\0\6\356\1\0\1\356\4\0\27\356\6\0"+
    "\10\356\1\0\2\356\2\0\1\356\12\0\6\357\1\0"+
    "\1\357\4\0\27\357\6\0\10\357\1\0\2\357\2\0"+
    "\1\357\12\0\6\360\1\0\1\360\4\0\27\360\6\0"+
    "\10\360\1\0\2\360\2\0\1\360\12\0\6\361\1\0"+
    "\1\361\4\0\27\361\6\0\10\361\1\0\2\361\2\0"+
    "\1\361\12\0\6\362\1\0\1\362\4\0\27\362\6\0"+
    "\10\362\1\0\2\362\2\0\1\362\12\0\6\363\1\0"+
    "\1\363\4\0\27\363\6\0\10\363\1\0\2\363\2\0"+
    "\1\363\12\0\6\364\1\0\1\364\4\0\27\364\6\0"+
    "\10\364\1\0\2\364\2\0\1\364\12\0\6\365\1\0"+
    "\1\365\4\0\27\365\6\0\10\365\1\0\2\365\2\0"+
    "\1\365\12\0\6\366\1\0\1\366\4\0\27\366\6\0"+
    "\10\366\1\0\2\366\2\0\1\366\12\0\6\367\1\0"+
    "\1\367\4\0\27\367\6\0\10\367\1\0\2\367\2\0"+
    "\1\367\12\0\6\370\1\0\1\370\4\0\27\370\6\0"+
    "\10\370\1\0\2\370\2\0\1\370\12\0\6\371\1\0"+
    "\1\371\4\0\27\371\6\0\10\371\1\0\2\371\2\0"+
    "\1\371\12\0\6\372\1\0\1\372\4\0\27\372\6\0"+
    "\10\372\1\0\2\372\2\0\1\372\12\0\6\373\1\0"+
    "\1\373\4\0\27\373\6\0\10\373\1\0\2\373\2\0"+
    "\1\373\12\0\6\374\1\0\1\374\4\0\27\374\6\0"+
    "\10\374\1\0\2\374\2\0\1\374\12\0\6\375\1\0"+
    "\1\375\4\0\27\375\6\0\10\375\1\0\2\375\2\0"+
    "\1\375\12\0\6\376\1\0\1\376\4\0\27\376\6\0"+
    "\10\376\1\0\2\376\2\0\1\376\12\0\6\377\1\0"+
    "\1\377\4\0\27\377\6\0\10\377\1\0\2\377\2\0"+
    "\1\377\12\0\6\u0100\1\0\1\u0100\4\0\27\u0100\6\0"+
    "\10\u0100\1\0\2\u0100\2\0\1\u0100\12\0\6\u0101\1\0"+
    "\1\u0101\4\0\27\u0101\6\0\10\u0101\1\0\2\u0101\2\0"+
    "\1\u0101\12\0\6\u0102\1\0\1\u0102\4\0\27\u0102\6\0"+
    "\10\u0102\1\0\2\u0102\2\0\1\u0102\12\0\6\u0103\1\0"+
    "\1\u0103\4\0\27\u0103\6\0\10\u0103\1\0\2\u0103\2\0"+
    "\1\u0103\12\0\6\u0104\1\0\1\u0104\4\0\27\u0104\6\0"+
    "\10\u0104\1\0\2\u0104\2\0\1\u0104\12\0\6\u0105\1\0"+
    "\1\u0105\4\0\27\u0105\6\0\10\u0105\1\0\2\u0105\2\0"+
    "\1\u0105\12\0\6\u0106\1\0\1\u0106\4\0\27\u0106\6\0"+
    "\10\u0106\1\0\2\u0106\2\0\1\u0106\12\0\6\u0107\1\0"+
    "\1\u0107\4\0\27\u0107\6\0\10\u0107\1\0\2\u0107\2\0"+
    "\1\u0107\12\0\6\u0108\1\0\1\u0108\4\0\27\u0108\6\0"+
    "\10\u0108\1\0\2\u0108\2\0\1\u0108\12\0\6\u0109\1\0"+
    "\1\u0109\4\0\27\u0109\6\0\10\u0109\1\0\2\u0109\2\0"+
    "\1\u0109\12\0\6\u010a\1\0\1\u010a\4\0\27\u010a\6\0"+
    "\10\u010a\1\0\2\u010a\2\0\1\u010a\12\0\6\u010b\1\0"+
    "\1\u010b\4\0\27\u010b\6\0\10\u010b\1\0\2\u010b\2\0"+
    "\1\u010b\12\0\6\u010c\1\0\1\u010c\4\0\27\u010c\6\0"+
    "\10\u010c\1\0\2\u010c\2\0\1\u010c\12\0\6\u010d\1\0"+
    "\1\u010d\4\0\27\u010d\6\0\10\u010d\1\0\2\u010d\2\0"+
    "\1\u010d\12\0\6\u010e\1\0\1\u010e\4\0\27\u010e\6\0"+
    "\10\u010e\1\0\2\u010e\2\0\1\u010e\12\0\6\u010f\1\0"+
    "\1\u010f\4\0\27\u010f\6\0\10\u010f\1\0\2\u010f\2\0"+
    "\1\u010f\12\0\6\u0110\1\0\1\u0110\4\0\27\u0110\6\0"+
    "\10\u0110\1\0\2\u0110\2\0\1\u0110\12\0\6\u0111\1\0"+
    "\1\u0111\4\0\27\u0111\6\0\10\u0111\1\0\2\u0111\2\0"+
    "\1\u0111\12\0\6\u0112\1\0\1\u0112\4\0\27\u0112\6\0"+
    "\10\u0112\1\0\2\u0112\2\0\1\u0112\12\0\6\u0113\1\0"+
    "\1\u0113\4\0\27\u0113\6\0\10\u0113\1\0\2\u0113\2\0"+
    "\1\u0113\12\0\6\u0114\1\0\1\u0114\4\0\27\u0114\6\0"+
    "\10\u0114\1\0\2\u0114\2\0\1\u0114\12\0\6\u0115\1\0"+
    "\1\u0115\4\0\27\u0115\6\0\10\u0115\1\0\2\u0115\2\0"+
    "\1\u0115\12\0\6\u0116\1\0\1\u0116\4\0\27\u0116\6\0"+
    "\10\u0116\1\0\2\u0116\2\0\1\u0116\12\0\6\u0117\1\0"+
    "\1\u0117\4\0\27\u0117\6\0\10\u0117\1\0\2\u0117\2\0"+
    "\1\u0117\12\0\6\u0118\1\0\1\u0118\4\0\27\u0118\6\0"+
    "\10\u0118\1\0\2\u0118\2\0\1\u0118\12\0\6\u0119\1\0"+
    "\1\u0119\4\0\27\u0119\6\0\10\u0119\1\0\2\u0119\2\0"+
    "\1\u0119\12\0\6\u011a\1\0\1\u011a\4\0\27\u011a\6\0"+
    "\10\u011a\1\0\2\u011a\2\0\1\u011a\12\0\6\u011b\1\0"+
    "\1\u011b\4\0\27\u011b\6\0\10\u011b\1\0\2\u011b\2\0"+
    "\1\u011b\12\0\6\u011c\1\0\1\u011c\4\0\27\u011c\6\0"+
    "\10\u011c\1\0\2\u011c\2\0\1\u011c\12\0\6\u011d\1\0"+
    "\1\u011d\4\0\27\u011d\6\0\10\u011d\1\0\2\u011d\2\0"+
    "\1\u011d\12\0\6\u011e\1\0\1\u011e\4\0\27\u011e\6\0"+
    "\10\u011e\1\0\2\u011e\2\0\1\u011e\12\0\6\u011f\1\0"+
    "\1\u011f\4\0\27\u011f\6\0\10\u011f\1\0\2\u011f\2\0"+
    "\1\u011f\12\0\6\u0120\1\0\1\u0120\4\0\27\u0120\6\0"+
    "\10\u0120\1\0\2\u0120\2\0\1\u0120\12\0\6\u0121\1\0"+
    "\1\u0121\4\0\27\u0121\6\0\10\u0121\1\0\2\u0121\2\0"+
    "\1\u0121\12\0\6\u0122\1\0\1\u0122\4\0\27\u0122\6\0"+
    "\10\u0122\1\0\2\u0122\2\0\1\u0122\12\0\6\u0123\1\0"+
    "\1\u0123\4\0\27\u0123\6\0\10\u0123\1\0\2\u0123\2\0"+
    "\1\u0123\12\0\6\u0124\1\0\1\u0124\4\0\27\u0124\6\0"+
    "\10\u0124\1\0\2\u0124\2\0\1\u0124\12\0\6\u0125\1\0"+
    "\1\u0125\4\0\27\u0125\6\0\10\u0125\1\0\2\u0125\2\0"+
    "\1\u0125\12\0\6\u0126\1\0\1\u0126\4\0\27\u0126\6\0"+
    "\10\u0126\1\0\2\u0126\2\0\1\u0126\12\0\6\u0127\1\0"+
    "\1\u0127\4\0\27\u0127\6\0\10\u0127\1\0\2\u0127\2\0"+
    "\1\u0127\12\0\6\u0128\1\0\1\u0128\4\0\27\u0128\6\0"+
    "\10\u0128\1\0\2\u0128\2\0\1\u0128\12\0\6\u0129\1\0"+
    "\1\u0129\4\0\27\u0129\6\0\10\u0129\1\0\2\u0129\2\0"+
    "\1\u0129\12\0\6\u012a\1\0\1\u012a\4\0\27\u012a\6\0"+
    "\10\u012a\1\0\2\u012a\2\0\1\u012a\12\0\6\u012b\1\0"+
    "\1\u012b\4\0\27\u012b\6\0\10\u012b\1\0\2\u012b\2\0"+
    "\1\u012b\12\0\6\u012c\1\0\1\u012c\4\0\27\u012c\6\0"+
    "\10\u012c\1\0\2\u012c\2\0\1\u012c\12\0\6\u012d\1\0"+
    "\1\u012d\4\0\27\u012d\6\0\10\u012d\1\0\2\u012d\2\0"+
    "\1\u012d\12\0\6\u012e\1\0\1\u012e\4\0\27\u012e\6\0"+
    "\10\u012e\1\0\2\u012e\2\0\1\u012e\12\0\6\u012f\1\0"+
    "\1\u012f\4\0\27\u012f\6\0\10\u012f\1\0\2\u012f\2\0"+
    "\1\u012f\12\0\6\u0130\1\0\1\u0130\4\0\27\u0130\6\0"+
    "\10\u0130\1\0\2\u0130\2\0\1\u0130\12\0\6\u0131\1\0"+
    "\1\u0131\4\0\27\u0131\6\0\10\u0131\1\0\2\u0131\2\0"+
    "\1\u0131\12\0\6\u0132\1\0\1\u0132\4\0\27\u0132\6\0"+
    "\10\u0132\1\0\2\u0132\2\0\1\u0132\12\0\6\u0133\1\0"+
    "\1\u0133\4\0\27\u0133\6\0\10\u0133\1\0\2\u0133\2\0"+
    "\1\u0133\12\0\6\u0134\1\0\1\u0134\4\0\27\u0134\6\0"+
    "\10\u0134\1\0\2\u0134\2\0\1\u0134\12\0\6\u0135\1\0"+
    "\1\u0135\4\0\27\u0135\6\0\10\u0135\1\0\2\u0135\2\0"+
    "\1\u0135\12\0\6\u0136\1\0\1\u0136\4\0\27\u0136\6\0"+
    "\10\u0136\1\0\2\u0136\2\0\1\u0136\12\0\6\u0137\1\0"+
    "\1\u0137\4\0\27\u0137\6\0\10\u0137\1\0\2\u0137\2\0"+
    "\1\u0137\12\0\6\u0138\1\0\1\u0138\4\0\27\u0138\6\0"+
    "\10\u0138\1\0\2\u0138\2\0\1\u0138\12\0\6\u0139\1\0"+
    "\1\u0139\4\0\27\u0139\6\0\10\u0139\1\0\2\u0139\2\0"+
    "\1\u0139\12\0\6\u013a\1\0\1\u013a\4\0\27\u013a\6\0"+
    "\10\u013a\1\0\2\u013a\2\0\1\u013a\12\0\6\u013b\1\0"+
    "\1\u013b\4\0\27\u013b\6\0\10\u013b\1\0\2\u013b\2\0"+
    "\1\u013b\12\0\6\u013c\1\0\1\u013c\4\0\27\u013c\6\0"+
    "\10\u013c\1\0\2\u013c\2\0\1\u013c\12\0\6\u013d\1\0"+
    "\1\u013d\4\0\27\u013d\6\0\10\u013d\1\0\2\u013d\2\0"+
    "\1\u013d\12\0\6\u013e\1\0\1\u013e\4\0\27\u013e\6\0"+
    "\10\u013e\1\0\2\u013e\2\0\1\u013e\12\0\6\u013f\1\0"+
    "\1\u013f\4\0\27\u013f\6\0\10\u013f\1\0\2\u013f\2\0"+
    "\1\u013f\12\0\6\u0140\1\0\1\u0140\4\0\27\u0140\6\0"+
    "\10\u0140\1\0\2\u0140\2\0\1\u0140\12\0\6\u0141\1\0"+
    "\1\u0141\4\0\27\u0141\6\0\10\u0141\1\0\2\u0141\2\0"+
    "\1\u0141\12\0\6\u0142\1\0\1\u0142\4\0\27\u0142\6\0"+
    "\10\u0142\1\0\2\u0142\2\0\1\u0142\12\0\6\u0143\1\0"+
    "\1\u0143\4\0\27\u0143\6\0\10\u0143\1\0\2\u0143\2\0"+
    "\1\u0143\12\0\6\u0144\1\0\1\u0144\4\0\27\u0144\6\0"+
    "\10\u0144\1\0\2\u0144\2\0\1\u0144\12\0\6\u0145\1\0"+
    "\1\u0145\4\0\27\u0145\6\0\10\u0145\1\0\2\u0145\2\0"+
    "\1\u0145\12\0\6\u0146\1\0\1\u0146\4\0\27\u0146\6\0"+
    "\10\u0146\1\0\2\u0146\2\0\1\u0146\12\0\6\u0147\1\0"+
    "\1\u0147\4\0\27\u0147\6\0\10\u0147\1\0\2\u0147\2\0"+
    "\1\u0147\12\0\6\u0148\1\0\1\u0148\4\0\27\u0148\6\0"+
    "\10\u0148\1\0\2\u0148\2\0\1\u0148\12\0\6\u0149\1\0"+
    "\1\u0149\4\0\27\u0149\6\0\10\u0149\1\0\2\u0149\2\0"+
    "\1\u0149\12\0\6\u014a\1\0\1\u014a\4\0\27\u014a\6\0"+
    "\10\u014a\1\0\2\u014a\2\0\1\u014a\12\0\6\u014b\1\0"+
    "\1\u014b\4\0\27\u014b\6\0\10\u014b\1\0\2\u014b\2\0"+
    "\1\u014b\12\0\6\u014c\1\0\1\u014c\4\0\27\u014c\6\0"+
    "\10\u014c\1\0\2\u014c\2\0\1\u014c\12\0\6\u014d\1\0"+
    "\1\u014d\4\0\27\u014d\6\0\10\u014d\1\0\2\u014d\2\0"+
    "\1\u014d\12\0\6\u014e\1\0\1\u014e\4\0\27\u014e\6\0"+
    "\10\u014e\1\0\2\u014e\2\0\1\u014e\12\0\6\u014f\1\0"+
    "\1\u014f\4\0\27\u014f\6\0\10\u014f\1\0\2\u014f\2\0"+
    "\1\u014f";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\7\1\2\11"+
    "\30\1\1\11\4\1\1\11\1\1\2\0\3\1\2\11"+
    "\1\1\1\0\1\11\1\0\47\1\7\11\2\1\1\11"+
    "\5\1\2\0\2\1\2\0\34\1\6\11\1\0\2\1"+
    "\1\0\24\1\1\0\16\1\1\0\11\1\1\0\5\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\11\163\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new PclSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new PclSymbol(type, yyline+1, yycolumn+1, value);
  }

  private void printError(String type){
    System.out.println("Error: line:" + (yyline+1) + " col:" + (yycolumn+1) + " type:" + type);
  }

  public java_cup.runtime.Symbol custom_debug_next_token() throws java.io.IOException {
      java_cup.runtime.Symbol s = next_token();
      //System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
      return s;
  }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2894) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { printError("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 32: break;
          case 2: 
            { /* ignore */
            }
          case 33: break;
          case 3: 
            { return symbol(OPERADOR,yytext());
            }
          case 34: break;
          case 4: 
            { return symbol(IDENTIFICADOR, yytext());
            }
          case 35: break;
          case 5: 
            { return symbol(INTEGER_LITERAL, new Integer(yytext()));
            }
          case 36: break;
          case 6: 
            { yybegin(STRING); string.setLength(0);
            }
          case 37: break;
          case 7: 
            { yybegin(CHARLITERAL);
            }
          case 38: break;
          case 8: 
            { string.append( yytext() );
            }
          case 39: break;
          case 9: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          case 40: break;
          case 10: 
            { printError("Unterminated character literal at end of line");
            }
          case 41: break;
          case 11: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 42: break;
          case 12: 
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 43: break;
          case 13: 
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 44: break;
          case 14: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 45: break;
          case 15: 
            { return symbol(PALABRA_RESERVADA,yytext());
            }
          case 46: break;
          case 16: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL,yytext().charAt(0));
            }
          case 47: break;
          case 17: 
            { printError("Illegal escape sequence \""+yytext()+"\"");
            }
          case 48: break;
          case 18: 
            { string.append( '\"' );
            }
          case 49: break;
          case 19: 
            { string.append( '\'' );
            }
          case 50: break;
          case 20: 
            { string.append( '\\' );
            }
          case 51: break;
          case 21: 
            { string.append( '\b' );
            }
          case 52: break;
          case 22: 
            { string.append( '\t' );
            }
          case 53: break;
          case 23: 
            { string.append( (char)Integer.parseInt(yytext().substring(1)) );
            }
          case 54: break;
          case 24: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 55: break;
          case 25: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL,(char)Integer.parseInt(yytext().substring(1,yytext().length()-1)));
            }
          case 56: break;
          case 26: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          case 57: break;
          case 27: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          case 58: break;
          case 28: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          case 59: break;
          case 29: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          case 60: break;
          case 30: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          case 61: break;
          case 31: 
            { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
