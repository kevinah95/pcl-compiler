/* The following code was generated by JFlex 1.6.1 */

package com.pcl.lexer;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/kevinah95/IdeaProjects/pcl-compiler/src/com/pcl/lexer/pcl.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\4\1\2\1\3\1\3\1\1\16\14\4\0\1\4\1\0"+
    "\1\25\1\70\1\13\2\0\1\26\1\11\1\6\1\5\1\61\1\57"+
    "\1\24\1\22\1\10\1\16\1\72\1\71\1\76\1\73\1\17\1\77"+
    "\1\74\1\75\1\17\1\67\1\60\1\64\1\63\1\62\2\0\1\30"+
    "\1\33\1\43\1\46\1\34\1\50\1\35\1\45\1\36\1\13\1\53"+
    "\1\41\1\54\1\37\1\40\1\52\1\13\1\31\1\44\1\42\1\51"+
    "\1\55\1\47\1\56\1\32\1\13\1\65\1\27\1\66\1\0\1\13"+
    "\1\0\1\13\1\101\1\13\1\100\1\23\1\21\5\13\1\20\7\13"+
    "\1\102\6\13\1\12\1\0\1\7\1\0\6\14\1\15\32\14\2\0"+
    "\4\13\4\0\1\13\2\0\1\14\7\0\1\13\4\0\1\13\5\0"+
    "\27\13\1\0\37\13\1\0\u01ca\13\4\0\14\13\16\0\5\13\7\0"+
    "\1\13\1\0\1\13\21\0\160\14\5\13\1\0\2\13\2\0\4\13"+
    "\10\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13\1\0\123\13"+
    "\1\0\213\13\1\0\5\14\2\0\236\13\11\0\46\13\2\0\1\13"+
    "\7\0\47\13\7\0\1\13\1\0\55\14\1\0\1\14\1\0\2\14"+
    "\1\0\2\14\1\0\1\14\10\0\33\13\5\0\3\13\15\0\5\14"+
    "\6\0\1\13\4\0\13\14\5\0\53\13\37\14\4\0\2\13\1\14"+
    "\143\13\1\0\1\13\10\14\1\0\6\14\2\13\2\14\1\0\4\14"+
    "\2\13\12\14\3\13\2\0\1\13\17\0\1\14\1\13\1\14\36\13"+
    "\33\14\2\0\131\13\13\14\1\13\16\0\12\14\41\13\11\14\2\13"+
    "\4\0\1\13\5\0\26\13\4\14\1\13\11\14\1\13\3\14\1\13"+
    "\5\14\22\0\31\13\3\14\104\0\1\13\1\0\13\13\67\0\33\14"+
    "\1\0\4\14\66\13\3\14\1\13\22\14\1\13\7\14\12\13\2\14"+
    "\2\0\12\14\1\0\7\13\1\0\7\13\1\0\3\14\1\0\10\13"+
    "\2\0\2\13\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13"+
    "\2\0\1\14\1\13\7\14\2\0\2\14\2\0\3\14\1\13\10\0"+
    "\1\14\4\0\2\13\1\0\3\13\2\14\2\0\12\14\4\13\7\0"+
    "\1\13\5\0\3\14\1\0\6\13\4\0\2\13\2\0\26\13\1\0"+
    "\7\13\1\0\2\13\1\0\2\13\1\0\2\13\2\0\1\14\1\0"+
    "\5\14\4\0\2\14\2\0\3\14\3\0\1\14\7\0\4\13\1\0"+
    "\1\13\7\0\14\14\3\13\1\14\13\0\3\14\1\0\11\13\1\0"+
    "\3\13\1\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0"+
    "\1\14\1\13\10\14\1\0\3\14\1\0\3\14\2\0\1\13\17\0"+
    "\2\13\2\14\2\0\12\14\1\0\1\13\17\0\3\14\1\0\10\13"+
    "\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13"+
    "\2\0\1\14\1\13\7\14\2\0\2\14\2\0\3\14\10\0\2\14"+
    "\4\0\2\13\1\0\3\13\2\14\2\0\12\14\1\0\1\13\20\0"+
    "\1\14\1\13\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13"+
    "\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0\14\13"+
    "\4\0\5\14\3\0\3\14\1\0\4\14\2\0\1\13\6\0\1\14"+
    "\16\0\12\14\11\0\1\13\7\0\3\14\1\0\10\13\1\0\3\13"+
    "\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13\7\14\1\0"+
    "\3\14\1\0\4\14\7\0\2\14\1\0\2\13\6\0\2\13\2\14"+
    "\2\0\12\14\22\0\2\14\1\0\10\13\1\0\3\13\1\0\27\13"+
    "\1\0\12\13\1\0\5\13\2\0\1\14\1\13\7\14\1\0\3\14"+
    "\1\0\4\14\7\0\2\14\7\0\1\13\1\0\2\13\2\14\2\0"+
    "\12\14\1\0\2\13\17\0\2\14\1\0\10\13\1\0\3\13\1\0"+
    "\51\13\2\0\1\13\7\14\1\0\3\14\1\0\4\14\1\13\10\0"+
    "\1\14\10\0\2\13\2\14\2\0\12\14\12\0\6\13\2\0\2\14"+
    "\1\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0\7\13"+
    "\3\0\1\14\4\0\6\14\1\0\1\14\1\0\10\14\22\0\2\14"+
    "\15\0\60\13\1\14\2\13\7\14\4\0\10\13\10\14\1\0\12\14"+
    "\47\0\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13"+
    "\6\0\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13"+
    "\2\0\2\13\1\0\4\13\1\14\2\13\6\14\1\0\2\14\1\13"+
    "\2\0\5\13\1\0\1\13\1\0\6\14\2\0\12\14\2\0\4\13"+
    "\40\0\1\13\27\0\2\14\6\0\12\14\13\0\1\14\1\0\1\14"+
    "\1\0\1\14\4\0\2\14\10\13\1\0\44\13\4\0\24\14\1\0"+
    "\2\14\5\13\13\14\1\0\44\14\11\0\1\14\71\0\53\13\24\14"+
    "\1\13\12\14\6\0\6\13\4\14\4\13\3\14\1\13\3\14\2\13"+
    "\7\14\3\13\4\14\15\13\14\14\1\13\17\14\2\0\46\13\1\0"+
    "\1\13\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0"+
    "\7\13\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13\2\0"+
    "\41\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0"+
    "\17\13\1\0\71\13\1\0\4\13\2\0\103\13\2\0\3\14\40\0"+
    "\20\13\20\0\125\13\14\0\u026c\13\2\0\21\13\1\0\32\13\5\0"+
    "\113\13\3\0\3\13\17\0\15\13\1\0\4\13\3\14\13\0\22\13"+
    "\3\14\13\0\22\13\2\14\14\0\15\13\1\0\3\13\1\0\2\14"+
    "\14\0\64\13\40\14\3\0\1\13\3\0\2\13\1\14\2\0\12\14"+
    "\41\0\3\14\2\0\12\14\6\0\130\13\10\0\51\13\1\14\1\13"+
    "\5\0\106\13\12\0\35\13\3\0\14\14\4\0\14\14\12\0\12\14"+
    "\36\13\2\0\5\13\13\0\54\13\4\0\21\14\7\13\2\14\6\0"+
    "\12\14\46\0\27\13\5\14\4\0\65\13\12\14\1\0\35\14\2\0"+
    "\13\14\6\0\12\14\15\0\1\13\130\0\5\14\57\13\21\14\7\13"+
    "\4\0\12\14\21\0\11\14\14\0\3\14\36\13\15\14\2\13\12\14"+
    "\54\13\16\14\14\0\44\13\24\14\10\0\12\14\3\0\3\13\12\14"+
    "\44\13\122\0\3\14\1\0\25\14\4\13\1\14\4\13\3\14\2\13"+
    "\11\0\300\13\47\14\25\0\4\14\u0116\13\2\0\6\13\2\0\46\13"+
    "\2\0\6\13\2\0\10\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\37\13\2\0\65\13\1\0\7\13\1\0\1\13\3\0\3\13"+
    "\1\0\7\13\3\0\4\13\2\0\6\13\4\0\15\13\5\0\3\13"+
    "\1\0\7\13\16\0\5\14\30\0\1\3\1\3\5\14\20\0\2\13"+
    "\23\0\1\13\13\0\5\14\5\0\6\14\1\0\1\13\15\0\1\13"+
    "\20\0\15\13\3\0\33\13\25\0\15\14\4\0\1\14\3\0\14\14"+
    "\21\0\1\13\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13"+
    "\6\0\1\13\1\0\1\13\1\0\1\13\1\0\4\13\1\0\13\13"+
    "\2\0\4\13\5\0\5\13\4\0\1\13\21\0\51\13\u0a77\0\57\13"+
    "\1\0\57\13\1\0\205\13\6\0\4\13\3\14\2\13\14\0\46\13"+
    "\1\0\1\13\5\0\1\13\2\0\70\13\7\0\1\13\17\0\1\14"+
    "\27\13\11\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\40\14\57\0"+
    "\1\13\u01d5\0\3\13\31\0\11\13\6\14\1\0\5\13\2\0\5\13"+
    "\4\0\126\13\2\0\2\14\2\0\3\13\1\0\132\13\1\0\4\13"+
    "\5\0\51\13\3\0\136\13\21\0\33\13\65\0\20\13\u0200\0\u19b6\13"+
    "\112\0\u51cd\13\63\0\u048d\13\103\0\56\13\2\0\u010d\13\3\0\20\13"+
    "\12\14\2\13\24\0\57\13\1\14\4\0\12\14\1\0\31\13\7\0"+
    "\1\14\120\13\2\14\45\0\11\13\2\0\147\13\2\0\4\13\1\0"+
    "\4\13\14\0\13\13\115\0\12\13\1\14\3\13\1\14\4\13\1\14"+
    "\27\13\5\14\20\0\1\13\7\0\64\13\14\0\2\14\62\13\21\14"+
    "\13\0\12\14\6\0\22\14\6\13\3\0\1\13\4\0\12\14\34\13"+
    "\10\14\2\0\27\13\15\14\14\0\35\13\3\0\4\14\57\13\16\14"+
    "\16\0\1\13\12\14\46\0\51\13\16\14\11\0\3\13\1\14\10\13"+
    "\2\14\2\0\12\14\6\0\27\13\3\0\1\13\1\14\4\0\60\13"+
    "\1\14\1\13\3\14\2\13\2\14\5\13\2\14\1\13\1\14\1\13"+
    "\30\0\3\13\2\0\13\13\5\14\2\0\3\13\2\14\12\0\6\13"+
    "\2\0\6\13\2\0\6\13\11\0\7\13\1\0\7\13\221\0\43\13"+
    "\10\14\1\0\2\14\2\0\12\14\6\0\u2ba4\13\14\0\27\13\4\0"+
    "\61\13\u2104\0\u016e\13\2\0\152\13\46\0\7\13\14\0\5\13\5\0"+
    "\1\13\1\14\12\13\1\0\15\13\1\0\5\13\1\0\1\13\1\0"+
    "\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0"+
    "\66\13\50\0\15\13\3\0\20\14\20\0\7\14\14\0\2\13\30\0"+
    "\3\13\31\0\1\13\6\0\5\13\1\0\207\13\2\0\1\14\4\0"+
    "\1\13\13\0\12\14\7\0\32\13\4\0\1\13\1\0\32\13\13\0"+
    "\131\13\3\0\6\13\2\0\6\13\2\0\6\13\2\0\3\13\3\0"+
    "\2\13\3\0\2\13\22\0\3\14\4\0\14\13\1\0\32\13\1\0"+
    "\23\13\1\0\2\13\1\0\17\13\2\0\16\13\42\0\173\13\105\0"+
    "\65\13\210\0\1\14\202\0\35\13\3\0\61\13\57\0\37\13\21\0"+
    "\33\13\65\0\36\13\2\0\44\13\4\0\10\13\1\0\5\13\52\0"+
    "\236\13\2\0\12\14\u0356\0\6\13\2\0\1\13\1\0\54\13\1\0"+
    "\2\13\3\0\1\13\2\0\27\13\252\0\26\13\12\0\32\13\106\0"+
    "\70\13\6\0\2\13\100\0\1\13\3\14\1\0\2\14\5\0\4\14"+
    "\4\13\1\0\3\13\1\0\33\13\4\0\3\14\4\0\1\14\40\0"+
    "\35\13\203\0\66\13\12\0\26\13\12\0\23\13\215\0\111\13\u03b7\0"+
    "\3\14\65\13\17\14\37\0\12\14\20\0\3\14\55\13\13\14\2\0"+
    "\1\14\22\0\31\13\7\0\12\14\6\0\3\14\44\13\16\14\1\0"+
    "\12\14\100\0\3\14\60\13\16\14\4\13\13\0\12\14\u04a6\0\53\13"+
    "\15\14\10\0\12\14\u0936\0\u036f\13\221\0\143\13\u0b9d\0\u042f\13\u33d1\0"+
    "\u0239\13\u04c7\0\105\13\13\0\1\13\56\14\20\0\4\14\15\13\u4060\0"+
    "\2\13\u2163\0\5\14\3\0\26\14\2\0\7\14\36\0\4\14\224\0"+
    "\3\14\u01bb\0\125\13\1\0\107\13\1\0\2\13\2\0\1\13\2\0"+
    "\2\13\2\0\4\13\1\0\14\13\1\0\1\13\1\0\7\13\1\0"+
    "\101\13\1\0\4\13\2\0\10\13\1\0\7\13\1\0\34\13\1\0"+
    "\4\13\1\0\5\13\1\0\1\13\3\0\7\13\1\0\u0154\13\2\0"+
    "\31\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13\1\0"+
    "\31\13\1\0\37\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0"+
    "\10\13\2\0\62\14\u1600\0\4\13\1\0\33\13\1\0\2\13\1\0"+
    "\1\13\2\0\1\13\1\0\12\13\1\0\4\13\1\0\1\13\1\0"+
    "\1\13\6\0\1\13\4\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\3\13\1\0\2\13\1\0\1\13\2\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\2\13\1\0\1\13\2\0"+
    "\4\13\1\0\7\13\1\0\4\13\1\0\4\13\1\0\1\13\1\0"+
    "\12\13\1\0\21\13\5\0\3\13\1\0\5\13\1\0\21\13\u1144\0"+
    "\ua6d7\13\51\0\u1035\13\13\0\336\13\u3fe2\0\u021e\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\14\36\0\140\14\200\0\360\14\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\13\1\14\1\15\1\16\24\11"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\2\1\30\1\31\2\2\3\32\1\2\2\1"+
    "\1\33\1\1\1\34\1\3\1\35\1\11\1\0\1\36"+
    "\1\0\1\37\1\40\1\0\11\11\1\41\1\42\2\11"+
    "\1\43\1\44\4\11\1\45\10\11\1\46\15\11\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\2\57"+
    "\1\30\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\5\61\1\1\1\33\1\0\1\1\3\0\1\11"+
    "\1\70\1\0\1\11\1\71\6\11\1\72\3\11\1\73"+
    "\1\74\1\75\10\11\1\76\2\11\1\77\6\11\1\100"+
    "\4\11\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\33\1\0\1\33\1\11\1\113"+
    "\1\0\1\114\1\0\1\11\1\115\1\116\2\11\1\117"+
    "\2\11\1\120\1\121\3\11\1\122\1\123\1\124\1\125"+
    "\1\11\1\126\4\11\1\127\2\11\1\130\7\11\1\70"+
    "\2\0\1\131\2\11\1\132\2\11\1\133\1\11\1\134"+
    "\3\11\1\135\1\136\1\137\2\11\1\140\4\11\1\0"+
    "\1\141\1\142\1\11\1\143\1\11\1\144\1\11\1\145"+
    "\2\11\1\146\3\11\1\0\1\147\1\150\1\11\1\151"+
    "\1\11\1\152\2\11\1\0\1\153\1\154\2\11\1\0"+
    "\1\155\1\11\1\0\1\11\1\156\164\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u010c\0\u0192"+
    "\0\u010c\0\u01d5\0\u0218\0\u010c\0\u025b\0\u029e\0\u02e1\0\u010c"+
    "\0\u0324\0\u010c\0\u010c\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473"+
    "\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b"+
    "\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u010c"+
    "\0\u010c\0\u08a3\0\u08e6\0\u010c\0\u0929\0\u010c\0\u010c\0\u096c"+
    "\0\u09af\0\u09f2\0\u010c\0\u0a35\0\u0a78\0\u0abb\0\u010c\0\u0a78"+
    "\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u010c\0\u0c4d\0\u010c"+
    "\0\u0c90\0\u0cd3\0\u010c\0\u0d16\0\u010c\0\u010c\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u0c90\0\u103a\0\u107d\0\u0c90\0\u0c90\0\u10c0\0\u1103"+
    "\0\u1146\0\u1189\0\u0c90\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708"+
    "\0\u174b\0\u010c\0\u010c\0\u178e\0\u010c\0\u010c\0\u010c\0\u17d1"+
    "\0\u010c\0\u010c\0\u1814\0\u1857\0\u010c\0\u010c\0\u010c\0\u010c"+
    "\0\u010c\0\u010c\0\u010c\0\u010c\0\u189a\0\u18dd\0\u1920\0\u1963"+
    "\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u0bc7\0\u1ab2\0\u1a2c\0\u1af5"+
    "\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1b38\0\u1c44\0\u1c87\0\u1cca"+
    "\0\u1d0d\0\u1d50\0\u1d93\0\u1b38\0\u1dd6\0\u1e19\0\u1e5c\0\u1b38"+
    "\0\u1b38\0\u1b38\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u1b38\0\u20b7\0\u20fa\0\u1b38\0\u213d\0\u2180"+
    "\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398"+
    "\0\u23db\0\u1b38\0\u1b38\0\u1b38\0\u010c\0\u010c\0\u010c\0\u010c"+
    "\0\u010c\0\u010c\0\u010c\0\u010c\0\u241e\0\u241e\0\u2461\0\u010c"+
    "\0\u24a4\0\u010c\0\u24e7\0\u252a\0\u2461\0\u2461\0\u256d\0\u25b0"+
    "\0\u2461\0\u25f3\0\u2636\0\u2461\0\u2461\0\u2679\0\u26bc\0\u26ff"+
    "\0\u2461\0\u2461\0\u2461\0\u2461\0\u2742\0\u2461\0\u2785\0\u27c8"+
    "\0\u280b\0\u284e\0\u2461\0\u2891\0\u28d4\0\u2461\0\u2917\0\u295a"+
    "\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72"+
    "\0\u2aa9\0\u2bb5\0\u2bf8\0\u2aa9\0\u2c3b\0\u2c7e\0\u2aa9\0\u2cc1"+
    "\0\u2aa9\0\u2d04\0\u2d47\0\u2d8a\0\u2aa9\0\u2aa9\0\u2aa9\0\u2dcd"+
    "\0\u2e10\0\u2aa9\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2f1c"+
    "\0\u2f1c\0\u2fa2\0\u2f1c\0\u2fe5\0\u2f1c\0\u3028\0\u2f1c\0\u306b"+
    "\0\u30ae\0\u2f1c\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u3177\0\u3177"+
    "\0\u31fd\0\u3177\0\u3240\0\u3177\0\u3283\0\u32c6\0\u3309\0\u32c6"+
    "\0\u32c6\0\u334c\0\u338f\0\u33d2\0\u338f\0\u3415\0\u3458\0\u349b"+
    "\0\u010c\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670"+
    "\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888"+
    "\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0"+
    "\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8"+
    "\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0"+
    "\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8"+
    "\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300"+
    "\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518"+
    "\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730"+
    "\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948"+
    "\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60"+
    "\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2\0\u4d35\0\u4d78"+
    "\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90"+
    "\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df\0\u5122\0\u5165\0\u51a8"+
    "\0\u51eb\0\u522e\0\u5271\0\u52b4\0\u010c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\3\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\1\5\1\7\1\16\1\17\2\15\1\20"+
    "\1\15\1\21\1\22\1\23\1\5\1\24\1\25\1\15"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\15\1\40\1\41\1\42\1\43\1\44"+
    "\1\15\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\7\17\3\15"+
    "\25\62\1\63\1\62\1\64\53\62\1\65\1\66\1\67"+
    "\1\70\11\65\1\70\10\65\1\5\1\71\53\65\5\4"+
    "\1\72\1\73\1\74\1\4\1\73\1\75\70\4\105\0"+
    "\1\7\163\0\1\76\27\0\1\77\52\0\1\100\24\0"+
    "\1\14\110\0\7\101\1\0\1\101\4\0\27\101\12\0"+
    "\12\101\16\0\2\102\1\103\1\0\1\104\16\0\1\103"+
    "\27\0\7\102\21\0\2\17\1\103\1\0\1\104\16\0"+
    "\1\103\27\0\7\17\27\0\1\105\36\0\1\106\5\0"+
    "\1\107\24\0\7\101\1\0\1\101\4\0\1\101\1\110"+
    "\5\101\1\111\17\101\12\0\12\101\13\0\7\101\1\0"+
    "\1\101\4\0\4\101\1\112\22\101\12\0\12\101\13\0"+
    "\7\101\1\0\1\101\4\0\2\101\1\113\1\101\1\114"+
    "\3\101\1\115\16\101\12\0\12\101\13\0\7\101\1\0"+
    "\1\101\4\0\7\101\1\116\1\101\1\117\15\101\12\0"+
    "\12\101\13\0\7\101\1\0\1\101\4\0\10\101\1\120"+
    "\16\101\12\0\12\101\13\0\7\101\1\0\1\101\4\0"+
    "\7\101\1\121\10\101\1\122\6\101\12\0\12\101\13\0"+
    "\7\101\1\0\1\101\4\0\6\101\1\123\1\101\1\124"+
    "\16\101\12\0\12\101\13\0\7\101\1\0\1\101\4\0"+
    "\1\101\1\125\16\101\1\126\6\101\12\0\12\101\13\0"+
    "\7\101\1\0\1\101\4\0\1\127\7\101\1\130\16\101"+
    "\12\0\12\101\13\0\7\101\1\0\1\101\4\0\1\101"+
    "\1\131\1\132\5\101\1\133\4\101\1\134\11\101\12\0"+
    "\12\101\13\0\7\101\1\0\1\101\4\0\1\135\7\101"+
    "\1\136\4\101\1\137\11\101\12\0\12\101\13\0\7\101"+
    "\1\0\1\101\4\0\4\101\1\140\5\101\1\141\2\101"+
    "\1\142\11\101\12\0\12\101\13\0\7\101\1\0\1\101"+
    "\4\0\6\101\1\143\1\101\1\144\16\101\12\0\12\101"+
    "\13\0\7\101\1\0\1\101\4\0\1\101\1\145\4\101"+
    "\1\146\6\101\1\147\11\101\12\0\12\101\13\0\7\101"+
    "\1\0\1\101\4\0\1\150\5\101\1\151\1\101\1\152"+
    "\10\101\1\153\5\101\12\0\12\101\13\0\7\101\1\0"+
    "\1\101\4\0\7\101\1\154\17\101\12\0\12\101\13\0"+
    "\7\101\1\0\1\101\4\0\1\155\1\156\25\101\12\0"+
    "\12\101\13\0\7\101\1\0\1\101\4\0\10\101\1\157"+
    "\16\101\12\0\12\101\13\0\7\101\1\0\1\101\4\0"+
    "\1\160\26\101\12\0\12\101\13\0\7\101\1\0\1\101"+
    "\4\0\10\101\1\161\16\101\12\0\12\101\61\0\1\162"+
    "\1\0\1\163\101\0\1\164\1\165\101\0\1\166\1\167"+
    "\1\170\101\0\1\171\35\0\1\172\1\173\51\0\7\173"+
    "\3\0\25\174\1\175\1\174\1\0\53\174\1\176\3\0"+
    "\11\176\1\0\7\176\1\177\1\200\1\201\51\176\1\202"+
    "\1\203\26\0\1\204\56\0\1\67\100\0\1\176\3\0"+
    "\11\176\1\0\7\176\1\205\1\206\1\207\51\176\1\210"+
    "\1\211\5\73\1\72\1\212\1\213\2\73\1\214\75\73"+
    "\1\72\1\73\1\213\2\73\1\214\70\73\5\215\1\216"+
    "\1\217\2\215\1\217\71\215\5\75\1\220\1\214\1\74"+
    "\1\75\1\214\71\75\1\77\1\6\1\7\100\77\13\0"+
    "\7\221\1\0\1\221\4\0\27\221\12\0\12\221\16\0"+
    "\2\102\2\0\1\104\46\0\7\102\21\0\2\222\51\0"+
    "\7\222\75\0\1\223\23\0\7\221\1\0\1\221\4\0"+
    "\1\221\1\224\25\221\12\0\12\221\13\0\7\221\1\0"+
    "\1\221\4\0\16\221\1\225\10\221\12\0\12\221\13\0"+
    "\7\221\1\0\1\221\4\0\1\226\12\221\1\227\6\221"+
    "\1\230\4\221\12\0\12\221\13\0\7\221\1\0\1\221"+
    "\4\0\12\221\1\231\14\221\12\0\12\221\13\0\7\221"+
    "\1\0\1\221\4\0\5\221\1\232\21\221\12\0\12\221"+
    "\13\0\7\221\1\0\1\221\4\0\10\221\1\233\16\221"+
    "\12\0\12\221\13\0\7\221\1\0\1\221\4\0\16\221"+
    "\1\234\10\221\12\0\12\221\13\0\7\221\1\0\1\221"+
    "\4\0\14\221\1\235\12\221\12\0\12\221\13\0\7\221"+
    "\1\0\1\221\4\0\12\221\1\236\14\221\12\0\12\221"+
    "\13\0\7\221\1\0\1\221\4\0\11\221\1\237\1\240"+
    "\14\221\12\0\12\221\13\0\7\221\1\0\1\221\4\0"+
    "\11\221\1\241\15\221\12\0\12\221\13\0\7\221\1\0"+
    "\1\221\4\0\12\221\1\242\14\221\12\0\12\221\13\0"+
    "\7\221\1\0\1\221\4\0\3\221\1\243\23\221\12\0"+
    "\12\221\13\0\7\221\1\0\1\221\4\0\7\221\1\244"+
    "\17\221\12\0\12\221\13\0\7\221\1\0\1\221\4\0"+
    "\21\221\1\245\5\221\12\0\12\221\13\0\7\221\1\0"+
    "\1\221\4\0\22\221\1\246\4\221\12\0\12\221\13\0"+
    "\7\221\1\0\1\221\4\0\4\221\1\247\22\221\12\0"+
    "\12\221\13\0\7\221\1\0\1\221\4\0\14\221\1\250"+
    "\12\221\12\0\12\221\13\0\7\221\1\0\1\221\4\0"+
    "\7\221\1\251\17\221\12\0\12\221\13\0\7\221\1\0"+
    "\1\221\4\0\1\252\26\221\12\0\12\221\13\0\7\221"+
    "\1\0\1\221\4\0\12\221\1\253\14\221\12\0\12\221"+
    "\13\0\7\221\1\0\1\221\4\0\1\221\1\254\25\221"+
    "\12\0\12\221\13\0\7\221\1\0\1\221\4\0\10\221"+
    "\1\255\16\221\12\0\12\221\13\0\7\221\1\0\1\221"+
    "\4\0\25\221\1\256\1\221\12\0\12\221\13\0\7\221"+
    "\1\0\1\221\4\0\17\221\1\257\7\221\12\0\12\221"+
    "\13\0\7\221\1\0\1\221\4\0\6\221\1\260\20\221"+
    "\12\0\12\221\13\0\7\221\1\0\1\221\4\0\12\221"+
    "\1\261\14\221\12\0\12\221\13\0\7\221\1\0\1\221"+
    "\4\0\6\221\1\262\20\221\12\0\12\221\13\0\7\221"+
    "\1\0\1\221\4\0\11\221\1\263\15\221\12\0\12\221"+
    "\13\0\7\221\1\0\1\221\4\0\11\221\1\264\15\221"+
    "\12\0\12\221\13\0\7\221\1\0\1\221\4\0\1\221"+
    "\1\265\25\221\12\0\12\221\13\0\7\221\1\0\1\221"+
    "\4\0\7\221\1\266\17\221\12\0\12\221\13\0\7\221"+
    "\1\0\1\221\4\0\12\221\1\267\14\221\12\0\12\221"+
    "\13\0\7\221\1\0\1\221\4\0\13\221\1\270\13\221"+
    "\12\0\12\221\13\0\7\221\1\0\1\221\4\0\10\221"+
    "\1\271\16\221\12\0\12\221\13\0\7\221\1\0\1\221"+
    "\4\0\16\221\1\272\10\221\12\0\12\221\13\0\7\221"+
    "\1\0\1\221\4\0\1\221\1\273\25\221\12\0\12\221"+
    "\13\0\7\221\1\0\1\221\4\0\1\221\1\274\25\221"+
    "\12\0\12\221\63\0\1\275\102\0\1\276\35\0\2\173"+
    "\51\0\7\173\3\0\25\174\1\0\1\174\1\0\53\174"+
    "\26\0\1\277\102\0\1\300\102\0\1\301\102\0\1\302"+
    "\102\0\1\303\54\0\7\212\1\304\2\212\1\305\70\212"+
    "\5\217\1\216\75\217\5\214\1\220\1\214\1\213\73\214"+
    "\5\217\1\216\1\304\74\217\5\214\1\220\1\306\1\213"+
    "\73\214\13\0\7\307\1\0\1\307\4\0\27\307\12\0"+
    "\12\307\16\0\2\222\1\0\1\310\1\0\1\311\10\0"+
    "\1\311\11\0\1\312\1\0\1\310\20\0\7\222\1\312"+
    "\75\0\1\313\22\0\7\307\1\0\1\307\4\0\1\314"+
    "\26\307\12\0\12\307\13\0\7\307\1\0\1\307\4\0"+
    "\11\307\1\315\4\307\1\316\10\307\12\0\12\307\13\0"+
    "\7\307\1\0\1\307\4\0\10\307\1\317\16\307\12\0"+
    "\12\307\13\0\7\307\1\0\1\307\4\0\4\307\1\320"+
    "\22\307\12\0\12\307\13\0\7\307\1\0\1\307\4\0"+
    "\4\307\1\321\22\307\12\0\12\307\13\0\7\307\1\0"+
    "\1\307\4\0\6\307\1\322\20\307\12\0\12\307\13\0"+
    "\7\307\1\0\1\307\4\0\11\307\1\323\15\307\12\0"+
    "\12\307\13\0\7\307\1\0\1\307\4\0\4\307\1\324"+
    "\22\307\12\0\12\307\13\0\7\307\1\0\1\307\4\0"+
    "\10\307\1\325\16\307\12\0\12\307\13\0\7\307\1\0"+
    "\1\307\4\0\6\307\1\326\20\307\12\0\12\307\13\0"+
    "\7\307\1\0\1\307\4\0\4\307\1\327\22\307\12\0"+
    "\12\307\13\0\7\307\1\0\1\307\4\0\5\307\1\330"+
    "\21\307\12\0\12\307\13\0\7\307\1\0\1\307\4\0"+
    "\4\307\1\331\22\307\12\0\12\307\13\0\7\307\1\0"+
    "\1\307\4\0\4\307\1\332\22\307\12\0\12\307\13\0"+
    "\7\307\1\0\1\307\4\0\7\307\1\333\17\307\12\0"+
    "\12\307\13\0\7\307\1\0\1\307\4\0\4\307\1\334"+
    "\22\307\12\0\12\307\13\0\7\307\1\0\1\307\4\0"+
    "\14\307\1\335\12\307\12\0\12\307\13\0\7\307\1\0"+
    "\1\307\4\0\1\307\1\336\25\307\12\0\12\307\13\0"+
    "\7\307\1\0\1\307\4\0\6\307\1\337\20\307\12\0"+
    "\12\307\13\0\7\307\1\0\1\307\4\0\1\307\1\340"+
    "\25\307\12\0\12\307\13\0\7\307\1\0\1\307\4\0"+
    "\7\307\1\341\17\307\12\0\12\307\13\0\7\307\1\0"+
    "\1\307\4\0\12\307\1\342\14\307\12\0\12\307\13\0"+
    "\7\307\1\0\1\307\4\0\15\307\1\343\11\307\12\0"+
    "\12\307\13\0\7\307\1\0\1\307\4\0\11\307\1\344"+
    "\15\307\12\0\12\307\13\0\7\307\1\0\1\307\4\0"+
    "\14\307\1\345\12\307\12\0\12\307\13\0\7\307\1\0"+
    "\1\307\4\0\4\307\1\346\22\307\12\0\12\307\13\0"+
    "\7\307\1\0\1\307\4\0\17\307\1\347\7\307\12\0"+
    "\12\307\13\0\7\307\1\0\1\307\4\0\13\307\1\350"+
    "\13\307\12\0\12\307\13\0\7\307\1\0\1\307\4\0"+
    "\6\307\1\351\20\307\12\0\12\307\13\0\7\307\1\0"+
    "\1\307\4\0\23\307\1\352\3\307\12\0\12\307\13\0"+
    "\7\307\1\0\1\307\4\0\5\307\1\353\5\307\1\354"+
    "\13\307\12\0\12\307\7\305\1\304\73\305\13\0\7\355"+
    "\1\0\1\355\4\0\27\355\12\0\12\355\16\0\2\356"+
    "\4\0\1\357\34\0\1\357\7\0\7\356\77\0\1\360"+
    "\21\0\7\355\1\0\1\355\4\0\2\355\1\361\24\355"+
    "\12\0\12\355\13\0\7\355\1\0\1\355\4\0\1\355"+
    "\1\362\25\355\12\0\12\355\13\0\7\355\1\0\1\355"+
    "\4\0\1\363\26\355\12\0\12\355\13\0\7\355\1\0"+
    "\1\355\4\0\7\355\1\364\17\355\12\0\12\355\13\0"+
    "\7\355\1\0\1\355\4\0\4\355\1\365\22\355\12\0"+
    "\12\355\13\0\7\355\1\0\1\355\4\0\7\355\1\366"+
    "\17\355\12\0\12\355\13\0\7\355\1\0\1\355\4\0"+
    "\11\355\1\367\15\355\12\0\12\355\13\0\7\355\1\0"+
    "\1\355\4\0\6\355\1\370\20\355\12\0\12\355\13\0"+
    "\7\355\1\0\1\355\4\0\12\355\1\371\14\355\12\0"+
    "\12\355\13\0\7\355\1\0\1\355\4\0\7\355\1\372"+
    "\17\355\12\0\12\355\13\0\7\355\1\0\1\355\4\0"+
    "\12\355\1\373\14\355\12\0\12\355\13\0\7\355\1\0"+
    "\1\355\4\0\12\355\1\374\14\355\12\0\12\355\13\0"+
    "\7\355\1\0\1\355\4\0\4\355\1\375\22\355\12\0"+
    "\12\355\13\0\7\355\1\0\1\355\4\0\4\355\1\376"+
    "\22\355\12\0\12\355\13\0\7\355\1\0\1\355\4\0"+
    "\4\355\1\377\22\355\12\0\12\355\13\0\7\355\1\0"+
    "\1\355\4\0\1\u0100\26\355\12\0\12\355\13\0\7\355"+
    "\1\0\1\355\4\0\12\355\1\u0101\14\355\12\0\12\355"+
    "\13\0\7\355\1\0\1\355\4\0\11\355\1\u0102\15\355"+
    "\12\0\12\355\13\0\7\355\1\0\1\355\4\0\4\355"+
    "\1\u0103\22\355\12\0\12\355\13\0\7\355\1\0\1\355"+
    "\4\0\1\355\1\u0104\25\355\12\0\12\355\13\0\7\355"+
    "\1\0\1\355\4\0\4\355\1\u0105\22\355\12\0\12\355"+
    "\13\0\7\u0106\1\0\1\u0106\4\0\27\u0106\12\0\12\u0106"+
    "\16\0\2\356\1\0\1\310\24\0\1\312\1\0\1\310"+
    "\20\0\7\356\1\312\20\0\2\356\51\0\7\356\76\0"+
    "\1\u0107\22\0\7\u0106\1\0\1\u0106\4\0\16\u0106\1\u0108"+
    "\10\u0106\12\0\12\u0106\13\0\7\u0106\1\0\1\u0106\4\0"+
    "\12\u0106\1\u0109\14\u0106\12\0\12\u0106\13\0\7\u0106\1\0"+
    "\1\u0106\4\0\1\u010a\26\u0106\12\0\12\u0106\13\0\7\u0106"+
    "\1\0\1\u0106\4\0\4\u0106\1\u010b\22\u0106\12\0\12\u0106"+
    "\13\0\7\u0106\1\0\1\u0106\4\0\7\u0106\1\u010c\17\u0106"+
    "\12\0\12\u0106\13\0\7\u0106\1\0\1\u0106\4\0\5\u0106"+
    "\1\u010d\21\u0106\12\0\12\u0106\13\0\7\u0106\1\0\1\u0106"+
    "\4\0\6\u0106\1\u010e\20\u0106\12\0\12\u0106\13\0\7\u0106"+
    "\1\0\1\u0106\4\0\10\u0106\1\u010f\16\u0106\12\0\12\u0106"+
    "\13\0\7\u0106\1\0\1\u0106\4\0\1\u0106\1\u0110\25\u0106"+
    "\12\0\12\u0106\13\0\7\u0106\1\0\1\u0106\4\0\6\u0106"+
    "\1\u0111\20\u0106\12\0\12\u0106\13\0\7\u0106\1\0\1\u0106"+
    "\4\0\16\u0106\1\u0112\10\u0106\12\0\12\u0106\13\0\7\u0106"+
    "\1\0\1\u0106\4\0\1\u0113\26\u0106\12\0\12\u0106\13\0"+
    "\7\u0106\1\0\1\u0106\4\0\16\u0106\1\u0114\10\u0106\12\0"+
    "\12\u0106\13\0\7\u0115\1\0\1\u0115\4\0\27\u0115\12\0"+
    "\12\u0115\75\0\1\u0116\20\0\7\u0115\1\0\1\u0115\4\0"+
    "\7\u0115\1\u0117\17\u0115\12\0\12\u0115\13\0\7\u0115\1\0"+
    "\1\u0115\4\0\12\u0115\1\u0118\14\u0115\12\0\12\u0115\13\0"+
    "\7\u0115\1\0\1\u0115\4\0\7\u0115\1\u0119\17\u0115\12\0"+
    "\12\u0115\13\0\7\u0115\1\0\1\u0115\4\0\16\u0115\1\u011a"+
    "\10\u0115\12\0\12\u0115\13\0\7\u0115\1\0\1\u0115\4\0"+
    "\10\u0115\1\u011b\16\u0115\12\0\12\u0115\13\0\7\u0115\1\0"+
    "\1\u0115\4\0\24\u0115\1\u011c\2\u0115\12\0\12\u0115\13\0"+
    "\7\u0115\1\0\1\u0115\4\0\21\u0115\1\u011d\5\u0115\12\0"+
    "\12\u0115\13\0\7\u011e\1\0\1\u011e\4\0\27\u011e\12\0"+
    "\12\u011e\76\0\1\u011f\17\0\7\u011e\1\0\1\u011e\4\0"+
    "\12\u011e\1\u0120\14\u011e\12\0\12\u011e\13\0\7\u011e\1\0"+
    "\1\u011e\4\0\7\u011e\1\u0121\17\u011e\12\0\12\u011e\13\0"+
    "\7\u011e\1\0\1\u011e\4\0\1\u011e\1\u0122\25\u011e\12\0"+
    "\12\u011e\13\0\7\u0123\1\0\1\u0123\4\0\27\u0123\12\0"+
    "\12\u0123\77\0\1\u0124\16\0\7\u0123\1\0\1\u0123\4\0"+
    "\4\u0123\1\u0125\22\u0123\12\0\12\u0123\13\0\7\u0126\1\0"+
    "\1\u0126\4\0\27\u0126\12\0\12\u0126\73\0\1\u0127\22\0"+
    "\7\u0128\1\0\1\u0128\4\0\27\u0128\12\0\12\u0128\75\0"+
    "\1\u0129\20\0\7\u012a\1\0\1\u012a\4\0\27\u012a\12\0"+
    "\12\u012a\13\0\7\u012b\1\0\1\u012b\4\0\27\u012b\12\0"+
    "\12\u012b\13\0\7\u012c\1\0\1\u012c\4\0\27\u012c\12\0"+
    "\12\u012c\13\0\7\u012d\1\0\1\u012d\4\0\27\u012d\12\0"+
    "\12\u012d\13\0\7\u012e\1\0\1\u012e\4\0\27\u012e\12\0"+
    "\12\u012e\13\0\7\u012f\1\0\1\u012f\4\0\27\u012f\12\0"+
    "\12\u012f\13\0\7\u0130\1\0\1\u0130\4\0\27\u0130\12\0"+
    "\12\u0130\13\0\7\u0131\1\0\1\u0131\4\0\27\u0131\12\0"+
    "\12\u0131\13\0\7\u0132\1\0\1\u0132\4\0\27\u0132\12\0"+
    "\12\u0132\13\0\7\u0133\1\0\1\u0133\4\0\27\u0133\12\0"+
    "\12\u0133\13\0\7\u0134\1\0\1\u0134\4\0\27\u0134\12\0"+
    "\12\u0134\13\0\7\u0135\1\0\1\u0135\4\0\27\u0135\12\0"+
    "\12\u0135\13\0\7\u0136\1\0\1\u0136\4\0\27\u0136\12\0"+
    "\12\u0136\13\0\7\u0137\1\0\1\u0137\4\0\27\u0137\12\0"+
    "\12\u0137\13\0\7\u0138\1\0\1\u0138\4\0\27\u0138\12\0"+
    "\12\u0138\13\0\7\u0139\1\0\1\u0139\4\0\27\u0139\12\0"+
    "\12\u0139\13\0\7\u013a\1\0\1\u013a\4\0\27\u013a\12\0"+
    "\12\u013a\13\0\7\u013b\1\0\1\u013b\4\0\27\u013b\12\0"+
    "\12\u013b\13\0\7\u013c\1\0\1\u013c\4\0\27\u013c\12\0"+
    "\12\u013c\13\0\7\u013d\1\0\1\u013d\4\0\27\u013d\12\0"+
    "\12\u013d\13\0\7\u013e\1\0\1\u013e\4\0\27\u013e\12\0"+
    "\12\u013e\13\0\7\u013f\1\0\1\u013f\4\0\27\u013f\12\0"+
    "\12\u013f\13\0\7\u0140\1\0\1\u0140\4\0\27\u0140\12\0"+
    "\12\u0140\13\0\7\u0141\1\0\1\u0141\4\0\27\u0141\12\0"+
    "\12\u0141\13\0\7\u0142\1\0\1\u0142\4\0\27\u0142\12\0"+
    "\12\u0142\13\0\7\u0143\1\0\1\u0143\4\0\27\u0143\12\0"+
    "\12\u0143\13\0\7\u0144\1\0\1\u0144\4\0\27\u0144\12\0"+
    "\12\u0144\13\0\7\u0145\1\0\1\u0145\4\0\27\u0145\12\0"+
    "\12\u0145\13\0\7\u0146\1\0\1\u0146\4\0\27\u0146\12\0"+
    "\12\u0146\13\0\7\u0147\1\0\1\u0147\4\0\27\u0147\12\0"+
    "\12\u0147\13\0\7\u0148\1\0\1\u0148\4\0\27\u0148\12\0"+
    "\12\u0148\13\0\7\u0149\1\0\1\u0149\4\0\27\u0149\12\0"+
    "\12\u0149\13\0\7\u014a\1\0\1\u014a\4\0\27\u014a\12\0"+
    "\12\u014a\13\0\7\u014b\1\0\1\u014b\4\0\27\u014b\12\0"+
    "\12\u014b\13\0\7\u014c\1\0\1\u014c\4\0\27\u014c\12\0"+
    "\12\u014c\13\0\7\u014d\1\0\1\u014d\4\0\27\u014d\12\0"+
    "\12\u014d\13\0\7\u014e\1\0\1\u014e\4\0\27\u014e\12\0"+
    "\12\u014e\13\0\7\u014f\1\0\1\u014f\4\0\27\u014f\12\0"+
    "\12\u014f\13\0\7\u0150\1\0\1\u0150\4\0\27\u0150\12\0"+
    "\12\u0150\13\0\7\u0151\1\0\1\u0151\4\0\27\u0151\12\0"+
    "\12\u0151\13\0\7\u0152\1\0\1\u0152\4\0\27\u0152\12\0"+
    "\12\u0152\13\0\7\u0153\1\0\1\u0153\4\0\27\u0153\12\0"+
    "\12\u0153\13\0\7\u0154\1\0\1\u0154\4\0\27\u0154\12\0"+
    "\12\u0154\13\0\7\u0155\1\0\1\u0155\4\0\27\u0155\12\0"+
    "\12\u0155\13\0\7\u0156\1\0\1\u0156\4\0\27\u0156\12\0"+
    "\12\u0156\13\0\7\u0157\1\0\1\u0157\4\0\27\u0157\12\0"+
    "\12\u0157\13\0\7\u0158\1\0\1\u0158\4\0\27\u0158\12\0"+
    "\12\u0158\13\0\7\u0159\1\0\1\u0159\4\0\27\u0159\12\0"+
    "\12\u0159\13\0\7\u015a\1\0\1\u015a\4\0\27\u015a\12\0"+
    "\12\u015a\13\0\7\u015b\1\0\1\u015b\4\0\27\u015b\12\0"+
    "\12\u015b\13\0\7\u015c\1\0\1\u015c\4\0\27\u015c\12\0"+
    "\12\u015c\13\0\7\u015d\1\0\1\u015d\4\0\27\u015d\12\0"+
    "\12\u015d\13\0\7\u015e\1\0\1\u015e\4\0\27\u015e\12\0"+
    "\12\u015e\13\0\7\u015f\1\0\1\u015f\4\0\27\u015f\12\0"+
    "\12\u015f\13\0\7\u0160\1\0\1\u0160\4\0\27\u0160\12\0"+
    "\12\u0160\13\0\7\u0161\1\0\1\u0161\4\0\27\u0161\12\0"+
    "\12\u0161\13\0\7\u0162\1\0\1\u0162\4\0\27\u0162\12\0"+
    "\12\u0162\13\0\7\u0163\1\0\1\u0163\4\0\27\u0163\12\0"+
    "\12\u0163\13\0\7\u0164\1\0\1\u0164\4\0\27\u0164\12\0"+
    "\12\u0164\13\0\7\u0165\1\0\1\u0165\4\0\27\u0165\12\0"+
    "\12\u0165\13\0\7\u0166\1\0\1\u0166\4\0\27\u0166\12\0"+
    "\12\u0166\13\0\7\u0167\1\0\1\u0167\4\0\27\u0167\12\0"+
    "\12\u0167\13\0\7\u0168\1\0\1\u0168\4\0\27\u0168\12\0"+
    "\12\u0168\13\0\7\u0169\1\0\1\u0169\4\0\27\u0169\12\0"+
    "\12\u0169\13\0\7\u016a\1\0\1\u016a\4\0\27\u016a\12\0"+
    "\12\u016a\13\0\7\u016b\1\0\1\u016b\4\0\27\u016b\12\0"+
    "\12\u016b\13\0\7\u016c\1\0\1\u016c\4\0\27\u016c\12\0"+
    "\12\u016c\13\0\7\u016d\1\0\1\u016d\4\0\27\u016d\12\0"+
    "\12\u016d\13\0\7\u016e\1\0\1\u016e\4\0\27\u016e\12\0"+
    "\12\u016e\13\0\7\u016f\1\0\1\u016f\4\0\27\u016f\12\0"+
    "\12\u016f\13\0\7\u0170\1\0\1\u0170\4\0\27\u0170\12\0"+
    "\12\u0170\13\0\7\u0171\1\0\1\u0171\4\0\27\u0171\12\0"+
    "\12\u0171\13\0\7\u0172\1\0\1\u0172\4\0\27\u0172\12\0"+
    "\12\u0172\13\0\7\u0173\1\0\1\u0173\4\0\27\u0173\12\0"+
    "\12\u0173\13\0\7\u0174\1\0\1\u0174\4\0\27\u0174\12\0"+
    "\12\u0174\13\0\7\u0175\1\0\1\u0175\4\0\27\u0175\12\0"+
    "\12\u0175\13\0\7\u0176\1\0\1\u0176\4\0\27\u0176\12\0"+
    "\12\u0176\13\0\7\u0177\1\0\1\u0177\4\0\27\u0177\12\0"+
    "\12\u0177\13\0\7\u0178\1\0\1\u0178\4\0\27\u0178\12\0"+
    "\12\u0178\13\0\7\u0179\1\0\1\u0179\4\0\27\u0179\12\0"+
    "\12\u0179\13\0\7\u017a\1\0\1\u017a\4\0\27\u017a\12\0"+
    "\12\u017a\13\0\7\u017b\1\0\1\u017b\4\0\27\u017b\12\0"+
    "\12\u017b\13\0\7\u017c\1\0\1\u017c\4\0\27\u017c\12\0"+
    "\12\u017c\13\0\7\u017d\1\0\1\u017d\4\0\27\u017d\12\0"+
    "\12\u017d\13\0\7\u017e\1\0\1\u017e\4\0\27\u017e\12\0"+
    "\12\u017e\13\0\7\u017f\1\0\1\u017f\4\0\27\u017f\12\0"+
    "\12\u017f\13\0\7\u0180\1\0\1\u0180\4\0\27\u0180\12\0"+
    "\12\u0180\13\0\7\u0181\1\0\1\u0181\4\0\27\u0181\12\0"+
    "\12\u0181\13\0\7\u0182\1\0\1\u0182\4\0\27\u0182\12\0"+
    "\12\u0182\13\0\7\u0183\1\0\1\u0183\4\0\27\u0183\12\0"+
    "\12\u0183\13\0\7\u0184\1\0\1\u0184\4\0\27\u0184\12\0"+
    "\12\u0184\13\0\7\u0185\1\0\1\u0185\4\0\27\u0185\12\0"+
    "\12\u0185\13\0\7\u0186\1\0\1\u0186\4\0\27\u0186\12\0"+
    "\12\u0186\13\0\7\u0187\1\0\1\u0187\4\0\27\u0187\12\0"+
    "\12\u0187\13\0\7\u0188\1\0\1\u0188\4\0\27\u0188\12\0"+
    "\12\u0188\13\0\7\u0189\1\0\1\u0189\4\0\27\u0189\12\0"+
    "\12\u0189\13\0\7\u018a\1\0\1\u018a\4\0\27\u018a\12\0"+
    "\12\u018a\13\0\7\u018b\1\0\1\u018b\4\0\27\u018b\12\0"+
    "\12\u018b\13\0\7\u018c\1\0\1\u018c\4\0\27\u018c\12\0"+
    "\12\u018c\13\0\7\u018d\1\0\1\u018d\4\0\27\u018d\12\0"+
    "\12\u018d\13\0\7\u018e\1\0\1\u018e\4\0\27\u018e\12\0"+
    "\12\u018e\13\0\7\u018f\1\0\1\u018f\4\0\27\u018f\12\0"+
    "\12\u018f\13\0\7\u0190\1\0\1\u0190\4\0\27\u0190\12\0"+
    "\12\u0190\13\0\7\u0191\1\0\1\u0191\4\0\27\u0191\12\0"+
    "\12\u0191\13\0\7\u0192\1\0\1\u0192\4\0\27\u0192\12\0"+
    "\12\u0192\13\0\7\u0193\1\0\1\u0193\4\0\27\u0193\12\0"+
    "\12\u0193\13\0\7\u0194\1\0\1\u0194\4\0\27\u0194\12\0"+
    "\12\u0194\13\0\7\u0195\1\0\1\u0195\4\0\27\u0195\12\0"+
    "\12\u0195\13\0\7\u0196\1\0\1\u0196\4\0\27\u0196\12\0"+
    "\12\u0196\13\0\7\u0197\1\0\1\u0197\4\0\27\u0197\12\0"+
    "\12\u0197\13\0\7\u0198\1\0\1\u0198\4\0\27\u0198\12\0"+
    "\12\u0198\13\0\7\u0199\1\0\1\u0199\4\0\27\u0199\12\0"+
    "\12\u0199\13\0\7\u019a\1\0\1\u019a\4\0\27\u019a\12\0"+
    "\12\u019a\13\0\7\u019b\1\0\1\u019b\4\0\27\u019b\12\0"+
    "\12\u019b\13\0\7\u019c\1\0\1\u019c\4\0\27\u019c\12\0"+
    "\12\u019c\13\0\7\u019d\1\0\1\u019d\4\0\27\u019d\12\0"+
    "\12\u019d";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21239];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\1\11\3\1\1\11\1\1\2\11\24\1\2\11\2\1"+
    "\1\11\1\1\2\11\3\1\1\11\3\1\1\11\6\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\11\1\0\2\11"+
    "\1\0\52\1\2\11\1\1\3\11\1\1\2\11\2\1"+
    "\10\11\7\1\1\0\1\1\3\0\2\1\1\0\51\1"+
    "\10\11\1\0\2\1\1\11\1\0\1\11\1\0\43\1"+
    "\2\0\26\1\1\0\16\1\1\0\10\1\1\0\4\1"+
    "\1\0\2\1\1\0\1\1\1\11\163\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new PclSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new PclSymbol(type, yyline+1, yycolumn+1, value);
  }

  private void printError(String type){
    System.out.println("Error: line:" + (yyline+1) + " col:" + (yycolumn+1) + " type:" + type);
  }

  public java_cup.runtime.Symbol custom_debug_next_token() throws java.io.IOException {
      java_cup.runtime.Symbol s = next_token();
      //System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
      return s;
  }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2894) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              printError("Unterminated string at end of file"); return symbol(EOF);
            }
            case 414: break;
            case CHARLITERAL: {
              printError("Unterminated character at end of file"); return symbol(EOF);
            }
            case 415: break;
            case COMMENT: {
              printError("Unterminated comment at end of file"); return symbol(EOF);
            }
            case 416: break;
            default:
              {
                return symbol(EOF);
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 111: break;
          case 2: 
            { printError("Illegal character \""+yytext()+
                                                              "\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
          case 112: break;
          case 3: 
            { /* ignore */
            }
          case 113: break;
          case 4: 
            { return symbol(MULT       , yytext());
            }
          case 114: break;
          case 5: 
            { return symbol(RPAREN     , yytext());
            }
          case 115: break;
          case 6: 
            { return symbol(DIV_SYM    , yytext());
            }
          case 116: break;
          case 7: 
            { return symbol(LPAREN     , yytext());
            }
          case 117: break;
          case 8: 
            { yybegin(COMMENT);
            }
          case 118: break;
          case 9: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 119: break;
          case 10: 
            { return symbol(INTEGER_LITERAL, new Integer(yytext()));
            }
          case 120: break;
          case 11: 
            { return symbol(DOT        , yytext());
            }
          case 121: break;
          case 12: 
            { return symbol(MINUS      , yytext());
            }
          case 122: break;
          case 13: 
            { yybegin(STRING); string.setLength(0);
            }
          case 123: break;
          case 14: 
            { yybegin(CHARLITERAL);
            }
          case 124: break;
          case 15: 
            { return symbol(COMMA      , yytext());
            }
          case 125: break;
          case 16: 
            { return symbol(SEMICOLON  , yytext());
            }
          case 126: break;
          case 17: 
            { return symbol(PLUS       , yytext());
            }
          case 127: break;
          case 18: 
            { return symbol(GT         , yytext());
            }
          case 128: break;
          case 19: 
            { return symbol(EQ         , yytext());
            }
          case 129: break;
          case 20: 
            { return symbol(LT         , yytext());
            }
          case 130: break;
          case 21: 
            { return symbol(LBRACK     , yytext());
            }
          case 131: break;
          case 22: 
            { return symbol(RBRACK     , yytext());
            }
          case 132: break;
          case 23: 
            { return symbol(COLON      , yytext());
            }
          case 133: break;
          case 24: 
            { string.append( yytext() );
            }
          case 134: break;
          case 25: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          case 135: break;
          case 26: 
            { printError("Unterminated character literal at end of line");
            }
          case 136: break;
          case 27: 
            { yybegin(YYINITIAL);
            }
          case 137: break;
          case 28: 
            { return symbol(MULTEQ     , yytext());
            }
          case 138: break;
          case 29: 
            { return symbol(DIVEQ      , yytext());
            }
          case 139: break;
          case 30: 
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 140: break;
          case 31: 
            { return symbol(MINUSMINUS , yytext());
            }
          case 141: break;
          case 32: 
            { return symbol(MINUSEQ    , yytext());
            }
          case 142: break;
          case 33: 
            { return symbol(IN         , yytext());
            }
          case 143: break;
          case 34: 
            { return symbol(IF         , yytext());
            }
          case 144: break;
          case 35: 
            { return symbol(OR,yytext());
            }
          case 145: break;
          case 36: 
            { return symbol(OF         , yytext());
            }
          case 146: break;
          case 37: 
            { return symbol(TO         , yytext());
            }
          case 147: break;
          case 38: 
            { return symbol(DO         , yytext());
            }
          case 148: break;
          case 39: 
            { return symbol(PLUSPLUS   , yytext());
            }
          case 149: break;
          case 40: 
            { return symbol(PLUSEQ     , yytext());
            }
          case 150: break;
          case 41: 
            { return symbol(RSHIFT     , yytext());
            }
          case 151: break;
          case 42: 
            { return symbol(GTEQ       , yytext());
            }
          case 152: break;
          case 43: 
            { return symbol(NEQ        , yytext());
            }
          case 153: break;
          case 44: 
            { return symbol(LTEQ       , yytext());
            }
          case 154: break;
          case 45: 
            { return symbol(LSHIFT     , yytext());
            }
          case 155: break;
          case 46: 
            { return symbol(ASSIGN     , yytext());
            }
          case 156: break;
          case 47: 
            { return symbol(CHARACTER_LITERAL, yytext());
            }
          case 157: break;
          case 48: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL,yytext().charAt(0));
            }
          case 158: break;
          case 49: 
            { printError("Illegal escape sequence \""+yytext()+"\"");
            }
          case 159: break;
          case 50: 
            { string.append( '\"' );
            }
          case 160: break;
          case 51: 
            { string.append( '\'' );
            }
          case 161: break;
          case 52: 
            { string.append( '\\' );
            }
          case 162: break;
          case 53: 
            { string.append( '\b' );
            }
          case 163: break;
          case 54: 
            { string.append( '\t' );
            }
          case 164: break;
          case 55: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 165: break;
          case 56: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 166: break;
          case 57: 
            { return symbol(AND,yytext());
            }
          case 167: break;
          case 58: 
            { return symbol(END        , yytext());
            }
          case 168: break;
          case 59: 
            { return symbol(INT        , yytext());
            }
          case 169: break;
          case 60: 
            { return symbol(NIL        , yytext());
            }
          case 170: break;
          case 61: 
            { return symbol(NOT,yytext());
            }
          case 171: break;
          case 62: 
            { return symbol(SET        , yytext());
            }
          case 172: break;
          case 63: 
            { return symbol(DIV,yytext());
            }
          case 173: break;
          case 64: 
            { return symbol(FOR        , yytext());
            }
          case 174: break;
          case 65: 
            { return symbol(MOD,yytext());
            }
          case 175: break;
          case 66: 
            { return symbol(VAR        , yytext());
            }
          case 176: break;
          case 67: 
            { return symbol(XOR,yytext());
            }
          case 177: break;
          case 68: 
            { return symbol(RSHIFTEQ   , yytext());
            }
          case 178: break;
          case 69: 
            { return symbol(LSHIFTEQ   , yytext());
            }
          case 179: break;
          case 70: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          case 180: break;
          case 71: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          case 181: break;
          case 72: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          case 182: break;
          case 73: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          case 183: break;
          case 74: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          case 184: break;
          case 75: 
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 185: break;
          case 76: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 186: break;
          case 77: 
            { return symbol(REAL       , yytext());
            }
          case 187: break;
          case 78: 
            { return symbol(READ       , yytext());
            }
          case 188: break;
          case 79: 
            { return symbol(BYTE       , yytext());
            }
          case 189: break;
          case 80: 
            { return symbol(ELSE       , yytext());
            }
          case 190: break;
          case 81: 
            { return symbol(GOTO       , yytext());
            }
          case 191: break;
          case 82: 
            { return symbol(TRUE       , yytext());
            }
          case 192: break;
          case 83: 
            { return symbol(TYPE       , yytext());
            }
          case 193: break;
          case 84: 
            { return symbol(THEN       , yytext());
            }
          case 194: break;
          case 85: 
            { return symbol(CASE       , yytext());
            }
          case 195: break;
          case 86: 
            { return symbol(CHAR       , yytext());
            }
          case 196: break;
          case 87: 
            { return symbol(WITH       , yytext());
            }
          case 197: break;
          case 88: 
            { return symbol(FILE       , yytext());
            }
          case 198: break;
          case 89: 
            { return symbol(ARRAY      , yytext());
            }
          case 199: break;
          case 90: 
            { return symbol(BEGIN      , yytext());
            }
          case 200: break;
          case 91: 
            { return symbol(LABEL      , yytext());
            }
          case 201: break;
          case 92: 
            { return symbol(CONST      , yytext());
            }
          case 202: break;
          case 93: 
            { return symbol(WRITE      , yytext());
            }
          case 203: break;
          case 94: 
            { return symbol(WHILE      , yytext());
            }
          case 204: break;
          case 95: 
            { return symbol(FALSE      , yytext());
            }
          case 205: break;
          case 96: 
            { return symbol(UNTIL      , yytext());
            }
          case 206: break;
          case 97: 
            { return symbol(RECORD     , yytext());
            }
          case 207: break;
          case 98: 
            { return symbol(REPEAT     , yytext());
            }
          case 208: break;
          case 99: 
            { return symbol(INLINE     , yytext());
            }
          case 209: break;
          case 100: 
            { return symbol(STRING     , yytext());
            }
          case 210: break;
          case 101: 
            { return symbol(DOWNTO     , yytext());
            }
          case 211: break;
          case 102: 
            { return symbol(PACKED     , yytext());
            }
          case 212: break;
          case 103: 
            { return symbol(BOOLEAN    , yytext());
            }
          case 213: break;
          case 104: 
            { return symbol(LONGINT    , yytext());
            }
          case 214: break;
          case 105: 
            { return symbol(FORWARD    , yytext());
            }
          case 215: break;
          case 106: 
            { return symbol(PROGRAM    , yytext());
            }
          case 216: break;
          case 107: 
            { return symbol(SHORTINT  , yytext());
            }
          case 217: break;
          case 108: 
            { return symbol(FUNCTION  , yytext());
            }
          case 218: break;
          case 109: 
            { return symbol(PROCEDURE , yytext());
            }
          case 219: break;
          case 110: 
            { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
            }
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
