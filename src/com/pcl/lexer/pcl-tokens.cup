import java_cup.runtime.*;

terminal AND; // and_expression
terminal ARRAY;
terminal BEGIN;
terminal BOOLEAN; // primitive_type
terminal BYTE, SHORTINT, INT, LONGINT, CHAR; // integral_type
terminal CASE, DEFAULT; // switch_label
terminal CONST, GOTO;
terminal PLUS, MINUS, COMP, NOT, DIV, MOD;
terminal DO, WHILE; // while_statement, do_statement
terminal DOWNTO;
terminal IF, ELSE; // if_then_statement, if_then_else_statement
terminal END;
terminal FALSE;
terminal TRUE;
terminal FILE;
terminal FOR; // for_statement
terminal FORWARD;
terminal FUNCTION;
terminal IN;
terminal INLINE;
terminal LABEL;
terminal NIL;
terminal OF;
terminal OR;  // inclusive_or_expression
terminal PACKED;
terminal PROCEDURE;
terminal PROGRAM;
terminal READ;
terminal REAL;
terminal RECORD;
terminal REPEAT;
terminal SET;
terminal java.lang.String STRING_LITERAL;
terminal THEN;
terminal TO;
terminal TYPE;
terminal UNTIL;
terminal VAR;
terminal WITH;
terminal WRITE;
terminal XOR; // exclusive_or_expression

//-------------------
terminal FLOAT, DOUBLE; // floating_point_type
terminal LBRACK, RBRACK; // array_type
terminal DOT; // qualified_name
terminal SEMICOLON, MULT, COMMA, LBRACE, RBRACE, EQ, LPAREN, RPAREN, COLON;
terminal PACKAGE; // package_declaration
terminal IMPORT; // import_declaration
terminal PUBLIC, PROTECTED, PRIVATE; // modifier
terminal STATIC; // modifier
terminal ABSTRACT, FINAL, NATIVE, SYNCHRONIZED, TRANSIENT, VOLATILE;
terminal CLASS; // class_declaration
terminal EXTENDS; // super
terminal IMPLEMENTS; // interfaces
terminal VOID; // method_header
terminal THROWS; // throws
terminal THIS, SUPER; // explicit_constructor_invocation
terminal INTERFACE; // interface_declaration

terminal SWITCH; // switch_statement

terminal BREAK; // break_statement
terminal CONTINUE; // continue_statement
terminal RETURN; // return_statement
terminal THROW; // throw_statement
terminal TRY; // try_statement
terminal CATCH; // catch_clause
terminal FINALLY; // finally
terminal NEW; // class_instance_creation_expression
terminal PLUSPLUS; // postincrement_expression
terminal MINUSMINUS; // postdecrement_expression

terminal LSHIFT, RSHIFT, URSHIFT; // shift_expression
terminal LT, GT, LTEQ, GTEQ, INSTANCEOF; // relational_expression
terminal EQEQ, NOTEQ; // equality_expression

terminal ANDAND; // conditional_and_expression
terminal OROR; // conditional_or_expression
terminal QUESTION; // conditional_expression
terminal MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ; // assignment_operator
terminal LSHIFTEQ, RSHIFTEQ, URSHIFTEQ; // assignment_operator
terminal ANDEQ, XOREQ, OREQ; // assignment_operator

terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.Character CHARACTER_LITERAL;

terminal java.lang.String IDENTIFIER; // name

// strictfp keyword, new in Java 1.2
terminal STRICTFP;



/*-*
 * The following two lines define a dummy non-terminal and grammar rule.  CUP
 * needs at least one rule to run without errors.
 */
non terminal dummy;
dummy ::= ;
